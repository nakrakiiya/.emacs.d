INFO-DIR-SECTION Ciao System Manuals
START-INFO-DIR-ENTRY
* lpdoc-3.0.0: (lpdoc-3.0.0).
	The lpdoc Documentation Generator (version 3.0 of 2011/7/7)
END-INFO-DIR-ENTRY

This is lpdoc-3.0.0.info.tmp, produced by makeinfo version 4.13 from
lpdoc-3.0.0.texi.

This documentation corresponds to version 3.0 (2011/7/7, 16:33:15
CEST).

   Copyright (C) 1996-2011 Manuel Hermenegildo and Jose' Francisco
Morales.

   This document may be freely read, stored, reproduced,
disseminated, translated or quoted by any means and on any medium
provided the following conditions are met:

  1. Every reader or user of this document acknowledges that is aware
     that no guarantee is given regarding its contents, on any
     account, and specifically concerning veracity, accuracy and
     fitness for any purpose.

  2. No modification is made other than cosmetic, change of
     representation format, translation, correction of obvious
     syntactic errors, or as permitted by the clauses below.

  3. Comments and other additions may be inserted, provided they
     clearly appear as such; translations or fragments must clearly
     refer to an original complete version, preferably one that is
     easily accessed whenever possible.

  4. Translations, comments and other additions or modifications must
     be dated and their author(s) must be identifiable (possibly via
     an alias).

  5. This licence is preserved and applies to the whole document with
     modifications and additions (except for brief quotes),
     independently of the representation format.

  6. Any reference to the "official version", "original version" or
     "how to obtain original versions" of the document is preserved
     verbatim. Any copyright notice in the document is preserved
     verbatim. Also, the title and author(s) of the original document
     should be clearly mentioned as such.

  7. In the case of translations, verbatim sentences mentioned in
     (6.) are preserved in the language of the original document
     accompanied by verbatim translations to the language of the
     traslated document. All translations state clearly that the
     author is not responsible for the translated work. This license
     is included, at least in the language in which it is referenced
     in the original version.

  8. Whatever the mode of storage, reproduction or dissemination,
     anyone able to access a digitized version of this document must
     be able to make a digitized copy in a format directly usable,
     and if possible editable, according to accepted, and publicly
     documented, public standards.

  9. Redistributing this document to a third party requires
     simultaneous redistribution of this licence, without
     modification, and in particular without any further condition or
     restriction, expressed or implied, related or not to this
     redistribution. In particular, in case of inclusion in a
     database or collection, the owner or the manager of the database
     or the collection renounces any right related to this inclusion
     and concerning the possible uses of the document after
     extraction from the database or the collection, whether alone or
     in relation with other documents.


   Any incompatibility of the above clauses with legal, contractual
or judiciary decisions or constraints implies a corresponding
limitation of reading, usage, or redistribution rights for this
document, verbatim or modified.


File: lpdoc-3.0.0.info.tmp,  Node: Top,  Next: Summary,  Prev: (dir),  Up: (dir)

The lpdoc Documentation Generator
*********************************


   This documentation corresponds to version 3.0 (2011/7/7, 16:33:15
CEST).

* Menu:

* Summary::
* Introduction::
* *** PART I - LPdoc Reference Manual::
* Generating Installing and Accessing Manuals::
* Documentation Mark-up Language and Declarations::
* The Ciao assertion package::
* Types and properties related to assertions::
* Declaring regular types::
* Basic data types and properties::
* Properties which are native to analyzers::
* Meta-properties::
* An Example - Documenting a Library Module::
* Auto Documenter Output for the Example Module::
* Run-time checking of assertions::
* Unit Testing Library::
* Installing lpdoc::
* *** PART II - LPdoc Internals Manual::
* Documentation Generation Library::
* Internal State for Documentation Generation::
* Documentation Abstract Syntax Tree::
* Handling the Document Structure::
* Access to Default Settings::
* *** LPdoc Backends::
* Texinfo Backend::
* HTML Backend::
* Resource Handling for the HTML Backend::
* Template Support for the HTML Backend::
* Man Pages (man) Backend::
* Filesystem Abstraction::
* Indexing Commands (Definition and Formatting)::
* Database of Documentation References::
* Error Messages::
* Resolution of Bibliographical References::
* Auxiliary Definitions::
* Image Handling::
* References::
* Library/Module Index::
* Predicate/Method Index::
* Property Index::
* Regular Type Index::
* Declaration Index::
* Concept Index::
* Author Index::
* Global Index::


File: lpdoc-3.0.0.info.tmp,  Node: Summary,  Next: Introduction,  Prev: Top,  Up: Top

Summary
*******

`lpdoc' is an _automatic program documentation generator_ for (C)LP
systems.

   `lpdoc' generates a reference manual automatically from one or
more source files for a logic program (including ISO-Prolog, Ciao,
many CLP systems, ...). It is particularly useful for documenting
library modules, for which it automatically generates a description
of the module interface. However, `lpdoc' can also be used quite
successfully to document full applications and to generate nicely
formatted plain ascii "readme" files. A fundamental advantage of using `lpdoc'
to document programs is that it is much easier to maintain a true
correspondence between the program and its documentation, and to
identify precisely to what version of the program a given printed
manual corresponds.

   The quality of the documentation generated can be greatly enhanced
by including within the program text:

   * _assertions_ (types, modes, etc. ...) for the predicates in the
     program, and

   * _machine-readable comments_ (in the "literate programming"
     style).


   The assertions and comments included in the source file need to be
written using the Ciao system _assertion language_. A simple
compatibility library is available to make traditional (constraint)
logic programming systems ignore these assertions and comments
allowing normal treatment of programs documented in this way.

   The documentation is currently generated in `HTML' or `texinfo'
format. From the `texinfo' output, printed and on-line manuals in
several formats (dvi, ps, info, etc.) can be easily generated
automatically, using publicly available tools.  `lpdoc' can also
generate 'man' pages (Unix man page format) as well as brief
descriptions in html or emacs info formats suitable for inclusion in
an on-line index of applications. In particular, `lpdoc' can create
and maintain fully automatically WWW and info sites containing
on-line versions of the documents it produces.

   The `lpdoc' manual (and the Ciao system manuals) are generated by `lpdoc'.

   `lpdoc' is distributed under the GNU general public license.

*Note*: `lpdoc' is fully supported on Linux, Mac OS X, and other
Un*x-like systems. Due to the use of several Un*x-related utilities,
some documentation back-ends may require `Cygwin' under Win32.


File: lpdoc-3.0.0.info.tmp,  Node: Introduction,  Next: *** PART I - LPdoc Reference Manual,  Prev: Summary,  Up: Top

1 Introduction
**************

`lpdoc' is an _automatic program documentation generator_ for (C)LP
systems.

   `lpdoc' generates a reference manual automatically from one or
more source files for a logic program (including ISO- `Prolog'
[DEDC96], `Ciao' [Bue95], many `CLP' [JM94] systems, ...). It is
particularly useful for documenting library modules, for which it
automatically generates a description of the module interface.
However, `lpdoc' can also be used quite successfully to document full
applications and to generate nicely formatted plain ASCII "readme"
files. A fundamental advantage of using `lpdoc' to document programs
is that it is much easier to maintain a true correspondence between
the program and its documentation, and to identify precisely to what
version of the program a given printed manual corresponds.

* Menu:

* Overview of this document::
* lpdoc operation - source and target files::
* lpdoc usage::
* Version/Change Log::


File: lpdoc-3.0.0.info.tmp,  Node: Overview of this document,  Next: lpdoc operation - source and target files,  Prev: Introduction,  Up: Introduction

1.1 Overview of this document
=============================

This first part of the document provides basic explanations on how to
generate a manual from a set of files that already contain assertions
and comments. Examples are given using the files in the `examples'
directory provided with the `lpdoc' distribution.

   These instructions assume that `lpdoc' (at least the executable
and the library) is installed somewhere in your system. Installation
instructions can be found in *note Installing lpdoc::.

   Other parts of this document provide:

   * Documentation on the syntax and meaning of the _assertions_ that `lpdoc'
     uses (those defined in the `Ciao' `assertions' library
     [PBH97,PBH98,Bue98]). These include _comment_ assertions
     (containing basically documentation text), formal assertions
     (containing properties), and combined assertions.

   * Documentation on a basic set of properties, types, etc. which
     are predefined in the `Ciao' `basic_props', `regtypes', `native_props',
     and `meta_props' libraries. These properties, and any others
     defined by the user or in other `Ciao' libraries, can be used in
     program assertions.

   * Documentation on the formatting commands that can be embedded in
     _comments_.


   This document is also an internals manual, providing information
on how the different internal parts of `lpdoc' are connected, which
can be useful if new capabilities need to be added to the system or
its libraries are used for other purposes. To this end, the document
also provides:

   * The documentation for the `autodoc' automatic documentation
     library, which provides the main functionality of `lpdoc'.

   * Documentation on the predicates that define the conversion
     formats used ( `texinfo', and others), and which are in the `autodocformats'
     library.


   All of the above have been generated automatically from the
assertions in the corresponding sources and can also be seen as
examples of the use of `lpdoc'.

   Some additional information on `lpdoc' can be found in [Her00].


File: lpdoc-3.0.0.info.tmp,  Node: lpdoc operation - source and target files,  Next: lpdoc usage,  Prev: Overview of this document,  Up: Introduction

1.2 lpdoc operation - source and target files
=============================================

The main input used by `lpdoc' in order to generate a manual are Prolog
source files. Basically, `lpdoc' generates a file in the GNU `texinfo'
format (with a `.texi' ending) for each `Prolog' file (see "The GNU
Texinfo Documentation System" manual for more info on this format).
The `Prolog' files must have a `.pl' ending.

   If the `.pl' file does not define the predicates `main/0' or `main/1',
it is assumed to be a _library_ and it is documented as such: the
`.texi' file generated will contain information on the interface
(e.g., the predicates exported by the file, the name of the module
and usage if it is a module, etc.), in addition to any other machine
readable comments included in the file (see *note Enhancing the
documentation being generated::). If, on the contrary, the file
defines the predicates `main/0' or `main/1', it is assumed to be an _application_
and no description of the interface is generated (see *note Some
usage tips::).

   If needed, files written directly in `texinfo' can also be used as
input files for `lpdoc'. These files _must have a_ `.src' _(instead
of_ `.texi' _) ending_. This is needed to distinguish them from any
automatically generated `.texi' files. Writing files directly in `texinfo'
has the disadvantage that it may be difficult to adhere to all the
conventions used by `lpdoc'. For example, these files will be
typically used as chapters and must be written as such. Also, the set
of indices used must be the same that `lpdoc' is generating
automatically. Finally, no bibliographic citations can be used.
Because of this, and because in the future `lpdoc' may be able to
generate documentation in formats other than `texinfo' directly (in
which case these files would not be useful), writing files in `texinfo'
directly is discouraged. This facility was added mainly to be able to
reuse parts of manuals which were already written in `texinfo'. Note
that if a stand-alone file needs to be written (i.e., a piece of
documentation that is not associated to any `.pl' file) it can always
be written as a "dummy" `.pl' file (i.e., one that is not used as
code), but which contains machine readable comments).

   A manual can be generated either from a single source file (`.pl'
or `.src') or from a set of source files. In the latter case, then
one of these files should be chosen to be the _main file_, and the
others will be the _component files_. The main file is the one that
will provide the title, author, date, summary, etc. to the entire
document. In principle, any set of source files can be documented,
even if they contain no assertions or comments. However, the presence
of these will greatly improve the documentation (see *note Enhancing
the documentation being generated::).

   If the manual is generated from a single main file (i.e.,
`component/1', defined below, is empty), then the document generated
will be a flat document containing no chapters. If the manual is
generated from a main file and one or more components, then the
document will contain chapters. The comments in the main file will be
used to generate the introduction, while each of the component files
will be used to generate a separate chapter. The contents of each
chapter will be controlled by the contents of the corresponding
component file.

   As mentioned before, `lpdoc' typically generates `texinfo' files.
From the `texinfo' files, `lpdoc' can generate printed and on-line
manuals in several formats (`dvi', `ps', `ascii', `html', `info',
etc.) automatically, using different (publicly available) packages.
Documentation in some other formats (e.g., `manl' pages) can be
generated directly by `lpdoc', selecting the appropriate options (see
below).  `lpdoc' can also generate directly includes generating
(parts of) a master index of documents which can be placed in an
installation directory and which will provide pointers to the
individual manuals generated. Using this feature, `lpdoc' can
maintain global `html' and/or `info' documentation sites
automatically (see *note Installing a generated manual in a public
area::).

   Additionally, `lpdoc' can provide some data from the main (prolog)
documentation file. For this purpose the option `getinfo' can be used
instead of specifying the format. This option reads the asked fields
from `getinfo' variable (defined in `SETTINGS.pl' or via arguments
with -d option).  `lpdoc' will generate files with main documentation
file-name as base-name, followed by one underscore, the asked field
(got from `getinfo'), and the extension. The content of each of these
files (so also the extension) is specified by `getinfo_format', that
can take the values `html, ascii, texic'. For example, to ask for the
`summary' and the `author' fields from a prolog file called
`file.pl', with `lpdoc' documentation, we can execute the command
`lpdoc -d getinfo=[author,summary] getinfo'. The files
`myfile_author.txt' and `myfile_summary.txt' will be created. If also
the option `-d getinfo_format=html' is used, the files will have html
extension (and content).


File: lpdoc-3.0.0.info.tmp,  Node: lpdoc usage,  Next: Version/Change Log,  Prev: lpdoc operation - source and target files,  Up: Introduction

1.3 lpdoc usage
===============

The following provides the different command line options available
when invoking `lpdoc'. This description is intended only for advanced
users which might like to use `lpdoc' in custom applications. Note
that the normal way to use `lpdoc' is by setting parameters in an `SETTINGS'
file (see *note Generating a manual::).

   TODO: command line options not available here; need cooperation
with lpmake


File: lpdoc-3.0.0.info.tmp,  Node: Version/Change Log,  Prev: lpdoc usage,  Up: Introduction

1.4 Version/Change Log
======================

*Version 3.0 (2011/7/7, 16:33:15 CEST)*
        * Major redesign of the documentation generator:
             * LPdoc redesigned to work internally with a 'doctree'
               representation (a-la Pillow). (Jose Morales)

             * A native HTML backend (not generated from texi). (Jose
               Morales)

             * Allow custom website generation from LPdoc documents.
               (Jose Morales)

             * Two passes for document generation, allowing
               resolution of bibliographical references in all
               backends (including HTML). (Jose Morales)

             * `doc_structure/1' in `SETTINGS' allows structure in
               LPdoc documents (sections can really be nested inside
               parts). (Jose Morales)

             * `:- doc(_,_)' is the recommended syntax for
               documentation comments now.

             * Replacing `:- comment' by `:- doc' in LPdoc code,
               updated documentation. (Jose Morales)

        * General improvements and bug fixes:
             * Designed a logo for LPdoc. (Jose Morales)

             * LPdoc comments can now be written using `%!' style
               comment syntax. (Manuel Hermenegildo)

             * Now commas etc. are allowed in section names (so that
               they can be used in other formats). They are
               eliminated automatically in texi and info. This avoids
               wrong section names -and thus dangling pointers- in
               generated texinfo files. (Manuel Hermenegildo)

             * Eliminated superfluous copy of summary in info mode.
               (Manuel Hermenegildo)

             * Eliminated unsupported chars that broke texi manual
               cross-referencing. (Manuel Hermenegildo)

             * Improved treatment of accents (dotless i and dotless
               j, o, etc.). (Manuel Hermenegildo)

             * Initial size passed to `xdvi' more appropriate for
               current `xdvis'. (Manuel Hermenegildo)

             * Accents in bibliography fixed. (Manuel Hermenegildo)

             * Now repeated sections are disambiguated. (Manuel
               Hermenegildo)

             * Eliminated unnecessary escaping (especially for &).
               (Manuel Hermenegildo)

             * Better detection of when version is not available.
               (Manuel Hermenegildo)

             * Added new `doc(address, _)' comment, which is the
               right place to put address/contact information in
               manuals (Jose Morales)

             * Added new `@version{}' command (expands to the version
               of the software to be documented). (Jose Morales)

             * Shorter `SETTINGS.pl' files (with some rudimentary,
               assertion-based checking of options) (Jose Morales)

             * Bug fix: '`@@ include'' and '`@@ includeverbatim'' are
               no longer a problem (space can be omitted) (Jose
               Morales)

             * Added and documented a new `documentation' filetype
               (for some parts of the manual that contains only
               documentation). That avoids the old trick of declaring
               a fake `main/0' predicate. (Jose Morales)

             * Style for subtitle added automatically (in texinfo, it
               is _emph_; in HTML it is normal text with smaller
               font). The entries in `subtitle_extra' are free-form.
               (Jose Morales)

             * Bugs and changelog appear now in the global links in
               the HTML backend. (Jose Morales)

             * Merged code that documented `.pl' and `.lpdoc' files.
               (Jose Morales)

             * No copyright section if no copyright comment. (Jose
               Morales)

             * Auxiliary documentation files ending in '`_doc''
               displayed incorrect names for the module (ending in
               '`_doc''). E.g., `use_package(foo_doc)' was displayed
               instead of `use_package(foo_doc)'. Fixed. (Jose
               Morales)

             * In `verbatim' enviroments, new-line characters are
               removed from the beginning. (Jose Morales)

             * Fix wrong use of `erase/1' for clauses (which resulted
               in segmentation fault when documentation generation
               failed) (Jose Morales)

             * Fixed image generation (now uses `.png' files for
               HTML) (Jose Morales)

             * New code for text escape fixed some problems, like
               '`@/1'' operator not being displayed corretly in Info.
               (Jose Morales)

             * Colors for Prolog variables (in HTML). (Jose Morales)

             * Added `@begin{alert}' environment for alert messages
               (like cartouche, but in red). (Jose Morales)

             * Supporting '@"' command for umlaut, in addition to
               '@..' (Jose Morales)

             * Double quotes correctly translated to HTML (Jose
               Morales)

             * `@author' command to reference authors (changed command
               referring to people by `@author', in all the
               documentation) (Jose Morales)

             * Simplification of documentation setting files (see the
               documentation for further details) (Jose Morales)

             * Using `open' for `lpdoc htmlview' command in MacOS X
               (Jose Morales)

             * Adding `html' and `pdf' formats as options for emacs
               customization of LPdoc (`html' is the default one now)
               (Jose Morales)

             * Improved detection of external tools for image
               conversion. (Manuel Hermenegildo)

             * Added section name syntax auto-correction. This avoids
               wrong section names -and thus dangling pointers- in
               generated texinfo files. (Manuel Hermenegildo)

             * Document size more appropriate for current xdvi
               versions. (Manuel Hermenegildo)

             * Lpdoc no longer adds .info filename suffix to
               .infoindex entries since it breaks Debian's
               install-info -remove and goes against standard
               practice anyway. (Jose Luis Gonzalez)

             * Added option -cv, -comment-version, that tells lpdoc
               if the file has version comment. Formatting of lpdoc
               version comments completed. (Edison Mera)

             * Improved handling of option values. Added -d option to
               lpdoc, that allows defining additional values in the
               argument. Added options -l and -m that are similar to
               the corresponding lpmake options. (Edison Mera)

        * Support for in-code sections (experimental):
             * Latex-like font-lock highlight of sectioning
               documentation comments (`:- doc(C, "...")', with `C'
               one of `title', `section', and `subsection').

               Currently the `section' and `subsection' comments are
               still ignored by LPdoc. (Jose Morales)

        * Support for mathematical notation (experimental):
             * new @math{...} and
               @begin{displaymath}...@end{displaymath} enviroments
               are supported (see the documentation for more details)
               (Jose Morales)

             * In documentation strings, single `\' must be escaped
               (e.g. '@math{\\lambda}') (Jose Morales)

             * Supported in both the texinfo and HTML (using MathJax)
               backends. (Jose Morales)

             * Added `@defmathcmd{Cmd}{N}{Def}' and
               `@defmathcmd{Cmd}{Def}', both for texinfo and HTML
               backends. Those LPdoc commands define new mathematical
               environments (equivalent to `\newcommand'). (Jose
               Morales)

*Version 2.1 (2004/10/28, 16:38:17 CEST)*
     Last version before moving to subversion. 1.9 and 2.0 were
     merged. 1.9 (based on makefiles) is deprecated.

        * New functionality:
             * Use of `:- doc' declarations (as a shorthand for
               `comment') now allowed. (Manuel Hermenegildo)

             * Made xdvi viewer, ps viewer, and xdvi zoom size be
               paramenters (the latter since new versions of xdvi
               display sizes differently than old ones). (Manuel
               Hermenegildo)

             * Processing options can now be set for each file
               independently. (Manuel Hermenegildo)

             * Proper pdf generation now achieved in most cases,
               thanks to newer versions of `dvips'. (Manuel
               Hermenegildo)

             * Added option -c Target in lpdoc, that treats Target as
               a separate component. (Edison Mera)

             * Added option -f ConfigFile in lpdoc, that uses the
               file ConfigFile instead the default LPSETTINGS.pl.
               (Edison Mera)

             * Added option ascii that generates documentation in
               ascii plain format. (Edison Mera)

             * Added -help option. Is equal to -h. (Edison Mera)

             * Added option testsettings to check that the settings
               file is correctly specified. (Edison Mera)

             * Changed `generate_html_pointer/5' by `generate_html_pointer/6'
               to let it work with any given directory, and not only
               the working directory. (Edison Mera)



*Version 2.0 (1999/8/17, 17:28:52 CEST)*
     Major change to eliminate need for Makefiles: lpdoc is now a
     standalone command (Manuel Hermenegildo). Proceeds in parallel
     with further development of 1.9. Merge pending. Previous changes
     incorporated since 1.8:

        * New functionality:
             * A new parameter `PAPERTYPE' can be set in the `SETTINGS'
               file which controls the format of printed output.
               (Manuel Hermenegildo)

             * Default pdf viewer is now `ghostview', sicne recent
               versions handle `pdf' well. (Manuel Hermenegildo)

             * Changed default style sheet in order to show <PRE>
               lines with a monospaced font. (Daniel Cabeza Gras)

             * Mode definitions now documented in a separate section.
               The way they are documented has been improved. (Manuel
               Hermenegildo)

             * References in files now updated only if `.refs' file
               is not empty. (Manuel Hermenegildo)

             * A _copy_ of the html style sheet is now included in
               _distributions_. Also _Copies_ of the html and info
               index head and tail files. (Manuel Hermenegildo)

             * Made pointers relative in library html templates.
               (Manuel Hermenegildo)


        * Bug fixes and other minor improvements:
             * Declarations now documented properly even if they have
               the same name and arity as a predicate. (Manuel
               Hermenegildo)

             * Accented i's now translate correctly in html. (Manuel
               Hermenegildo)

             * Fixed a funny installation quirk: while we want to
               install LPdoc in the Ciao group, the manuals produced
               by LPdoc should be installed in the LPdoc group.
               (Manuel Hermenegildo)

             * Now using `lpdoclib' path alias. (Manuel Hermenegildo)

             * Fixed bug in ordering of html indices in recent Linux
               versions, related to varying file listing order
               depending on locale. (Manuel Hermenegildo)


*Version 1.9 (1999/7/8, 18:19:43 MEST)*
     In this release the name of the application has changed to `lpdoc'.

        * New commands:
             * @begin{cartouche} and @end{cartouche} commands now
               supported.

             * @foonote command now supported.

             * New `gmake htmlview' command (makes a running `netscape'
               visit the generated html manual). Suggested by Per
               Cederberg.

             * New `gmake distclean' command, intended for software
               distributions. Leaves the generated documents and
               eliminates _all_ intermediate files (including
               `.texic'/`.texi' files).

             * Adobe `pdf' format now supported as a valid target.
               Unfortunately, embedded `.eps' figures are not
               supported at this time in pdf output.

             * The second argument of `:- comment(hide,...).' and `:-
               comment(doinclude,...).' declarations can now be a
               list of predicate names.

             * A `-u' _File_ option is now supported so that a file
               including, e.g., path alias definitions can be
               included (this has the same functionality as the `-u'
               option in `ciaoc').

             * Now typing just `gmake' does nothing. In order to do
               something at least one target should be specified.
               This was necessary so that recursive invocations with
               empty arguments did nothing.

             * Added a new filetype: `part'. This allows splitting
               large documents into parts, each of which groups a
               series of chapters.

        * Other new functionality:
             * A style sheet can now be specified which allows
               modifying many characteristics of the html output
               (fonts, colors, background, ...) (thanks to Per
               Cederberg).

             * Added limited support for changing page numbering (in `SETTINGS'
               file).

             * The concept indexing commands (@index, @cindex, and
               @concept) now work somewhat differently, to make them
               consistent with other indexing commands.

             * The old _usage_ index is now called, more
               appropriately, _global_ index. Correspondingly,
               changed things so that now every definition goes to
               the global index in addition to its definitional index.

             * Imported files from module `user' are now documented
               separately.

             * Now a warning is issued if characters unsupported by
               info are used in section names.

             * Navigation in html docs was improved.

             * The table of contents in printed manuals now contains
               entries for the individual descriptions of predicates,
               props, regtypes, declarations, etc. This can be shut
               off with the `-shorttoc' option.

             * Made more silent in normal conditions: file inclusion
               is muted now unless `-v' option is selected.

             * A single `.texi' file is now constructed (by grouping
               the `.texic' files generated for all components) in
               which the references and menus are resolved. This has
               the advantage that the process of resolving references
               and menus has now been sped up very significantly.
               Also, `texi' is now a valid target (perhaps useful for
               distributions). The generated files now have `texic'
               (_texinfo component_).

             * Now, declarations are always documented as long as
               there is a `decl' assertion. Also, they are now
               documented in a separate section.

        * Bug fixes and other minor improvements:
             * The directory containing html manual is now called
               _BASENAME_`_html' instead of just _BASENAME_, which
               was confusing.

             * Now requesting building a .ps only does not leave a
               .dvi behind (useful for distributions).

             * File names can now include the symbol `_' even if they
               contain figures.

             * `TeX'-related intermediate files are now cleaned up
               after each run in order to avoid clutter.

             * Fixed `-modes', which was broken since going to the
               new normalizer (was normalizer problem). Fixed problem
               with no documentation when only modes given.

             * Fixed duplication of documentation for internal
               predicates when also exported.

             * Minor formatting problem when no documentation nor
               definition found for a regtype fixed.

             * Determining exports, imports, etc. now done solely by
               calls to `c_itf' library (and, thus, synchronized with `ciaoc'
               compiler).
     (Manuel Hermenegildo)

*Version 1.8 (1999/3/24, 21:15:33 MET)*
     This version completes the port to using the ciao 0.8 modular
     assertion processing library. In addition, it includes the
     following improvements:

        * Now, if the name of a file being documented ends in `_doc',
          the `_doc' part is left out when referring to the file in
          the documentation (useful if one would like to place the
          documentation declarations in different file).

        * It is now possible to declare (via a `comment/2'
          declaration) the intended use of a file which is not a
          module (i.e. a package, user, or include file), which
          results in correct documentation of operator definitions,
          new declarations, etc. The declaration is only needed for
          'user' files (i.e., files to be loaded with `ensure_loaded/1').

        * Separated generation of the manuals from their
          installation. I.e., `gmake install' now does not force a
          `gmake all', which has to be done by hand. This was
          necessary to ensure correct installation of distributed
          manuals, even if modification dates are changed during
          installation. Previously, in some cases generation was
          triggered unnecessarily.

        * New `-v' option allows using quieter by default operation
          when not debugging.

        * New option `-propmods' makes the name of the module in
          which a property is defined appear in front of the property
          in the places where the property is used.

        * New option `-noisoline' makes the textual explanation of the `iso/1'
          property not appear in the description of the usage (but
          the < * ISO * >symbol does appear)

        * Two new options, `-nosysmods' and `-noengmods', selectively
          avoid listing the system or engine libraries used.

        * If there is no declaration for a predicate, now a line is
          output with the name and arity and a simple comment saying
          that there is no further documentation available (this has
          the great advantage that then it goes in the index, and,
          for example in ciao, they get added to completion
          commands!).

        * Now, if a property or regtype declaration has no textual
          comment, the actual definition is given (first level only)
          in the place where it is documented, and a simple generic
          message where it is used.

        * Added @noindent and @iso commands.

        * Nicer spacing now when printing predicate names which are
          operators, as well as modes, etc.

        * Reporting of versions in libraries has been improved: now
          both the global version and the last version in which the
          library itself was changed are reported.

        * Exported new declarations also documented now for
          include-type files.

        * A module is now documented even if exports nothing at all.

        * Engine modules used now documented even if no other modules
          used (was a reported bug).

        * Fixed indexing of names containing @ etc. for newer
          versions of texinfo.

        * Tabs in verbatim modes now converted to a number of spaces
          (8). Not perfect, but produces better output than leaving
          the tabs in.

        * Tex is now run in 'nonstopmode' which means it will
          typically not stop if there are minor errors (but some
          errors may go unnoticed...).

        * The full path of the version maintenance directory is now
          computed (correctly) using the directory of the `.pl' file
          being documented as base.

        * Notices for missing subtitle, copyright, and summary now
          only given from main file and not for components.

        * Added special handling of regtype and generalized it to
          handle some props specially if there is a certain comp
          property present.

     (Manuel Hermenegildo)

*Version 1.7 (1998/12/2, 17:43:50 MET)*
     Major port to use the ciao 0.8 modular assertion processing
     library. (Manuel Hermenegildo)

*Version 1.6 (1998/9/8, 12:49:26 MEST)*
     Added support for inserting images (.eps files) in text via
     @image command, email addresses via @email command, and url
     references via @uref command.

     Unix 'man' output much improved. Also, it now includes a usage
     section. The correspoding text must be given in a string
     contained in the first argument of a fact of the `usage_message/1'
     predicate which appears in the program. Also, formatting of
     'man' pages has been greatly improved.

     A new 'ascii' format is now supported: a simple minded ascii
     manual (basically, an info file without pointers).

     (Manuel Hermenegildo)

*Version 1.5 (1998/8/23, 20:30:32 EST)*
     Now supporting a @cite command (YES!). It automatically accesses
     the bib entries in `.bib' files (using `bibtex') and produces a
     'References' appendix. @cite can be used in the text strings
     exactly as ite in LaTeX. The set of bib files to be used is
     given in the `SETTINGS' file.

     Defining the type of version maintenance that should be
     performed by the `emacs' ciao.el mode (i.e., whether version
     numbers are in a given directory or in the file itself) is
     controlled now via a standard `commment/2' declaration. You
     should now write a declaration such as:

     `:- comment(version_maintenance,dir('../version')).'

     to state that control info is kept in directory `../version'.
     This has the advantage that it is shorter than the previous
     solution and that lpdoc can read this info easily. Using this
     guarantees that the version numbers of the manuals always
     concide with those of the software.

     Generation of indices of manuals (.htmlbullet files): if several
     manuals are installed in the same directory, an index to them is
     now generated at the beginning of the html cover page describing
     the directory.

     (Manuel Hermenegildo)

*Version 1.4 (1998/8/4, 19:10:35 MET DST)*
     The set of paths defined in `SETTINGS' for finding the source
     files are now also used to find 'included' files. As a result,
     full path is not needed any more in, e.g, @include command.

     New @ref command which can be used to refer to chapeter,
     sections, subsections, etc..

     Support for recent minor changes in assertion format, including
     '#' as comment separator.

     Used modules are now separated in documentation (in the
     interface description) by type (user, system, engine...).

     Supports new 'hide' option in comments, to prevent an exported
     predicate from being documented. This is useful for example for
     avoiding mentioning in the documentation multifile predicates
     which are not intended to be modified by the user.

     (Manuel Hermenegildo)

*Version 1.3 (1998/7/10, 16:35:2 MET DST)*
     Exports are now listed in the chapter header separated by kind
     (pred, types, properties, ...).

     The list of other modules used by a module is now separated in
     the chapter header into User and System modules (controlled by
     two sets of paths in `SETTINGS').

     New _hide_ option of comment/2 decl prevents an exported
     predicate from being included in the documentation: `:-
     comment(hide,p/3)'.

     (Manuel Hermenegildo)

*Version 1.2 (1998/6/4, 9:12:19 MET DST)*
     Major overall improvements... (Manuel Hermenegildo)

*Version 1.1 (1998/3/31)*
     Incorporated autodoc and autodoformats library to source in
     order to make distribution standalone. Improvements to
     installation and documentation. `Makefile's now also install
     documentation in public areas and produce global indices.
     Several documents can cohexist in the same installation
     directory. (Manuel Hermenegildo)

*Version 1.0 (1998/2/24)*
     First Ciao-native distribution, with installation. (Manuel
     Hermenegildo)

*Version 0.9 (1998/2/24)*
     Intermediate version, preparing for first major release.
     Modified `Makefile' and `SETTINGS' to handle installation of
     manuals. (Manuel Hermenegildo)

*Version 0.6 (1998/2/10)*
     Added new indices and options, as well as more orthogonal
     handling of files. (Manuel Hermenegildo)

*Version 0.4 (1998/2/24)*
     Added support for nroff -m formatting (e.g., for man pages).
     Added support for optional selection of indices to be generated.
     Added support for reexported predicates. Added (low level) ascii
     format. Added option handling (-nobugs -noauthors -noversion
     -nochangelog -nopatches -modes and -headprops ...).
     -literalprops. Fixed presentation when there are multiple kinds
     of assertions. Better error checking for includefact/includedef.
     (Manuel Hermenegildo)

*Version 0.3 (1998/2/10)*
     Changed file reader to use Ciao native builtins. As a result,
     syntax files and full Ciao syntax now supported. Major
     reorganization of the code to make formatting more orthogonal.
     Now applications and libraries can be components or main files,
     standalone or with components interchangeably. @includefact, new
     predicate types, used libraries now precisely detected,
     `docinclude' option. (Manuel Hermenegildo)

*Version 0.2 (1997/12/16)*
     Ported to native ciao. Version handling, selection of indices,
     @include. Added generation of an html brief description for a
     global index. Added unix manual page generation. Added support
     for specifying library paths. -l option for htmlindex and man.
     Installation improved: now all files for one application in the
     same directory. (Manuel Hermenegildo)

*Version 0.1 (1997/7/30)*
     First official version (major rewrite from several previous
     prototypes, autodocumented!). (Manuel Hermenegildo)

*Version 0.0 (1996/10/10)*
     First prototype.


File: lpdoc-3.0.0.info.tmp,  Node: *** PART I - LPdoc Reference Manual,  Next: Generating Installing and Accessing Manuals,  Prev: Introduction,  Up: Top

PART I - LPdoc Reference Manual
*******************************


File: lpdoc-3.0.0.info.tmp,  Node: Generating Installing and Accessing Manuals,  Next: Documentation Mark-up Language and Declarations,  Prev: *** PART I - LPdoc Reference Manual,  Up: Top

2 Generating Installing and Accessing Manuals
*********************************************

*Author(s):* Manuel Hermenegildo.

   *Note_ significant parts of this are obsolete. They must be
updated to describe lpdoc version 2.0.*

   This section describes how to generate a manual
(semi-)automatically from a set of source files using `lpdoc', how to
install it in a public area, and how to access it on line. It also
includes some recommendations for improving the layout of manuals, usage
tips, and troubleshooting advice.

* Menu:

* Generating a manual from the Ciao Emacs mode::
* Generating a manual::
* Working on a manual::
* Cleaning up the documentation directory::
* Installing a generated manual in a public area::
* Enhancing the documentation being generated::
* Accessing on-line manuals::
* Some usage tips::
* Troubleshooting::


File: lpdoc-3.0.0.info.tmp,  Node: Generating a manual from the Ciao Emacs mode,  Next: Generating a manual,  Prev: Generating Installing and Accessing Manuals,  Up: Generating Installing and Accessing Manuals

2.1 Generating a manual from the Ciao Emacs mode
================================================

If you use the `Emacs' editor (highly recommended in all
circumstances), then the simplest way to quickly generate a manual is
by doing it from the Ciao Emacs mode (this mode comes with the Ciao
Prolog distribution and is automatically installed with Ciao). The
Ciao Emacs mode provides menu- and keyboard-binding driven facilities
for generating a stand-alone document with the documentation
corresponding to the file in the buffer being visited by Emacs. This
is specially useful while modifying the source of a file, in order to
check the output that will be produced when incorporating this file
into a larger document. It is also possible to generate more complex
documents, by editing the (automatically provided) _SETTINGS.pl_ in
the same way as when generating a manual from the command line (see
below). However, when generating complex documents, it is best to
devote an independent, permanent directory to the manual, and the
full procedure described in the rest of this text is preferred.


File: lpdoc-3.0.0.info.tmp,  Node: Generating a manual,  Next: Working on a manual,  Prev: Generating a manual from the Ciao Emacs mode,  Up: Generating Installing and Accessing Manuals

2.2 Generating a manual
=======================

Two possible scenarios are described in this section. The first one
is indicated to document quickly a single module and the second one
targets the documentation of a larger application or library, in
which the settings (which define how the documentation is to be
generated, etc.) are read from a file, so that they can be reused as
the application / library evolves.

   In order to make `lpdoc' generate quickly the documentation of a
single file it suffices to execute the command `lpdoc -d
doc_structure=modulename dvi', where `modulename' is the module to be
documented (without extension) and (in this example) `dvi' is the
desired format of the manual (other accepted formats include html,
pfd, ps, etc. - see later).  `lpdoc' will generate a manual with the
name of the module and the format extension (in the example it would
be modulename.dvi) in the same directory where it is executed.

   For the second scenario, the `lpdoc' library directory includes a
generic file which is quite useful for the generation of complete
manuals: the _SETTINGS.pl_ file. Use of this file is strongly
recommended. Generating a manual using this file involves the
following steps:

   * Create a directory (e.g., `doc') in which the documentation will
     be built. The creation of this directory is recommended, as it
     will be populated with intermediate files which are best kept
     separate. This directory is typically created in the top
     directory of the distribution of the application or library to
     be documented.

   * Execute the command `lpdoc lpsettings' in the directory where
     the documentation is to be created (e.g., `doc' in the previous
     point).  `lpdoc' will create an `SETTINGS.pl.generated' file
     with the default settings. This file should be renamed to `SETTINGS.pl'
     once the user agrees with its contents.

   * Edit `SETTINGS.pl' to suit your needs. It is recommended that
     you review, at least, the following points:

        * Set the variable `filepath' to include all the directories
          where the files to be documented can be found.

        * Set the variable `systempath' to include all the _system_
          directories where system files used can be found,
          regardless whether they are to be documented or not. This
          will be used to access definitions of types, etc.

          It is very important to include _all_ related directories
          either in `filepath' or in `systempath' because on startup `lpdoc'
          has _no default search paths for files_ defined (not even
          those typically defined by default in the `Prolog' system
          under which it was compiled! - this allows documenting `Prolog'
          systems other than that under which `lpdoc' was compiled).

          The effect of putting a path in `systempaths' instead of in
          `filepaths' is that the modules and files in those paths
          are documented as _system modules_ (this is useful when
          documenting an application to distinguish its parts from
          those which are in the system libraries).

        * Set `doc_structure' to be the _document structure_ ( `doc_structure/1').


     For the rest of the settings in the `SETTINGS.pl' file you can
     simply use the default values indicated. You may however want to
     change several of these:

        * `doc_mainopts' can be set to a series of options which
          allow more detailed control of what is included in the
          documentation for the main file and how (i.e., including
          bug information , versions and patches or only patches ,
          authors , changelog , explanation of modes, _one-sided
          printing_ ( _two-sided_ is the default), etc.). See `option_comment/2'
          in `autodoc' or type `lpdoc -help' for a list of these
          options.

        * In the same way `doc_compopts' sets options for the
          component files. Currently these options are common to all
          component files but they can be different from
          `doc_mainopts'. The allowable options are the same as above.

        * `docformat' determines the set of formats (`dvi', `ps',
          `ascii', `html', `info', `manl', ...) in which the
          documentation should be generated by default when typing `lpdoc
          all'. Selecting `htmlindex' and/or `infoindex' requests the
          generation of (parts of) a master index to be placed in an
          installation directory and which provide pointers to the
          documents generated (see below). If the main file is an
          *application*, and the `manl' option is selected, then `lpdoc'
          looks for a `usage_message/1' fact, which should contain a
          string as argument, and will use that string to document the _usage
          of the application_ (i.e., it will be used to fill in the _synopsis
          section of the man page_).

        * `output_name' determines the base file name of the main
          documents generated by lpdoc. By default it is equal to the
          main file name, or, if the main file name ends with `_doc',
          then it is equal to the name without the `_doc' suffix.
          This is useful when the name of the documentation file to
          be produced needs to have a name that is not directly
          related to the main file being documented.

        * `index' determines the list of indices to be included at
          the end of the document. These can include indices for
          defined predicates, modules, concepts, etc. For a complete
          list of the types of indices available see `index_comment/2'
          in `autodoc' or type `lpdoc -help' for a listing. A setting
          of `all' generates all the supported indices - but _beware
          of limitations in the number of simultaneous indices_
          supported in many `texinfo' installations.

        * `bibfile' determines a list of _.bib files_ (one file per
          path), i.e., files containing _bibliographic entries_ in `bibtex' format.
          This is only relevant if you are using citations in the
          text (using the @cite command). In that case those will be
          the files in which the citations will be searched for. All
          the references will appear together in a _References_
          appendix at the end of the manual.

          If you are not using citations, then select the `-nobiblio'
          option on the main file, which will prevent an empty
          'References' appendix from appearing in the manual.

        * `startpage' (default value 1) allows changing the page
          number of the first page of the manual. This can be useful
          if the manual is to be included in a larger document or set
          of manuals. Typically, this should be an _odd_ number.

        * `papertype' (default value `afourpaper') allows select
          several paper sizes for the printable outputs (`dvi', `ps',
          etc.). The currently supported outputs (most of them
          inherited from `texinfo') are:

         `afourpaper'
               The default, usable for printing on _A4 paper_. Rather
               busy, but saves trees.

         `afourwide'
               This one crams even more stuff than `afourpaper' on an
               A4 page. Useful for generating manuals in the least
               amount of space. It saves more trees.

         `afourlatex'
               This one is a little less compressed than `afourpaper'.

         `smallbook'
               Small pages, like in a handbook.

         `letterpaper'
               For printing on American _letter size paper_.

         `afourthesis'
               A _thesis-like style_ (i.e., double spaced, wide
               margins etc.). Useful - for inserting `lpdoc' output
               as appendices of a thesis or similar document. It does
               not save trees.



   * Type `lpdoc all' to generate all the formats defined. `lpdoc
     dvi', `lpdoc html', `lpdoc ps' or `lpdoc info', etc. will force
     the generation of a single target format.



File: lpdoc-3.0.0.info.tmp,  Node: Working on a manual,  Next: Cleaning up the documentation directory,  Prev: Generating a manual,  Up: Generating Installing and Accessing Manuals

2.3 Working on a manual
=======================

In order to speed up processing while developing a manual, it is
recommended to work by first generating a `.dvi' version only (i.e.,
by typing `lpdoc dvi'). The resulting output can be easily viewed by
tools such as `xdvi' (which can be started by simply typing `lpdoc
view'). Note that once an `xdvi' window is started, it is not
necessary to restart it every time the document is reformatted
(`lpdoc dvi'), since `xdvi' automatically updates its view every time
the `.dvi' file changes. This can also be forced by typing <R> in the `xdvi'
window. The other formats can be generated later, once the `.dvi'
version has the desired contents.


File: lpdoc-3.0.0.info.tmp,  Node: Cleaning up the documentation directory,  Next: Installing a generated manual in a public area,  Prev: Working on a manual,  Up: Generating Installing and Accessing Manuals

2.4 Cleaning up the documentation directory
===========================================

`lpdoc' can also take care of tidying up the directory where the
documentation is being generated:

   * `lpdoc clean' deletes all intermediate files, but leaves the
     targets (i.e., the `.ps', `.dvi', `.ascii', `.html', etc.
     files), as well as all the generated `.texic' files.

   * `lpdoc distclean' deletes all intermediate files and the
     generated `.texic' files, leaving only the targets (i.e., the
     `.ps', `.dvi', `.ascii', `.html', etc. files). This is the
     option normally used when building software distributions in
     which the manuals come ready made in the distribution itself and
     will not need to be generated during installation.

   * `lpdoc docsclean' deletes all intermediate files and the
     generated targets, but leaves the `.texic' files. This option
     can be used in software distributions in which the manuals in
     the different formats will be generated during installation.
     This is generally more compact, but requires the presence of
     several tools, such as `tex', `Emacs', etc. (see *note Other
     software packages required (lpdoc)::), in order to generate the
     manuals in the target formats during installation.

   * `lpdoc realclean' performs a complete cleanup, deleting also the
     .texic files, i.e., it typically leaves only the `SETTINGS.pl'
     file. This is is the most compact, but requires the presence of
     the tools mentioned above, the source files from which the
     manuals are generated and `lpdoc' in order to re generate the
     manuals in the target formats during installation.



File: lpdoc-3.0.0.info.tmp,  Node: Installing a generated manual in a public area,  Next: Enhancing the documentation being generated,  Prev: Cleaning up the documentation directory,  Up: Generating Installing and Accessing Manuals

2.5 Installing a generated manual in a public area
==================================================

*Note_ This part is obsolete. It must be updated to describe lpdoc
version 2.0. - EMM*

   Once the manual has been generated in the desired formats, the `Makefile'
provided also allows automatic installation in a different area,
specified by the `docdir' option in the `SETTINGS.pl' file. This is
done by typing `lpdoc install'.

   As mentioned above, `lpdoc' can generate directly brief
descriptions in html or `Emacs' info formats suitable for inclusion
in an on-line index of applications. In particular, if the
`htmlindex' and/or `infoindex' options are selected, `lpdoc install'
will create the installation directory, place the documentation in
the desired formats in this directory, and produce and place in the
same directory suitable `index.html' and/or `dir' files. These files
will contain some basic info on the manual (extracted from the
summary and title, respectively) and include pointers to the relevant
documents which have been installed. The `infodirheadfile' /
`infodirtailfile' (default examples, used in the CLIP group at UPM,
are included with the distribution) should point to files which will
be used as head and tail templates when generating the `dir'
files.Several manuals, coming from different `doc' directories, can
be installed in the same `docdir' directory. In this case, the
descriptions of and pointers to the different manuals will be
automatically combined (appearing in alphabetic order) in the
`index.html' and/or `dir' indices, and a _contents area_ will appear
at the beginning of the _html index page_.  *Important Note:* In
order for the different components to appear in the correct positions
in the index pages mentioned above the traditional ('C') Lexical
order must be active. In recent Un*x systems (e.g., in most current
Linux systems) this may not be the case. There are several possible
fixes:

   * For `csh' put `setenv LC_COLLATE C' in your `.cshrc'.

   * For `bash' put `export LC_COLLATE=C' in your `.profile'.

   * In many systems this can be done globally by the super-user.
     E.g., in many Linux systems set `LANG="C"' in
     `/etc/sysconfig/i18n'.

   Note that, depending on the structure of the manuals being
generated, some formats are not very suitable for public
installation. For example, the `.dvi' format has the disadvantage
that it is not self contained if images are included in the
manual.Typing `lpdoc uninstall' in a `doc' directory will uninstall
from `docdir' the manuals corresponding to the `Makefile' in that
`doc' directory. If a manual is already installed and changes in the
number of formats being installed are desired, `lpdoc uninstall'
should be made before changing the `docformats' variable and doing
`lpdoc install' again. This is needed in order to ensure that a
complete cleanup is performed.


File: lpdoc-3.0.0.info.tmp,  Node: Enhancing the documentation being generated,  Next: Accessing on-line manuals,  Prev: Installing a generated manual in a public area,  Up: Generating Installing and Accessing Manuals

2.6 Enhancing the documentation being generated
===============================================

The quality of the documentation generated can be greatly enhanced by
including within the program text:

   * _assertions_, and

   * _machine-readable comments_.


   *Assertions* are declarations which are included in the source
program and provide the compiler with information regarding
characteristics of the program. Typical assertions include type
declarations, modes, general properties (such as _does not fail_),
standard compiler directives (such as `dynamic/1', `op/3', `meta_predicate/1'...),
etc. When documenting a module, `lpdoc' will use the assertions
associated with the module interface to construct a textual
description of this interface. In principle, only the exported
predicates are documented, although any predicate can be included in
the documentation by explicitly requesting it (see the documentation
for the `doc/2' declaration). Judicious use of these assertions
allows at the same time documenting the program code, documenting the
external use of the module, and greatly improving the debugging
process. The latter is possible because the assertions provide the
compiler with information on the intended meaning or behaviour of the
program (i.e., the specification) which can be checked at
compile-time (by a suitable preprocessor/static analyzer) and/or at
run-time (via checks inserted by a preprocessor).

   *Machine-readable comments* are also declarations included in the
source program but which contain additional information intended to
be read by humans (i.e., this is an instantiation of the _literate
programming_ style of Knuth [Knu84]). Typical comments include title,
author(s), bugs, changelog, etc. Judicious use of these comments
allows enhancing at the same time the documentation of the program
text and the manuals generated from it.

   `lpdoc' requires these assertions and comments to be written using
the `Ciao' system _assertion language_. A simple compatibility
library is available in order to make it possible to compile programs
documented using assertions and comments in traditional (constraint)
logic programming systems which lack native support for them (see the
`compatibility' directory in the `lpdoc' library). Using this
library, such assertions and comments are simply ignored by the
compiler. This compatibility library also allows compiling `lpdoc'
itself under (C)LP systems other than the `Ciao' system under which
it is developed.


File: lpdoc-3.0.0.info.tmp,  Node: Accessing on-line manuals,  Next: Some usage tips,  Prev: Enhancing the documentation being generated,  Up: Generating Installing and Accessing Manuals

2.7 Accessing on-line manuals
=============================

As mentioned previously, it is possible to generate on-line manuals
automatically from the `.texic' files, essentially `.html', `.info',
and `man' files. This is done by simply including the corresponding
options in the list of `docformats' in the `SETTINGS.pl' file and
typing `lpdoc all'. We now address the issue of how the different
manuals can be read on-line.

* Menu:

* Accessing html manuals::
* Accessing info manuals::
* Accessing man manuals::
* Putting it all together::


File: lpdoc-3.0.0.info.tmp,  Node: Accessing html manuals,  Next: Accessing info manuals,  Prev: Accessing on-line manuals,  Up: Accessing on-line manuals

2.7.1 Accessing html manuals
----------------------------

Once generated, the `.html' files can be viewed using any standard `WWW'
browser, e.g., `Firefox' (a command `lpdoc htmlview' is available
which, if there is an instance of a web browser running in the
machine, will make that instance visit the manual in `html' format).
To make these files publicly readable on the WWW, they should be
copied into a directory visible by browsers running in other
machines, such as `/home/clip/public_html/lpdoc_docs',
`/usr/home/httpd/htmldocs/lpdoc_docs', etc. As mentioned before, this
is easily done by setting the `docdir' variable in the `SETTINGS.pl'
file to this directory and typing `lpdoc install'.


File: lpdoc-3.0.0.info.tmp,  Node: Accessing info manuals,  Next: Accessing man manuals,  Prev: Accessing html manuals,  Up: Accessing on-line manuals

2.7.2 Accessing info manuals
----------------------------

Generated `.info' files are meant to be viewed by the `Emacs' editor
or by the standalone `info' application, both publicly available from
the GNU project sites. To view the a generated `info' file from `Emacs'
manually (i.e., before it is installed in a common area), type `C-u
M-x info'. This will prompt for an info file name.  Input the name of
the info file generated by `lpdoc' (`main'`.info') and `Emacs' will
open the manual in info mode.

   There are several possibilities in order to install an `.info'
file so that it is publicly available, i.e., so that it appears
automatically with all other `info' manuals when starting `info' or
typing `C-u M-x info' in Emacs:

   * *Installation in the common info directory:*

        * Move the `.info' file to the common info directory
          (typically `/usr/info', `/usr/local/info', ..). This can be
          done automatically by setting the `docdir' variable in the `SETTINGS.pl'
          file to this directory and typing `lpdoc install'.

          *Warning:* if you are installing in an `info' directory
          that is not maintained automatically by `lpdoc', make sure
          that you have not selected the `infoindex' option in
          `docformats', since this will overwrite the existing `dir'
          file).

        * Add an entry to the `info' index in that directory
          (normally a file in that directory called `dir'). The
          manual should appear as part of the normal set of manuals
          available when typing `M-x info' in `Emacs' or `info' in a
          shell. See the `Emacs' manual for details.


   * *Installation in a different info directory:* you may want to
     place one or more manuals generated by `lpdoc' in their own
     directory. This has the advantage that `lpdoc' will maintain
     automatically an index for all the `lpdoc' generated manuals
     installed in that directory. In order for such manuals to appear
     when typing `M-x info' in `Emacs' or `info' in a shell there are
     two requirements:

        * This directory must contain a `dir' index. The first part
          of the process can all be done automatically by setting the
          `docdir' variable in the `SETTINGS.pl' file to this
          directory, including the `infoindex' option in
          `docformats', and typing `lpdoc install'. This will install
          the info manual in directory `docdir' and update the `dir'
          file there. `lpdoc uninstall' does the opposite,
          eliminating also the manual from the index.

        * The directory must be added to the _info path list_. The
          easiest way to do this is to set the `INFOPATH' environment
          variable. For example, assuming that we are installing the `info'
          manual in `/home/clip/public_html/lpdoc_docs' and that
          `/usr/info' is the common `info' directory, for `csh' in
          `.cshrc':

          `setenv INFOPATH
          /usr/info:/home/clip/public_html/lpdoc_docs'

          Adding the directory to the info path list can also be done
          within Emacs, by including the following line in the
          `.Emacs' file:

               (defun add-info-path (newpath)
                 (setq Info-default-directory-list
               	(cons (expand-file-name newpath) Info-default-directory-list)))
               (add-info-path "/home/clip/public_html/lpdoc_docs")
               (add-info-path "/usr/info/")

          However, this has the disadvantage that it will not be seen
          by the standalone `info' command.


   Automatic, direct on-line access to the information contained in
the info file (e.g., going automatically to predicate descriptions by
clicking on predicate names in programs in an `Emacs' buffer) can be
easily implemented via existing `.el' packages such as `word-help',
written by Jens T. Berger Thielemann (<jensthi@ifi.uio.no>).  `word-help'
may already be in your `Emacs' distribution, but for convenience the
file `word-help.el' and a `word-help-setup.el' file, providing
suitable initialization are included in the `lpdoc' library. A
suitable interface for `word-help' is also provided by the `ciao.el' `Emacs'
file that comes with the `Ciao' system distribution (i.e., if
`ciao.el' is loaded it is not necessary to load or initialize
`word-help').


File: lpdoc-3.0.0.info.tmp,  Node: Accessing man manuals,  Next: Putting it all together,  Prev: Accessing info manuals,  Up: Accessing on-line manuals

2.7.3 Accessing man manuals
---------------------------

The `Unix' `man' format manuals generated by `lpdoc' can be viewed
using the `Unix' `man' command. In order for `man' to be able to
locate the manuals, they should be copied to one of the
subdirectories (e.g., `/usr/local/man/manl') of one of the main man
directories (in the previous case the main directory would be
`/usr/local/man'). As usual, any directory can be used as as a man
main directory, provided it is included in the environment variable
`MANPATH'. Again, this process can be performed automatically by
setting the `docdir' variable in the `SETTINGS.pl' file to this
directory and typing `lpdoc install'.


File: lpdoc-3.0.0.info.tmp,  Node: Putting it all together,  Prev: Accessing man manuals,  Up: Accessing on-line manuals

2.7.4 Putting it all together
-----------------------------

A simple, powerful, and very convenient way to use the facilities
provided by `lpdoc' for automatic installation of manuals in
different formats is to install all manuals in all formats in the
same directory `docdir', and to choose a directory which is also
accessible via `WWW'. After setting `docdir' to this directory in the `SETTINGS.pl'
file, and selecting `infoindex' and `htmlindex' for the `docformats'
variable, `lpdoc install'/`lpdoc uninstall' will install/uninstall
all manuals in all the selected formats in this directory and create
and maintain the corresponding `html' and `info' indices. Then,
setting the environment variables as follows (e.g., for `csh' in
`.cshrc'):

     setenv DOCDIR   /home/clip/public_html/lpdoc_docs
     setenv INFOPATH /usr/local/info:${DOCDIR}
     setenv MANPATH  ${DOCDIR}:${MANPATH}

   Example files for inclusion in user's or common shell
initialization files are included in the `lpdoc' library.

   More complex setups can be accommodated, as, for example,
installing different types of manuals in different directories.
However, this currently requires changing the `docformats' and
`docdir' variables and performing `lpdoc install' for each
installation format/directory.


File: lpdoc-3.0.0.info.tmp,  Node: Some usage tips,  Next: Troubleshooting,  Prev: Accessing on-line manuals,  Up: Generating Installing and Accessing Manuals

2.8 Some usage tips
===================

This section contains additional suggestions on the use of `lpdoc'.

* Menu:

* Ensuring Compatibility with All Supported Target Formats::
* Writing comments which document version/patch changes::
* Documenting Libraries and/or Applications::
* Documenting files which are not modules::
* Splitting large documents into parts::
* Documenting reexported predicates::
* Separating the documentation from the source file::
* Generating auxiliary files (e.g. READMEs)::


File: lpdoc-3.0.0.info.tmp,  Node: Ensuring Compatibility with All Supported Target Formats,  Next: Writing comments which document version/patch changes,  Prev: Some usage tips,  Up: Some usage tips

2.8.1 Ensuring Compatibility with All Supported Target Formats
--------------------------------------------------------------

One of the nice things about `lpdoc' is that it allows generating
manuals in several formats which are quite different in nature.
Because these formats each have widely different requirements it is
sometimes a little tricky to get things to work successfully for all
formats. The following recommendations are intended to help in
achieving useful manuals in all formats:

   * The best results are obtained when documenting code organized as
     a series of libraries, and with a well-designed module structure.

   * `texinfo' supports only a limited number of indices. Thus, if
     you select too many indices in the `SETTINGS.pl' file you may
     exceed `texinfo''s capacity (which it will signal by saying
     something like "No room for a new @write").

   * The GNU info format requires all _nodes_ (chapters, sections,
     etc.) to have different names. This is ensured by `lpdoc' for
     the automatically generated sections (by appending the module or
     file name to all section headings). However, care must be taken
     when writing section names manually to make them different. For
     example, use "lpdoc usage" instead of simply "Usage", which is
     much more likely to be used as a section name in another file
     being documented.

   * Also due to a limitation of the `info' format, do not use `:' or
     `,' or `-'`-' in section, chapter, etc. headings.

   * The character "`_'" in names may sometimes give problems in
     indices, since current versions of `texinfo' do not always
     handle it correctly.



File: lpdoc-3.0.0.info.tmp,  Node: Writing comments which document version/patch changes,  Next: Documenting Libraries and/or Applications,  Prev: Ensuring Compatibility with All Supported Target Formats,  Up: Some usage tips

2.8.2 Writing comments which document version/patch changes
-----------------------------------------------------------

When writing version comments (`:- doc(version(...), "...").'), it is
useful to keep in mind that the text can often be used to include in
the manual a list of improvements made to the software since the last
time that it was distributed. For this to work well, the textual
comments should describe the significance of the work done for the
user. For example, it is more useful to write "added support for
`pred' assertions" than "modifying file so `pred' case is also
handled".

   Sometimes one would like to write version comments which are
internal, i.e., not meant to appear in the manual. This can easily be
done with standard Prolog comments (which `lpdoc' will not read). An
alternative and quite useful solution is to put such internal
comments in _patch_ changes (e.g., 1.1#2 to 1.1#3), and put the more
general comments, which describe major changes to the user and should
appear in the manual, in _version_ changes (e.g., 1.1#2 to 1.2#0).
Selecting the appropriate options in `lpdoc' then allows including in
the manual the version changes but not the patch changes (which might
on the other hand be included in an _internals manual_).


File: lpdoc-3.0.0.info.tmp,  Node: Documenting Libraries and/or Applications,  Next: Documenting files which are not modules,  Prev: Writing comments which document version/patch changes,  Up: Some usage tips

2.8.3 Documenting Libraries and/or Applications
-----------------------------------------------

As mentioned before, for each a `.pl' file, `lpdoc' tries to
determine whether it is a library or the main file of an application,
and documents it accordingly. Any combination of libraries and/or
main files of applications can be used arbitrarily as components or
main files of a `lpdoc' manual. Some typical combinations are:

   * _Main file is a library, no components:_ A manual of a simple
     library, which appears externally as a single module. The manual
     describes the purpose of the library and its interface.

   * _Main file is an application, no components:_ A manual of a
     simple application.

   * _Main file is a library, components are also libraries:_ This
     can be used for example for generating an internals manual of a
     library. The main file describes the purpose and use of the
     library, while the components describe the internal modules of
     the library.

   * _Main file is an application, components are libraries:_ This
     can be used similarly for generating an internals manual of an
     application. The main file describes the purpose and use of the
     application, while the components describe the internal modules
     which compose the application.

   * _Main file is a (pseudo-)application, components are libraries:_
     A manual of a complex library made up of smaller libraries (for
     example, the `Prolog' library). The (pseudo-)application file
     contains the introductory material (title, version, etc.). Each
     chapter describes a particular library.

   * _Main file is a (pseudo-)application, components are
     applications:_ This can be used to generate a manual of a set of
     applications (e.g., a set of utilities). The
     (pseudo-)application file contains the introductory material
     (title, version, etc.). Each chapter describes a particular
     component application.



File: lpdoc-3.0.0.info.tmp,  Node: Documenting files which are not modules,  Next: Splitting large documents into parts,  Prev: Documenting Libraries and/or Applications,  Up: Some usage tips

2.8.4 Documenting files which are not modules
---------------------------------------------

Sometimes it is difficult for `lpdoc' to distinguish include files
and Ciao packages from normal _user_ files (i.e., normal code files
but which are not modules). The distinction is important because the
former are quite different in their form of use (they are loaded via `include/1'
or `use_package/1' declarations instead of `ensure_loaded/1') and
effect (since they are included, they 'export' operators,
declarations, etc.), and should typically be documented differently.
There is a special `doc/2' declaration (`:- doc(filetype,...).')
which provides a way of defining the intended use of the file. This
declaration is normally not needed in modules, include files, or
packages, but should be added in user files (i.e., those meant to be
loaded using `ensure_loaded/1'). Adding this declaration will, for
example, avoid spurious documentation of the declarations in the `assertions'
package themselves when this package is included in a user file.


File: lpdoc-3.0.0.info.tmp,  Node: Splitting large documents into parts,  Next: Documenting reexported predicates,  Prev: Documenting files which are not modules,  Up: Some usage tips

2.8.5 Splitting large documents into parts
------------------------------------------

As mentioned before, in `lpdoc' each documented file (each component)
corresponds to a chapter in the generated manual. In large documents,
it is sometimes convenient to build a super-structure of parts, each
of which groups several chapters. There is a special value of the
second argument of the `:- doc(filetype,...).' declaration mentioned
above designed for this purpose. The special _filetype_ value `part'
can be used to flag that the file in which it appears should be
documented as the start of one of the major _parts in a large
document_. In order to introduce such a part, a `.pl' file with a
declaration `:- doc(filetype,part).' should be inserted in the
sequence of files that make up the `components' variable of the `SETTINGS.pl'
file at each point in which a major part starts. The `:-
doc(title,"...").' declaration of this file will be used as the part
title, and the `:- doc(module,"...").' declaration text will be used
as the introduction to the part.


File: lpdoc-3.0.0.info.tmp,  Node: Documenting reexported predicates,  Next: Separating the documentation from the source file,  Prev: Splitting large documents into parts,  Up: Some usage tips

2.8.6 Documenting reexported predicates
---------------------------------------

Reexported predicates, i.e., predicates which are exported by a
module `m1' but defined in another module `m2' which is used by `m1',
are normally not documented in the original module, but instead a
simple reference is included to the module in which it is defined.
This can be changed, so that the documentation is included in the
original module, by using a `doc/2' declaration with `doinclude' in
the first argument (see the `comments' library). This is often useful
when documenting a library made of several components. For a simple
user's manual, it is often sufficient to include in the `lpdoc' `SETTINGS.pl'
file the principal module, which is the one which users will do a `use_module/1'
of, in the manual. This module typically exports or reexports all the
predicates which define the library's user interface. Note, however,
that currently, due to limitations in the implementation, only the
comments inside assertions (but not those in `doc/2' declarations)
are included for reexported predicates.


File: lpdoc-3.0.0.info.tmp,  Node: Separating the documentation from the source file,  Next: Generating auxiliary files (e.g. READMEs),  Prev: Documenting reexported predicates,  Up: Some usage tips

2.8.7 Separating the documentation from the source file
-------------------------------------------------------

Sometimes one would not like to include long introductory comments in
the module itself but would rather have them in a different file.
This can be done quite simply by using the @include command. For
example, the following declaration:

     :- doc(module,"@include{Intro.lpdoc}").

will include the contents of the file `Intro.lpdoc' as the module
description.

   Alternatively, sometimes one may want to generate the
documentation from a completely different file. Assuming that the
original module is `m1.pl', this can be done by calling the module
containing the documentation `m1_doc.pl'. This `m1_doc.pl' file is
the one that will be included in the `lpdoc' `SETTINGS.pl' file,
instead of `m1.pl'.  `lpdoc' recognizes and treats such `_doc' files
specially so that the name without the `_doc' part is used in the
different parts of the documentation, in the same way as if the
documentation were placed in file `m1'.


File: lpdoc-3.0.0.info.tmp,  Node: Generating auxiliary files (e.g. READMEs),  Prev: Separating the documentation from the source file,  Up: Some usage tips

2.8.8 Generating auxiliary files (e.g. READMEs)
-----------------------------------------------

*Note_ significant parts of this are obsolete. They must be updated
to describe lpdoc version 2.0.*

   Using `lpdoc' it is often possible to use a common source for
documentation text which should appear in several places. For
example, assume a file `INSTALLATION.lpdoc' contains text (with
`lpdoc' formatting commands) describing an application. This text can
be included in a section of the main file documentation as follows:

     :- doc(module,"
        ...
        @section{Installation instructions}
        @include{INSTALLATION.lpdoc}
        ...
        ").

At the same time, this text can be used to generate a nicely
formatted `INSTALLATION' file in ascii, which can perhaps be included
in the top level of the source directory of the application. To this
end, an `INSTALL.pl' file as follows can be constructed:

     :- use_package([assertions]).
     :- doc(filetype, application). %% forces file to be documented as an application
     :- doc(title,"Installation instructions").
     :- doc(module,"@include{INSTALLATION.lpdoc}").

   Then, the ascii `INSTALLATION' file can be generated by simply
running `lpdoc ascii' in a directory with a `SETTINGS.pl' file where
`MAIN' is set to `INSTALLATION.pl'.


File: lpdoc-3.0.0.info.tmp,  Node: Troubleshooting,  Prev: Some usage tips,  Up: Generating Installing and Accessing Manuals

2.9 Troubleshooting
===================

These are some common errors which may be found using `lpdoc' and the
usual fix:

   * Sometimes, messages of the type:
            gmake: *** No rule to make target `myfile.texic', needed by
            `main.texic'.  Stop.
     appear (i.e., in the case above when running (`g')`make'
     `main.'_target_). Since `lpdoc' definitely knows how to make a
     `.texic' file given a `.pl' file, this means (in make's
     language) that it _cannot find the corresponding_ `.pl' _file_
     (`myfile.pl' in the case above). The usual reason for this is
     that there is no directory path to this file declared in the
     `SETTINGS.pl' file.

   * Messages of the type:
           ! No room for a new @write .
     while converting from `.texi' to `.dvi' (i.e., while running `tex').
     These messages are `tex''s way of saying that an internal area
     (typically for an index) is full. This is normally because more
     indices were selected in the `INDICES' variable of the
     `SETTINGS.pl' file than the maximum number supported by the
     installed version of `tex'/ `texinfo' installations, as
     mentioned in *note Generating a manual::. The easiest fix is to
     reduce the number of indices generated. Alternatively, it may be
     possible to recompile your local `tex'/ `texinfo' installation
     with a higher number of indices.

   * Missing links in `info' files (a section which exists in the
     printed document cannot be accessed in the on-line document) can
     be due to the presence of a colon (`:'), a comma (`,'), a double
     dash (`--'), or other such separators in a section name. Due to
     limitations of `info' section names cannot contain these symbols.

   * Menu listings in `info' which _do not work_ (i.e., the menu
     listings are there, but they cannot be followed): see if they
     are indented. In that case it is due to an `itemize' or
     `enumerate' which was not closed.



File: lpdoc-3.0.0.info.tmp,  Node: Documentation Mark-up Language and Declarations,  Next: The Ciao assertion package,  Prev: Generating Installing and Accessing Manuals,  Up: Top

3 Documentation Mark-up Language and Declarations
*************************************************

*Author(s):* Manuel Hermenegildo.

   This defines the admissible uses of the `doc/2' declaration (which
is used mainly for adding machine readable comments to programs), the formatting
commands which can be used in the text strings inside these comments,
and some related properties and data types. These declarations are
ignored by the compiler in the same way as classical comments. Thus,
they can be used to document the program source in place of (or in
combination with) the normal comments typically inserted in the code
by programmers. However, because they are more structured and they
are machine-readable, they can also be used to generate printed or
on-line documentation automatically, using the `lpdoc' automatic
documentation generator. These _textual comments_ are meant to be
complementary to the formal statements present in _assertions_ (see
the `assertions' library).

* Menu:

* Usage and interface (comments)::
* Documentation on exports (comments)::
* Documentation on internals (comments)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (comments),  Next: Documentation on exports (comments),  Prev: Documentation Mark-up Language and Declarations,  Up: Documentation Mark-up Language and Declarations

3.1 Usage and interface (`comments')
====================================

   * *Library usage:*

     It is not necessary to use this library in user programs. The
     recommended procedure in order to make use of the `doc/2'
     declarations that this library defines is to include instead the `assertions'
     package, which provides efficient support for all assertion- and
     comment-related declarations, using one of the following
     declarations, as appropriate:

             :- module(...,...,[assertions]).
             :- use_package(assertions).

   * *Exports:*

        - _Predicates:_

          `doc_id_type/3'.

        - _Properties:_

          `docstring/1', `stringcommand/1'.

        - _Regular Types:_

          `version_descriptor/1', `filetype/1'.

   * *Other modules used:*

        - _System library modules:_

          `strings'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (comments),  Next: Documentation on internals (comments),  Prev: Usage and interface (comments),  Up: Documentation Mark-up Language and Declarations

3.2 Documentation on exports (`comments')
=========================================

 -- PROPERTY: docstring/1:
     Defines the format of the character strings which can be used in
     machine readable comments ( `doc/2' declarations) and
     assertions. These character strings can include certain _formatting
     commands_.

        * All printable characters are admissible in documentation
          strings except "`@'", "`{'," and "`}'". To produce these
          characters the following _escape sequences_ should be used,
          respectively: `@@', `@{', and `@}'.

        * In order to allow better formatting of on-line and printed
          manuals, in addition to normal text, certain formatting
          commands can be used within these strings. The syntax of
          all these commands is:

          `@'_command_

          (followed by either a space or `{}'), or

          `@'_command_`{'_body_`}'

          where _command_ is the command name and _body_ is the
          (possibly empty) command body.

          The set of commands currently admitted can be found in the
          documentation for the predicate `stringcommand/1'.


     *Usage:* `docstring(Text)'
        - _Description:_ `Text' is a _documentation string_.


 -- PROPERTY: stringcommand/1:
     Defines the set of structures which can result from parsing a
     formatting command admissible in comment strings inside
     assertions.

     In order to make it possible to produce documentation in a wide
     variety of formats, the command set is kept small. The names of
     the commands are intended to be reminiscent of the commands used
     in the LaTeX text formatting system, except that "`@'" is used
     instead of "`\'." Note that `\' would need to be escaped in
     ISO-Prolog strings, which would make the source less readable
     (and, in any case, many ideas in LaTeX were taken from scribe,
     where the escape character was indeed `@'!).

     The following are the currently admissible commands.

        * *Formatting commands:*

          The following commands are used to format certain words or
          sentences in a special font, build itemized lists,
          introduce sections, include examples, etc.

         `@comment{'_text_`}'
               _text_ will be treated as a _comment_ and will be
               ignored.

         `@begin{itemize}'
               marks the beginning of an _itemized list_. Each item
               should be in a separate paragraph and preceded by an
               `@item' command.

         `@item'
               marks the beginning of a new _item in an itemized
               list_.

         `@end{itemize}'
               marks the end of an itemized list.

         `@begin{enumerate}'
               marks the beginning of an _enumerated list_. Each item
               should be in a separate paragraph and preceded by an
               `@item' command.

         `@end{enumerate}'
               marks the end of an enumerated list.

         `@begin{description}'
               marks the beginning of a _description list_, i.e., a
               list of items and their description (this list
               describing the different allowable commads is in fact
               a description list). Each item should be in a separate
               paragraph and contained in an `@item{'_itemtext_`}'
               command.

         `@item{'_itemtext_`}'
               marks the beginning of a _new item in description
               list_, and contains the header for the item.

         `@end{description}'
               marks the end of a description list.

         `@begin{verbatim}'
               marks the beginning of _fixed format text_, such as a
               program example. A fixed-width, typewriter-like font
               is used.

         `@end{verbatim}'
               marks the end of formatted text.

         `@begin{cartouche}'
               marks the beginning of a section of text in a _framed
               box_, with round corners.

         `@end{cartouche}'
               marks the end of a section of text in a framed box.

         `@begin{alert}'
               marks the beginning of a section of text in a _framed
               box_, for alert messages.

         `@end{alert}'
               marks the end of the alert message.

         `@section{'_text_`}'
               starts a _section_ whose title is _text_. Due to a
               limitation of the `info' format, do not use `:' or `-'
               or `,' in section, subsection, title (chapter), etc.
               headings.

         `@subsection{'_text_`}'
               starts a _subsection_ whose title is _text_.

         `@footnote{'_text_`}'
               places _text_ in a _footnote_.

         `@hfill'
               introduces horizontal filling space (may be ignored in
               certain formats).

         `@bf{'_text_`}'
               _text_ will be formatted in _bold face_ or any other _strong
               face_.

         `@em{'_text_`}'
               _text_ will be formatted in _italics face_ or any other _emphasis
               face_.

         `@tt{'_text_`}'
               _text_ will be formatted in a _fixed-width font_ (i.e., _typewriter-like
               font_).

         `@key{'_key_`}'
               _key_ is the identifier of a _keyboard key_ (i.e., a
               letter such as `a', or a special key identifier such
               as `RET' or `DEL') and will be formatted as <LFD> or
               in a fixed-width, typewriter-like font.

         `@sp{'_N_`}'
               generates _N_ _blank lines_ of space.  Forces also a
               paragraph break.

         `@p'
               forces a _paragraph break_, in the same way as leaving
               one or more blank lines.

         `@noindent'
               used at the beginning of a paragraph, states that the
               first line of the paragraph should not be indented.  Useful,
               for example, for _avoiding indentation_ on paragraphs
               that are continuations of other paragraphs, such as
               after a verbatim.


        * *Indexing commands:*

          The following commands are used to mark certain words or
          sentences in the text as concepts, names of predicates,
          libraries, files, etc. The use of these commands is highly
          recommended, since it results in very useful indices with
          little effort.

         `@index{'_text_`}'
               _text_ will be printed in an emphasized font and will
               be included in the concept definition index (and also
               in the usage index). This command should be used for
               the first or _definitional_ appearance(s) of a
               concept. The idea is that the concept definition index
               can be used to find the definition(s) of a concept.

         `@cindex{'_text_`}'
               _text_ will be included in the concept index (and also
               in the usage index), but it is not printed. This is
               used in the same way as above, but allows sending to
               the index a different text than the one that is
               printed in the text.

         `@concept{'_text_`}'
               _text_ will be printed (in a normal font). This
               command is used to mark that some text is a defined
               concept. In on-line manuals, a direct access to the
               corresponding concept definition may also be
               generated. A pointer to the place in which the
               @concept command occurs will appear only in the usage
               index.

         `@pred{'_predname_`}'
               _predname_ (which should be in functor/arity form) is
               the name of a predicate and will be printed in
               fixed-width, typewriter-like font. This command should
               be used when referring to a predicate (or a property
               or type) in a documentation string. A reference will
               be included in the usage index. In on-line manuals, a
               direct access to the corresponding predicate
               definition may also be generated.

         `@op{'_operatorname_`}'
               _operatorname_ (which should be in functor/arity form)
               is the name of an operator and will be printed in
               fixed-width, typewriter-like font. This command should
               be used when referring to an operator in a
               documentation string. A reference will be included in
               the usage index. In on-line manuals, a direct access
               to the corresponding operator definition may also be
               generated.

         `@decl{'_declname_`}'
               _declname_ (which should be in functor/arity form) is
               the name of a declaration and will be printed in
               fixed-width, typewriter-like font. This command should
               be used when referring to a declaration in a
               documentation string. A reference will be included in
               the usage index. In on-line manuals, a direct access
               to the corresponding declaration definition may also
               be generated.

         `@lib{'_libname_`}'
               _libname_ is the name of a library and will be printed
               in fixed-width, typewriter-like font. This command
               should be used when referring to a module or library
               in a documentation string. A reference will be
               included in the usage index. In on-line manuals, a
               direct access to the corresponding module definition
               may also be generated.

         `@apl{'_aplname_`}'
               _aplname_ is the name of an application and will be
               printed in fixed-width, typewriter-like font. This
               command should be used when referring to an
               application in a documentation string. A reference
               will be included in the usage index.

         `@file{'_filename_`}'
               _filename_ is the name of a file and will be printed
               in fixed-width, typewriter-like font. This command
               should be used when referring to a file in a
               documentation string. A reference will be included in
               the usage index.

         `@var{'_varname_`}'
               _varname_ is the name of a variable and will be
               formatted in an emphasized font. Note that when
               referring to variable names in a `pred/1' declaration,
               such names should be enclosed in `@var' commands for
               the automatic documentation system to work correctly.


        * *Referencing commands:*

          The following commands are used to introduce _bibliographic
          citations_ and _references_ to _sections_, _urls_, _email
          addresses_, etc.

         `@cite{_keyword_}'
               _keyword_ is the identifier of a _bibliographic
               entry_. Such entry is assumed to reside in on of a
               number of `bibtex' files ( _.bib files_) . A reference
               in brackets (*[ ]*) is inserted in the text an the
               full reference is included at the end, with all other
               references, in an appendix. For example,
               `@cite{iso-prolog}' will introduce a citation to a
               bibliographic entry whose keyword is `iso-prolog'. The
               list of bibliography files which will be searched for
               a match is determined by the `BIBFILES' variable of the `lpdoc' `SETTINGS'
               file.

         `@ref{_section title_}'
               introduces at point a reference to the section or node
               _section title_, where _section title_ must be the
               exact _text_ of the section title.

         `@uref{_URL_}'
               introduces at point a reference to the _Universal
               Resource Locator_ (i.e., a _WWW address_ ' _URL_'.

         `@uref{'_text_`}{'_URL_`}'
               introduces at point a reference to the Universal
               Resource Locator URL, associated to the text _text_.

         `@email{'_address_`}'
               introduces at point a reference to _email address_
               _address_.

         `@email{'_text_`}{'_address_`}'
               introduces at point a reference to the email address address,
               associated to the text _text_.

         `@author{'_text_`}'
               _text_ will be printed (in a normal font). This
               command is used to reference the name of an author
               (not necessarily establishing the module authorship).


        * *Date and Version:*

         `@today'
               prints the current _date_.

         `@version'
               prints the _version_ of the current manual.


        * *Mathematics:*

          The following commands are used to format text in
          mathematical .

         `@math{'_text_`}'
               in-line typeset the _text_ formula.

         `@begin{displaymath}'
               marks the beginning of a formula (useful for long
               formulas).

         `@end{displaymath}'
               marks the end of the (long) formula.

         `@defmathcmd{'_cmd_`}{'_n_`}{'_def_`}'
               defines the math command _cmd_, taking _n_ arguments,
               which is expanded as _def_. Arguments are denotated as
               `#1', ..., `#n' inside _def_.

         `@defmathcmd{'_cmd_`}{'_def_`}'
               defines the math command _cmd_, which is expanded as
               _def_ (with no arguments).


        * *Inclusion commands:*

          The following commands are used to include code or strings
          of text as part of documentation. The latter may reside in
          external files or in the file being documented. The former
          must be part of the module being documented. There are also
          commands for inserting and scaling images.

         `@include{'_filename_`}'
               the contents of _filename_ will be included in-line,
               as if they were part of the string. This is useful for
               common pieces of documentation or storing in a
               separate file long explanations if they are perceived
               to clutter the source file.

         `@includeverbatim{'_filename_`}'
               as above, but the contents of the file are included
               verbatim, i.e., commands within the file are not
               interpreted. This is useful for including code
               examples which may contain `@''s, etc. Note that this
               only means that the file will be included as is. If
               you want the string to be represented in verbatim mode
               in the output, you must surround the
               `@includeverbatim{'_filename_`}' with
               `@begin{verbatim}' and `@end{verbatim}'.

         `@includefact{'_factname_`}'
               it is assumed that the file being documented contains
               a fact of the predicate _factname_`/1', whose argument
               is a character string. The contents of that character
               string will be included in-line, as if they were part
               of the documentation string. This is useful for _sharing
               pieces of text_ between the documentation and the
               running code. An example is the text which explains the _usage
               of a command_ (options, etc.).

         `@includedef{'_predname_`}'
               it is assumed that the file being documented contains
               a definition for the predicate _predname_. The clauses
               defining this predicate will be included in-line, in
               verbatim mode, as if they were part of the
               documentation string.  

         `@image{'_epsfile_`}'
               _including an image_ at point, contained in file
               _epsfile_. The _image file_ should be in _encapsulated
               postscript_ format.


               `@image{'_epsfile_`}{'_width_`}{'_height_`}' same as
               above, but _width_ and _height_ should be integers
               which provide a size (in points) to which the image
               will be scaled.


        * *Accents and special characters:*

          The following commands can be used to insert _accents_ and _special
          characters_.

         `@`{o}'
               => o`

         `@'{o}'
               => o'

         `@^{o}'
               => o^

         `@..{o}'
               => o"

         `@"{o}'
               => o"

         `@~{o}'
               => o~

         `@={o}'
               => o=

         `@.{o}'
               => o.

         `@u{o}'
               => o(

         `@v{o}'
               => o<

         `@H{o}'
               => o''

         `@t{oo}'
               => oo[

         `@c{o}'
               => o,

         `@d{o}'
               => .o

         `@b{o}'
               => o_

         `@oe'
               => oe

         `@OE'
               => OE

         `@ae'
               => ae

         `@AE'
               => AE

         `@aa'
               => aa

         `@AA'
               => AA

         `@o'
               => /o

         `@O'
               => /O

         `@l'
               => /l

         `@L'
               => /L

         `@ss'
               => ss

         `@?'
               => ?

         `@!'
               => !

         `@i'
               => i

         `@j'
               => j

         `@copyright'
               => (C)

         `@iso'
               => < * ISO * >

         `@bullet'
               => *

         `@result'
               => =>


     *Usage:* `stringcommand(CO)'
        - _Description:_ `CO' is a structure denoting a command that
          is admissible in strings inside assertions.


 -- REGTYPE: version_descriptor/1:
     A structure denoting a complete version description:
          version_descriptor([]).
          version_descriptor(version(Version,Date)) :-
                  version_number(Version),
                  ymd_date(Date).
          version_descriptor(version(Version,Date,Time)) :-
                  version_number(Version),
                  ymd_date(Date),
                  time_struct(Time).

     *Usage:* `version_descriptor(Descriptor)'
        - _Description:_ `Descriptor' is a complete version
          descriptor.


 -- REGTYPE: filetype/1:
     Intended uses of a file:
          filetype(module).
          filetype(user).
          filetype(include).
          filetype(package).
          filetype(part).

     *Usage:* `filetype(Type)'
        - _Description:_ `Type' describes the intended use of a file.


 -- PREDICATE: doc_id_type/3:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Documentation on internals (comments),  Prev: Documentation on exports (comments),  Up: Documentation Mark-up Language and Declarations

3.3 Documentation on internals (`comments')
===========================================

 -- DECLARATION: doc/2:
     This declaration provides one of the main means for adding _machine
     readable comments_ to programs (the other one is adding _documentation
     strings_ to assertions).

     *Usage 1:* :- `doc(CommentType,TitleText)'.
        - _Description:_ Provides a _title_ for the module, library,
          or application. When generating documentation
          automatically, the text in `TitleText' will be used
          appropriately (e.g., in the cover page as document title or
          as chapter title if part of a larger document). This will
          also be used as a brief description of the manual in
          on-line indices. There should be at most one of these
          declarations per module.

        - _Example:_
               :- doc(title,"Documentation-Oriented Assertions").

        - _The following properties should hold upon exit:_

          `CommentType=title'  ( `= /2')

          `TitleText' is a _documentation string_.   ( `docstring/1')

     *Usage 2:* :- `doc(CommentType,SubtitleText)'.
        - _Description:_ Provides a _subtitle_, an explanatory or
          alternate _title_. The subtitle will be displayed under the
          proper title.

        - _Example:_
               :- doc(title,"Dr. Strangelove").
               :- doc(subtitle,"How I Learned to Stop Worrying and Love the Bomb").

        - _The following properties should hold upon exit:_

          `CommentType=subtitle'  ( `= /2')

          `SubtitleText' is a _documentation string_.   ( `docstring/1')

     *Usage 3:* :- `doc(CommentType,SubtitleText)'.
        - _Description:_ Provides additional _subtitle_ lines. This
          can be, e.g., an explanation of the application to add to
          the title, the address of the author(s) of the application,
          etc. When generating documentation automatically, the text
          in `SubtitleText' will be used accordingly. Several of
          these declarations can appear per module, which is useful
          for, e.g., multiple line addresses.

        - _Example:_
               :- doc(subtitle_extra,"A Reference Manual").
               :- doc(subtitle_extra,"Technical Report 1/1.0").

        - _The following properties should hold upon exit:_

          `CommentType=subtitle_extra'  ( `= /2')

          `SubtitleText' is a _documentation string_.   ( `docstring/1')

     *Usage 4:* :- `doc(CommentType,SubtitleText)'.
        - _Description:_ The name of the logo image for the manual.

        - _The following properties should hold upon exit:_

          `CommentType=logo'  ( `= /2')

          `SubtitleText' is any term.   ( `term/1')

     *Usage 5:* :- `doc(CommentType,AuthorText)'.
        - _Description:_ Provides the _author_(s) of the module or
          application. If present, when generating documentation for
          the module automatically, the text in `AuthorText' will be
          placed in the corresponding chapter or front page. There
          can be more than one of these declarations per module. In
          order for author indexing to work properly, please use one
          author declaration per author. If more explanation is
          needed (who did what when, etc.) use an acknowledgements
          comment.

        - _Example:_
               :- doc(author,"Alan Robinson").

        - _The following properties should hold upon exit:_

          `CommentType=author'  ( `= /2')

          `AuthorText' is a _documentation string_.   ( `docstring/1')

     *Usage 6:* :- `doc(CommentType,Text)'.
        - _Description:_ Provides the physical and electronic _address_,
          or any other contact information for the authors of the
          module or application.

        - _Example:_
               :- doc(address,"Syracuse University").

        - _The following properties should hold upon exit:_

          `CommentType=address'  ( `= /2')

          `Text' is a _documentation string_.   ( `docstring/1')

     *Usage 7:* :- `doc(CommentType,AckText)'.
        - _Description:_ Provides _acknowledgements_ for the module.
          If present, when generating documentation for the module
          automatically, the text in `AckText' will be placed in the
          corresponding chapter or section. There can be only one of
          these declarations per module.

        - _Example:_
               :- doc(ack,"Module was written by Alan, but others helped.").

        - _The following properties should hold upon exit:_

          `CommentType=ack'  ( `= /2')

          `AckText' is a _documentation string_.   ( `docstring/1')

     *Usage 8:* :- `doc(CommentType,CopyrightText)'.
        - _Description:_ Provides a _copyright_ text. This normally
          appears somewhere towards the beginning of a printed
          manual. There should be at most one of these declarations
          per module.

        - _Example:_
               :- doc(copyright,"Copyright (C) 2001 FSF.").

        - _The following properties should hold upon exit:_

          `CommentType=copyright'  ( `= /2')

          `CopyrightText' is a _documentation string_.   ( `docstring/1')

     *Usage 9:* :- `doc(CommentType,SummaryText)'.
        - _Description:_ Provides a brief global explanation of the
          application or library. The text in `SummaryText' will be
          used as the _abstract_ for the whole manual. There should
          be at most one of these declarations per module.

        - _Example:_
               :- doc(summary,"This is a @bf{very} important library.").

        - _The following properties should hold upon exit:_

          `CommentType=summary'  ( `= /2')

          `SummaryText' is a _documentation string_.   ( `docstring/1')

     *Usage 10:* :- `doc(CommentType,CommentText)'.
        - _Description:_ Provides the main comment text for the
          module or application. When generating documentation
          automatically, the text in `CommentText' will be used as the _introduction_
          or _main body_ of the corresponding chapter or manual.
          There should be at most one of these declarations per
          module. `CommentText' may use *sections* if substructure is
          needed.

        - _Example:_
               :- doc(module,"This module is the @lib{comments} library.").

        - _The following properties should hold upon exit:_

          `CommentType=module'  ( `= /2')

          `CommentText' is a _documentation string_.   ( `docstring/1')

     *Usage 11:* :- `doc(CommentType,CommentText)'.
        - _Description:_ Provides additional comments text for a
          module or application. When generating documentation
          automatically, the text in `CommentText' will be used in
          one of the last sections or appendices of the corresponding
          chapter or manual. There should be at most one of these
          declarations per module. `CommentText' may use
          *subsections* if substructure is needed.

        - _Example:_
               :- doc(appendix,"Other module functionality...").

        - _The following properties should hold upon exit:_

          `CommentType=appendix'  ( `= /2')

          `CommentText' is a _documentation string_.   ( `docstring/1')

     *Usage 12:* :- `doc(CommentType,CommentText)'.
        - _Description:_ Provides a description of how the library
          should be loaded. Normally, this information is gathered
          automatically when generating documentation automatically.
          This declaration is meant for use when the module needs to
          be treated in some special way. There should be at most one
          of these declarations per module.

        - _Example:_
               :- doc(usage,"Do not use: still in development!").

        - _The following properties should hold upon exit:_

          `CommentType=usage'  ( `= /2')

          `CommentText' is a _documentation string_.   ( `docstring/1')

     *Usage 13:* :- `doc(CommentType,Section)'.
        - _Description:_ Insert a _program section_ with name
          `Section'. Sectioning commands allow a structured
          separation of the program into parts. The division is only
          for documentation purposes, so visibility and scope of
          definitions is not affected by sectioning commands.

        - _Example:_
               :- doc(section,"Main Steps of the Algorithm").

        - _The following properties should hold upon exit:_

          `CommentType=section'  ( `= /2')

          `Section' is a _documentation string_.   ( `docstring/1')

     *Usage 14:* :- `doc(CommentType,SubSection)'.
        - _Description:_ Insert a _program subsection_ with name
          `SubSection' (see _program section_ command for more
          details).

        - _Example:_
               :- doc(subsection,"Auxiliary Definitions").

        - _The following properties should hold upon exit:_

          `CommentType=subsection'  ( `= /2')

          `SubSection' is a _documentation string_.   ( `docstring/1')

     *Usage 15:* :- `doc(PredName,CommentText)'.
        - _Description:_ Provides an introductory comment for a given
          predicate, function, property, type, etc., denoted by
          `PredName'. When generating documentation for the module
          automatically, the text in `Text' will be used as the
          introduction of the corresponding predicate/function/...
          description. There should be at most one of these
          declarations per predicate, function, property, or type.

        - _Example:_
               :- doc(doc/2,"This declaration provides one of the main
                  means for adding @concept{machine readable comments} to
                  programs.").

        - _The following properties should hold upon exit:_

          `PredName' is a Name/Arity structure denoting a predicate
          name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          ( `predname/1')

          `CommentText' is a _documentation string_.   ( `docstring/1')

     *Usage 16:* :- `doc(CommentType,CommentText)'.
        - _Description:_ Documents a known _bug_ or _planned
          improvement_ in the module or application. Several of these
          declarations can appear per module. When generating
          documentation automatically, the text in the `Text' fields
          will be used as items in an itemized list of module or
          application bugs.

        - _Example:_
               :- doc(bug,"Comment text still has to be written by user.").

        - _The following properties should hold upon exit:_

          `CommentType=bug'  ( `= /2')

          `CommentText' is a _documentation string_.   ( `docstring/1')

     *Usage 17:* :- `doc(Version,CommentText)'.
        - _Description:_ Provides a means for keeping a _log of
          changes_. `Version' contains the _version number_ and date
          corresponding to the change and `CommentText' an
          explanation of the change. Several of these declarations
          can appear per module. When generating documentation
          automatically, the texts in the different `CommentText'
          fields typically appear as items in an itemized list of
          changes. The emacs Ciao mode helps tracking version numbers
          by prompting for version comments when files are saved.
          This mode requires version comments to appear in reverse
          chronological order (i.e., the topmost comment should be
          the most recent one).

        - _Example:_
               :- doc(version(1*1+21,1998/04/18,15:05*01+'EST'), "Added some
                  missing comments.  (Manuel Hermenegildo)").

        - _The following properties should hold upon exit:_

          `Version' is a complete version descriptor.   ( `version_descriptor/1')

          `CommentText' is a _documentation string_.   ( `docstring/1')

     *Usage 18:* :- `doc(CommentType,VersionMaintenanceType)'.
        - _Description:_ Defines the type of version maintenance that
          should be performed by the `emacs' Ciao mode.

        - _Example:_
               :- doc(version_maintenance,dir('../version')).

          Version control info is kept in directory `../version'. See
          the definition of `version_maintenance_type/1' for more
          information on the different version maintenance modes. See
          the documentation on the _emacs Ciao mode_ in the Ciao
          manual for information on how to automatically insert
          version control `doc/2' declarations in files.

          The version maintenance mode can also be set alternatively
          by inserting a comment such as:

               %% Local Variables:
               %% mode: CIAO
               %% update-version-comments: "off"
               %% End:

          The lines above instruct emacs to put the buffer visiting
          the file in emacs Ciao mode and to turn version maintenance
          off. Setting the version maintenance mode in this way has
          the disadvantage that `lpdoc' will not be aware of the type
          of version maintenance being performed (the lines above are
          comments for Prolog). However, this can be useful in fact
          for setting the _version maintenance mode for packages_ and
          other files meant for inclusion in other files, since that
          way the settings will not affect the file in which the
          package is included.

        - _The following properties should hold upon exit:_

          `CommentType=version_maintenance'  ( `= /2')

          `VersionMaintenanceType' a type of version maintenance for
          a file.   ( `version_maintenance_type/1')

     *Usage 19:* :- `doc(CommentType,PredName)'.
        - _Description:_ This is a special case that is used to
          control which predicates are included in the documentation.
          Normally, only exported predicates are documented. A
          declaration `:- doc(doinclude,'`PredName'`).' forces
          documentation for predicate (or type, property, function,
          ...) `PredName' to be included even if `PredName' is not
          exported. Also, if `PredName' is reexported from another
          module, a declaration `:- doc(doinclude,'`PredName'`).'
          will force the documenation for `PredName' to appear
          directly in this module.

        - _Example:_
               :- doc(doinclude,p/3).

        - _The following properties should hold upon exit:_

          `CommentType=doinclude'  ( `= /2')

          `PredName' is a Name/Arity structure denoting a predicate
          name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          ( `predname/1')

     *Usage 20:* :- `doc(CommentType,PredName)'.
        - _Description:_ A different usage which allows the second
          argument of `:- doc(doinclude,...)' to be a list of
          predicate names.

        - _The following properties should hold upon exit:_

          `CommentType=doinclude'  ( `= /2')

          `PredName' is a list of `predname's.   ( `list/2')

     *Usage 21:* :- `doc(CommentType,PredName)'.
        - _Description:_ This is similar to the previous usage but
          has the opposite effect: it signals that an exported
          predicate should _not_ be included in the documentation.

        - _Example:_
               :- doc(hide,p/3).

        - _The following properties should hold upon exit:_

          `CommentType=hide'  ( `= /2')

          `PredName' is a Name/Arity structure denoting a predicate
          name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          ( `predname/1')

     *Usage 22:* :- `doc(CommentType,PredName)'.
        - _Description:_ A different usage which allows the second
          argument of `:- doc(hide,...)' to be a list of predicate
          names.

        - _The following properties should hold upon exit:_

          `CommentType=hide'  ( `= /2')

          `PredName' is a list of `predname's.   ( `list/2')

     *Usage 23:* :- `doc(CommentType,FileType)'.
        - _Description:_ Provides a way of defining the intended use
          of the file. This use is normally easily inferred from the
          contents of the file itself, and therefore such a
          declaration is in general not needed. The exception is the
          special case of include files and Ciao packages, which are
          typically indistiguishable from normal _user_ files (i.e.,
          files which are not modules), but are however quite
          different in their form of use (they are loaded via `include/1'
          or `use_package/1' declarations instead of `ensure_loaded/1')
          and effect (since they are included, they 'export'
          operators, declarations, etc.). Typically, it is assumed by
          default that files which are not modules will be used as
          include files or packages. Thus, a `doc/2' declaration of
          this kind strictly only needs to be added to user-type
          files.

          _Example:_
               :- doc(filetype,user).

          There is another special case: the value `part'. This
          _filetype_ is used to flag files which serve as
          introductions to boundaries between major _parts in large
          documents_. See *note Splitting large documents into
          parts:: for details.

        - _The following properties should hold upon exit:_

          `CommentType=filetype'  ( `= /2')

          `FileType' describes the intended use of a file.   ( `filetype/1')

     *Usage 24:* :- `doc(CommentType,FileName)'.
        - _Description:_ Do not document anything that comes from a
          file whose name (after taking away the path and the suffix)
          is `FileName'. This is used for example when documenting
          packages to avoid the documenter from including
          documentation of certain other packages which the package
          being documented uses.

        - _Example:_
               :- doc(nodoc,assertions).

        - _The following properties should hold upon exit:_

          `CommentType=nodoc'  ( `= /2')

          `FileName' is an atom.   ( `atm/1')


 -- REGTYPE: version_number/1:
     `Version' is a structure denoting a complete version number
     (major version, minor version, and patch number):

          version_number(Major*Minor+Patch) :-
                  int(Major),
                  int(Minor),
                  int(Patch).

     *Usage:* `version_number(Version)'
        - _Description:_ `Version' is a complete version number


 -- REGTYPE: ymd_date/1:
     A Year/Month/Day structure denoting a date:
          ymd_date(Y/M/D) :-
                  int(Y),
                  int(M),
                  int(D).
     .

     *Usage:* `ymd_date(Date)'
        - _Description:_ `Date' is a Year/Month/Day structure
          denoting a date.


 -- REGTYPE: time_struct/1:
     A struture containing time information:
          time_struct(Hours:Minutes*Seconds+TimeZone) :-
                  int(Hours),
                  int(Minutes),
                  int(Seconds),
                  atm(TimeZone).

     *Usage:* `time_struct(Time)'
        - _Description:_ `Time' contains time information.


 -- REGTYPE: version_maintenance_type/1:
     Possible kinds of version maintenance for a file:

          version_maintenance_type(on).
          version_maintenance_type(off).
          version_maintenance_type(dir(Path)) :-
                  atm(Path).

        * `on': version numbering is maintained locally in the file
          in which the declaration occurs, i.e., an independent
          version number is kept for this file and the current
          version is given by the most recent `doc(version(...),...)'
          declaration.

        * `off': no version numbering maintained.

        * `dir(Path)': version numbering is maintained (globally) in
          directory `Path'. This is useful for maintaining a common
          global version for an application which involves several
          files.


     The automatic maintenance of version numbers is typically done
     by the Ciao `emacs' mode.

     *Usage:* `version_maintenance_type(Type)'
        - _Description:_ `Type' a type of version maintenance for a
          file.



File: lpdoc-3.0.0.info.tmp,  Node: The Ciao assertion package,  Next: Types and properties related to assertions,  Prev: Documentation Mark-up Language and Declarations,  Up: Top

4 The Ciao assertion package
****************************

*Author(s):* Manuel Hermenegildo, Francisco Bueno, German Puebla.

   The `assertions' package adds a number of new declaration
definitions and new operator definitions which allow including program
assertions in user programs. Such assertions can be used to describe
predicates, properties, modules, applications, etc. These
descriptions can contain formal specifications (such as sets of
preconditions, post-conditions, or descriptions of computations) as
well as machine-readable textual comments.

   This module is part of the `assertions' library. It defines the
basic code-related assertions, i.e., those intended to be used mainly
by compilation-related tools, such as the static analyzer or the
run-time test generator.

   Giving specifications for predicates and other program elements is
the main functionality documented here. The exact syntax of comments is
described in the autodocumenter ( `lpdoc' [Knu84,Her99]) manual,
although some support for adding machine-readable comments in
assertions is also mentioned here.

   There are two kinds of assertions: predicate assertions and
program point assertions. All predicate assertions are currently
placed as directives in the source code, i.e., preceded by "`:-'".
Program point assertions are placed as goals in clause bodies.

* Menu:

* More info::
* Some attention points::
* Usage and interface (assertions_doc)::
* Documentation on new declarations (assertions_doc)::
* Documentation on exports (assertions_doc)::


File: lpdoc-3.0.0.info.tmp,  Node: More info,  Next: Some attention points,  Prev: The Ciao assertion package,  Up: The Ciao assertion package

4.1 More info
=============

The facilities provided by the library are documented in the
description of its component modules. This documentation is intended
to provide information only at a "reference manual" level. For a more
tutorial introduction to the subject and some more examples please
see [PBH00]. The assertion language implemented in this library is
modeled after this design document, although, due to implementation
issues, it may differ in some details. The purpose of this manual is
to document precisely what the implementation of the library supports
at any given point in time.


File: lpdoc-3.0.0.info.tmp,  Node: Some attention points,  Next: Usage and interface (assertions_doc),  Prev: More info,  Up: The Ciao assertion package

4.2 Some attention points
=========================

   * *Formatting commands within text strings:* many of the
     predicates defined in these modules include arguments intended
     for providing textual information. This includes titles,
     descriptions, comments, etc. The type of this argument is a
     character string. In order for the automatic generation of
     documentation to work correctly, this character string should
     adhere to certain conventions. See the description of the `docstring/1'
     type/grammar for details.

   * *Referring to variables:* In order for the automatic
     documentation system to work correctly, variable names (for
     example, when referring to arguments in the head patterns of
     _pred_ declarations) must be surrounded by an `@var' command.
     For example, `@var{VariableName}' should be used for referring
     to the variable "VariableName", which will appear then formatted
     as follows: `VariableName'. See the description of the `docstring/1'
     type/grammar for details.



File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (assertions_doc),  Next: Documentation on new declarations (assertions_doc),  Prev: Some attention points,  Up: The Ciao assertion package

4.3 Usage and interface (`assertions_doc')
==========================================

   * *Library usage:*

     The recommended procedure in order to make use of assertions in
     user programs is to include the `assertions' syntax library,
     using one of the following declarations, as appropriate:

             :- module(...,...,[assertions]).
             :- use_package([assertions]).

   * *Exports:*

        - _Predicates:_

          `check/1', `trust/1', `true/1', `false/1'.

   * *New operators defined:*

     `=>/2' [975,xfx], `::/2' [978,xfx], `decl/1' [1150,fx], `decl/2'
     [1150,xfx], `pred/1' [1150,fx], `pred/2' [1150,xfx], `prop/1'
     [1150,fx], `prop/2' [1150,xfx], `modedef/1' [1150,fx], `calls/1'
     [1150,fx], `calls/2' [1150,xfx], `success/1' [1150,fx], `success/2'
     [1150,xfx], `test/1' [1150,fx], `test/2' [1150,xfx], `texec/1'
     [1150,fx], `texec/2' [1150,xfx], `comp/1' [1150,fx], `comp/2'
     [1150,xfx], `entry/1' [1150,fx], `exit/1' [1150,fx], `exit/2'
     [1150,xfx].

   * *New declarations defined:*

     `pred/1', `pred/2', `texec/1', `texec/2', `calls/1', `calls/2', `success/1', `success/2', `test/1', `test/2', `comp/1', `comp/2', `prop/1', `prop/2', `entry/1', `exit/1', `exit/2', `modedef/1', `decl/1', `decl/2', `doc/2', `comment/2'.

   * *Other modules used:*

        - _System library modules:_

          `assertions/assertions_props'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on new declarations (assertions_doc),  Next: Documentation on exports (assertions_doc),  Prev: Usage and interface (assertions_doc),  Up: The Ciao assertion package

4.4 Documentation on new declarations (`assertions_doc')
========================================================

 -- DECLARATION: pred/1:
     This assertion provides information on a predicate. The body of
     the assertion (its only argument) contains properties or
     comments in the formats defined by `assrt_body/1'.

     More than one of these assertions may appear per predicate, in
     which case each one represents a possible " mode" of use ( usage)
     of the predicate. The exact scope of the usage is defined by the
     properties given for calls in the body of each assertion (which
     should thus distinguish the different usages intended). All of
     them together cover all possible modes of usage.

     For example, the following assertions describe (all the and the
     only) modes of usage of predicate `length/2' (see `lists'):
          :- pred length(L,N) : list * var => list * integer
          	# "Computes the length of `L'.".
          :- pred length(L,N) : var * integer => list * integer
          	# "Outputs `L' of length `N'.".
          :- pred length(L,N) : list * integer => list * integer
          	# "Checks that `L' is of length `N'.".

     *Usage:* :- `pred AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.   ( `assrt_body/1')


 -- DECLARATION: pred/2:
     This assertion is similar to a `pred/1' assertion but it is
     explicitely qualified. Non-qualified `pred/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `AssertionStatus pred AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is an assertion body.   ( `assrt_body/1')


 -- DECLARATION: texec/1:
     This assertion is similar to a `calls/1' assertion but it is
     used to provide input data and execution commands to the
     unit-test driver.

     *Usage:* :- `texec AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a call assertion body.   ( `c_assrt_body/1')


 -- DECLARATION: texec/2:
     This assertion is similar to a `texec/1' assertion but it is
     explicitely qualified with an assertion status. Non-qualified `texec/1'
     assertions are assumed to have `check' status.

     *Usage:* :- `AssertionStatus texec AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is a call assertion body.   ( `c_assrt_body/1')


 -- DECLARATION: calls/1:
     This assertion is similar to a `pred/1' assertion but it only
     provides information about the calls to a predicate. If one or
     several calls assertions are given they are understood to
     describe all possible calls to the predicate.

     For example, the following assertion describes all possible
     calls to predicate `is/2' (see `arithmetic'):
          :- calls is(term,arithexpression).

     *Usage:* :- `calls AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a call assertion body.   ( `c_assrt_body/1')


 -- DECLARATION: calls/2:
     This assertion is similar to a `calls/1' assertion but it is
     explicitely qualified with an assertion status. Non-qualified `calls/1'
     assertions are assumed to have `check' status.

     *Usage:* :- `AssertionStatus calls AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is a call assertion body.   ( `c_assrt_body/1')


 -- DECLARATION: success/1:
     This assertion is similar to a `pred/1' assertion but it only
     provides information about the answers to a predicate. The
     described answers might be conditioned to a particular way of
     calling the predicate.

     For example, the following assertion specifies the answers of
     the `length/2' predicate _if_ it is called as in the first mode
     of usage above (note that the previous pred assertion already
     conveys such information, however it also compelled the
     predicate calls, while the success assertion does not):
          :- success length(L,N) : list * var => list * integer.

     *Usage:* :- `success AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a predicate assertion body.   ( `s_assrt_body/1')


 -- DECLARATION: success/2:
     success assertion This assertion is similar to a `success/1'
     assertion but it is explicitely qualified with an assertion
     status. The status of non-qualified `success/1' assertions is
     assumed to be `check'.

     *Usage:* :- `AssertionStatus success AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is a predicate assertion body.   ( `s_assrt_body/1')


 -- DECLARATION: test/1:
     This assertion is similar to a success assertion but it
     specifies a concrete test case to be run in order verify
     (partially) that the predicate is working as expected. For
     example, the following test will verify that the length
     predicate works well for the particular list given:
          :- test length(L,N) : ( L = [1,2,5,2] ) => ( N = 4 ).

     *Usage:* :- `test AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a predicate assertion body.   ( `s_assrt_body/1')


 -- DECLARATION: test/2:
     This assertion is similar to a `test/1' assertion but it is
     explicitely qualified with an assertion status. Non-qualified `test/1'
     assertions are assumed to have `check' status. In this context,
     check means that the test should be executed when the developer
     runs the test battery.

     *Usage:* :- `AssertionStatus test AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is a predicate assertion body.   ( `s_assrt_body/1')


 -- DECLARATION: comp/1:
     This assertion is similar to a `pred/1' assertion but it only
     provides information about the global execution properties of a
     predicate (note that such kind of information is also conveyed
     by pred assertions). The described properties might be
     conditioned to a particular way of calling the predicate.

     For example, the following assertion specifies that the
     computation of `append/3' (see `lists') will not fail _if_ it is
     called as described (but does not compel the predicate to be
     called that way):
          :- comp append(Xs,Ys,Zs) : var * var * var + not_fail.

     *Usage:* :- `comp AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a comp assertion body.   ( `g_assrt_body/1')


 -- DECLARATION: comp/2:
     This assertion is similar to a `comp/1' assertion but it is
     explicitely qualified. Non-qualified `comp/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `AssertionStatus comp AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is a comp assertion body.   ( `g_assrt_body/1')


 -- DECLARATION: prop/1:
     This assertion is similar to a `pred/1' assertion but it flags
     that the predicate being documented is also a " property."

     Properties are standard predicates, but which are _guaranteed to
     terminate for any possible instantiation state of their
     argument(s)_, do not perform side-effects which may interfere
     with the program behaviour, and do not further instantiate their
     arguments or add new constraints.

     Provided the above holds, properties can thus be safely used as run-time
     checks. The program transformation used in `ciaopp' for run-time
     checking guarantees the third requirement. It also performs some
     basic checks on properties which in most cases are enough for
     the second requirement. However, it is the user's responsibility
     to guarantee termination of the properties defined. (See also
     *note Declaring regular types:: for some considerations
     applicable to writing properties.)

     The set of properties is thus a strict subset of the set of
     predicates. Note that properties can be used to describe
     characteristics of arguments in assertions and they can also be
     executed (called) as any other predicates.

     *Usage:* :- `prop AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.   ( `assrt_body/1')


 -- DECLARATION: prop/2:
     This assertion is similar to a `prop/1' assertion but it is
     explicitely qualified. Non-qualified `prop/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `AssertionStatus prop AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is an assertion body.   ( `assrt_body/1')


 -- DECLARATION: entry/1:
     This assertion provides information about the _external_ calls
     to a predicate. It is identical syntactically to a `calls/1'
     assertion. However, they describe only external calls, i.e.,
     calls to the exported predicates of a module from outside the
     module, or calls to the predicates in a non-modular file from
     other files (or the user).

     These assertions are _trusted_ by the compiler. As a result, if
     their descriptions are erroneous they can introduce bugs in
     programs. Thus, `entry/1' assertions should be written with care.

     An important use of these assertions is in providing information
     to the compiler which it may not be able to infer from the
     program. The main use is in providing information on the ways in
     which exported predicates of a module will be called from
     outside the module. This will greatly improve the precision of
     the analyzer, which otherwise has to assume that the arguments
     that exported predicates receive are any arbitrary term.

     *Usage:* :- `entry AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a call assertion body.   ( `c_assrt_body/1')


 -- DECLARATION: exit/1:
     This type of assertion provides information about the answers
     that an (exported) predicate provides for _external_ calls. It
     is identical syntactically to a `success/1' assertion. However,
     it describes only external answers, i.e., answers to the
     exported predicates of a module from outside the module, or
     answers to the predicates in a non-modular file from other files
     (or the user). The described answers may be conditioned to a
     particular way of calling the predicate. E.g.:

          :- exit length(L,N) : list * var => list * integer.

     *Usage:* :- `exit AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a predicate assertion body.   ( `s_assrt_body/1')


 -- DECLARATION: exit/2:
     exit assertion This assertion is similar to an `exit/1'
     assertion but it is explicitely qualified with an assertion
     status. Non-qualified `exit/1' assertions are assumed the
     qualifier `check'.

     *Usage:* :- `AssertionStatus exit AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is a predicate assertion body.   ( `s_assrt_body/1')


 -- DECLARATION: modedef/1:
     This assertion is used to define modes. A mode defines in a
     compact way a set of call and success properties. Once defined,
     modes can be applied to predicate arguments in assertions. The
     meaning of this application is that the call and success
     properties defined by the mode hold for the argument to which
     the mode is applied. Thus, a mode is conceptually a "property
     macro".

     The syntax of mode definitions is similar to that of pred
     declarations. For example, the following set of assertions:

          :- modedef +A : nonvar(A) # "`A' is bound upon predicate entry.".

          :- pred p(+A,B) : integer(A) =>  ground(B).

     is equivalent to:

          :- pred p(A,B) : (nonvar(A),integer(A)) =>  ground(B)
             # "`A' is bound upon predicate entry.".

     *Usage:* :- `modedef AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.   ( `assrt_body/1')


 -- DECLARATION: decl/1:
     This assertion is similar to a `pred/1' assertion but it is used
     for declarations instead than for predicates.

     *Usage:* :- `decl AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.   ( `assrt_body/1')


 -- DECLARATION: decl/2:
     This assertion is similar to a `decl/1' assertion but it is
     explicitely qualified. Non-qualified `decl/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `AssertionStatus decl AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is an assertion body.   ( `assrt_body/1')


 -- DECLARATION: doc/2:
     *Usage:* :- `doc(Pred,Comment)'.
        - _Description:_ Documentation . This assertion provides a
          text `Comment' for a given predicate `Pred'.

        - _The following properties should hold at call time:_

          `Pred' is a head pattern.   ( `head_pattern/1')

          `Comment' is a text comment with admissible documentation
          commands. The usual formatting commands that are applicable
          in comment strings are defined by `stringcommand/1'. See the `lpdoc'
          manual for documentation on comments.   ( `docstring/1')


 -- DECLARATION: comment/2:
     *Usage:* :- `comment(Pred,Comment)'.
        - _Description:_ An alias for `doc/2' (deprecated, for
          compatibility with older versions).

        - _The following properties should hold at call time:_

          `Pred' is a head pattern.   ( `head_pattern/1')

          `Comment' is a text comment with admissible documentation
          commands. The usual formatting commands that are applicable
          in comment strings are defined by `stringcommand/1'. See the `lpdoc'
          manual for documentation on comments.   ( `docstring/1')



File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (assertions_doc),  Prev: Documentation on new declarations (assertions_doc),  Up: The Ciao assertion package

4.5 Documentation on exports (`assertions_doc')
===============================================

 -- PREDICATE: check/1:
     *Usage:* `check(PropertyConjunction)'
        - _Description:_ This assertion provides information on a
          clause program point (position in the body of a clause).
          Calls to a `check/1' assertion can appear in the body of a
          clause in any place where a literal can normally appear.
          The property defined by `PropertyConjunction' should hold
          in all the run-time stores corresponding to that program
          point. See also *note Run-time checking of assertions::.

        - _The following properties should hold at call time:_

          `PropertyConjunction' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.   ( `property_conjunction/1')


 -- PREDICATE: trust/1:
     *Usage:* `trust(PropertyConjunction)'
        - _Description:_ This assertion also provides information on
          a clause program point. It is identical syntactically to a `check/1'
          assertion. However, the properties stated are not taken as
          something to be checked but are instead _trusted_ by the
          compiler. While the compiler may in some cases detect an
          inconsistency between a `trust/1' assertion and the
          program, in all other cases the information given in the
          assertion will be taken to be true. As a result, if these
          assertions are erroneous they can introduce bugs in
          programs. Thus, `trust/1' assertions should be written with
          care.

          An important use of these assertions is in providing
          information to the compiler which it may not be able to
          infer from the program (either because the information is
          not present or because the analyzer being used is not
          precise enough). In particular, providing information on
          external predicates which may not be accessible at the time
          of compiling the module can greatly improve the precision
          of the analyzer. This can be easily done with trust
          assertion.

        - _The following properties should hold at call time:_

          `PropertyConjunction' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.   ( `property_conjunction/1')


 -- PREDICATE: true/1:
     *Usage:* `true(PropertyConjunction)'
        - _Description:_ This assertion is identical syntactically to
          a `check/1' assertion. However, the properties stated have
          been proved to hold by the analyzer. Thus, these assertions
          often represent the analyzer output.

        - _The following properties should hold at call time:_

          `PropertyConjunction' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.   ( `property_conjunction/1')


 -- PREDICATE: false/1:
     *Usage:* `false(PropertyConjunction)'
        - _Description:_ This assertion is identical syntactically to
          a `check/1' assertion. However, the properties stated have
          been proved not to hold by the analyzer. Thus, these
          assertions often represent the analyzer output.

        - _The following properties should hold at call time:_

          `PropertyConjunction' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.   ( `property_conjunction/1')



File: lpdoc-3.0.0.info.tmp,  Node: Types and properties related to assertions,  Next: Declaring regular types,  Prev: The Ciao assertion package,  Up: Top

5 Types and properties related to assertions
********************************************

*Author(s):* Manuel Hermenegildo.

   This module is part of the `assertions' library. It provides the
formal definition of the syntax of several forms of assertions and
describes their meaning. It does so by defining types and properties
related to the assertions themselves. The text describes, for
example, the overall fields which are admissible in the bodies of
assertions, where properties can be used inside these bodies, how to
combine properties for a given predicate argument (e.g.,
conjunctions) , etc. and provides some examples.

* Menu:

* Usage and interface (assertions_props)::
* Documentation on exports (assertions_props)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (assertions_props),  Next: Documentation on exports (assertions_props),  Prev: Types and properties related to assertions,  Up: Types and properties related to assertions

5.1 Usage and interface (`assertions_props')
============================================

   * *Library usage:*

     `:- use_module(library(assertions_props)).'

   * *Exports:*

        - _Properties:_

          `head_pattern/1', `nabody/1', `docstring/1'.

        - _Regular Types:_

          `assrt_body/1', `complex_arg_property/1', `property_conjunction/1', `property_starterm/1', `complex_goal_property/1', `dictionary/1', `c_assrt_body/1', `s_assrt_body/1', `g_assrt_body/1', `assrt_status/1', `assrt_type/1', `predfunctor/1', `propfunctor/1'.

   * *Other modules used:*

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (assertions_props),  Prev: Usage and interface (assertions_props),  Up: Types and properties related to assertions

5.2 Documentation on exports (`assertions_props')
=================================================

 -- REGTYPE: assrt_body/1:
     This predicate defines the different types of syntax admissible
     in the bodies of `pred/1', `decl/1', etc. assertions. Such a
     body is of the form:

                Pr [:: DP] [: CP] [=> AP] [+ GP] [# CO]

     where (fields between [...] are optional):

        * `Pr' is a head pattern ( `head_pattern/1') which describes
          the predicate or property and possibly gives some implicit
          call/answer information.

        * `DP' is a (possibly empty) complex argument property ( `complex_arg_property/1')
          which expresses properties which are compatible with the
          predicate, i.e., instantiations made by the predicate are
          _compatible_ with the properties in the sense that applying
          the property at any point would not make it fail.

        * `CP' is a (possibly empty) complex argument property ( `complex_arg_property/1')
          which applies to the _calls_ to the predicate.

        * `AP' is a (possibly empty) complex argument property ( `complex_arg_property/1')
          which applies to the _answers_ to the predicate (if the
          predicate succeeds). These only apply if the (possibly
          empty) properties given for calls in the assertion hold.

        * `GP' is a (possibly empty) complex goal property ( `complex_goal_property/1')
          which applies to the _whole execution_ of a call to the
          predicate. These only apply if the (possibly empty)
          properties given for calls in the assertion hold.

        * `CO' is a comment string ( `docstring/1'). This comment
          only applies if the (possibly empty) properties given for
          calls in the assertion hold. The usual formatting commands
          that are applicable in comment strings can be used (see `stringcommand/1').

          See the `lpdoc' manual for documentation on assertion
          comments.


     *Usage:* `assrt_body(X)'
        - _Description:_ `X' is an assertion body.


 -- PROPERTY: head_pattern/1:
     A head pattern can be a predicate name (functor/arity) ( `predname/1')
     or a term. Thus, both `p/3' and `p(A,B,C)' are valid head
     patterns. In the case in which the head pattern is a term, each
     argument of such a term can be:

        * A variable. This is useful in order to be able to refer to
          the corresponding argument positions by name within
          properties and in comments. Thus,
          `p(Input,Parameter,Output)' is a valid head pattern.

        * A variable, as above, but preceded by a " mode." This mode
          determines in a compact way certain call or answer
          properties. For example, the head pattern
          `p(Input,+Parameter,Output)' is valid, as long as `+/1' is
          declared as a mode.

          Acceptable modes are documented in `library(basicmodes)' and `library(isomodes)'.
          User defined modes are documented in `modedef/1'.  

        * Any term. In this case this term determines the
          instantiation state of the corresponding argument position
          of the predicate calls to which the assertion applies.

        * A ground term preceded by a " mode." The ground term
          determines a property of the corresponding argument. The
          mode determines if it applies to the calls and/or the
          successes. The actual property referred to is that given by
          the term but with one more argument added at the beginning,
          which is a new variable which, in a rewriting of the head
          pattern, appears at the argument position occupied by the
          term. For example, the head pattern
          `p(Input,+list(int),Output)' is valid for mode `+/1'
          defined in `library(isomodes)', and equivalent in this case
          to having the head pattern `p(Input,A,Output)' and stating
          that the property `list(A,int)' holds for the calls of the
          predicate.

        * Any term preceded by a " mode." In this case, only one
          variable is admitted, it has to be the first argument of
          the mode, and it represents the argument position. I.e., it
          plays the role of the new variable mentioned above. Thus,
          no rewriting of the head pattern is performed in this case.
          For example, the head pattern
          `p(Input,+(Parameter,list(int)),Output)' is valid for mode `+/2'
          defined in `library(isomodes)', and equivalent in this case
          to having the head pattern `p(Input,Parameter,Output)' and
          stating that the property `list(Parameter,int)' holds for
          the calls of the predicate.


     *Usage:* `head_pattern(Pr)'
        - _Description:_ `Pr' is a head pattern.


 -- REGTYPE: complex_arg_property/1:
     `complex_arg_property(Props)'

     `Props' is a (possibly empty) complex argument property. Such
     properties can appear in two formats, which are defined by `property_conjunction/1'
     and `property_starterm/1' respectively. The two formats can be
     mixed provided they are not in the same field of an assertion.
     I.e., the following is a valid assertion:

     `:- pred foo(X,Y) : nonvar * var => (ground(X),ground(Y)).'

     *Usage:* `complex_arg_property(Props)'
        - _Description:_ `Props' is a (possibly empty) complex
          argument property


 -- REGTYPE: property_conjunction/1:
     This type defines the first, unabridged format in which
     properties can be expressed in the bodies of assertions. It is
     essentially a conjunction of properties which refer to
     variables. The following is an example of a complex property in
     this format:

        * `(integer(X),list(Y,integer))': `X' has the property `integer/1'
          and `Y' has the property `list/2', with second argument
          `integer'.


     *Usage:* `property_conjunction(Props)'
        - _Description:_ `Props' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.


 -- REGTYPE: property_starterm/1:
     This type defines a second, compact format in which properties
     can be expressed in the bodies of assertions. A `property_starterm/1'
     is a term whose main functor is `*/2' and, when it appears in an
     assertion, the number of terms joined by `*/2' is exactly the
     arity of the predicate it refers to. A similar series of
     properties as in `property_conjunction/1' appears, but the arity
     of each property is one less: the argument position to which
     they refer (first argument) is left out and determined by the
     position of the property in the `property_starterm/1'. The idea
     is that each element of the `*/2' term corresponds to a head
     argument position. Several properties can be assigned to each
     argument position by grouping them in curly brackets. The
     following is an example of a complex property in this format:

        * ` integer * list(integer)': the first argument of the
          procedure (or function, or ...) has the property `integer/1'
          and the second one has the property `list/2', with second
          argument `integer'.

        * ` {integer,var} * list(integer)': the first argument of the
          procedure (or function, or ...) has the properties `integer/1'
          and `var/1' and the second one has the property `list/2',
          with second argument `integer'.


     *Usage:* `property_starterm(Props)'
        - _Description:_ `Props' is either a term or several terms
          separated by `*/2'. The main functor of each of those terms
          corresponds to that of the definition of a property, and
          the arity should be one less than in the definition of such
          property. All arguments of each such term are ground.


 -- REGTYPE: complex_goal_property/1:
     `complex_goal_property(Props)'

     `Props' is a (possibly empty) complex goal property. Such
     properties can be either a term or a _conjunction_ of terms. The
     main functor and arity of each of those terms corresponds to the
     definition of a property. Such properties apply to all
     executions of all goals of the predicate which comply with the
     assertion in which the `Props' appear.

     The arguments of the terms in `Props' are implicitely augmented
     with a first argument which corresponds to a goal of the
     predicate of the assertion in which the `Props' appear. For
     example, the assertion
               :- comp var(A) + not_further_inst(A).
     has property `not_further_inst/1' as goal property, and
     establishes that in all executions of `var(A)' it should hold
     that `not_further_inst(var(A),A)'.

     *Usage:* `complex_goal_property(Props)'
        - _Description:_ `Props' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. A first
          implicit argument in such terms identifies goals to which
          the properties apply.


 -- PROPERTY: nabody/1:
     *Usage:* `nabody(ABody)'
        - _Description:_ `ABody' is a normalized assertion body.


 -- REGTYPE: dictionary/1:
     *Usage:* `dictionary(D)'
        - _Description:_ `D' is a dictionary of variable names.


 -- REGTYPE: c_assrt_body/1:
     This predicate defines the different types of syntax admissible
     in the bodies of `call/1', `entry/1', etc. assertions. The
     following are admissible:

                Pr : CP [# CO]

     where (fields between [...] are optional):

        * `CP' is a (possibly empty) complex argument property ( `complex_arg_property/1')
          which applies to the _calls_ to the predicate.

        * `CO' is a comment string ( `docstring/1'). This comment
          only applies if the (possibly empty) properties given for
          calls in the assertion hold. The usual formatting commands
          that are applicable in comment strings can be used (see `stringcommand/1').


     The format of the different parts of the assertion body are
     given by `n_assrt_body/5' and its auxiliary types.

     *Usage:* `c_assrt_body(X)'
        - _Description:_ `X' is a call assertion body.


 -- REGTYPE: s_assrt_body/1:
     This predicate defines the different types of syntax admissible
     in the bodies of `pred/1', `func/1', etc. assertions. The
     following are admissible:

                Pr : CP => AP # CO
                Pr : CP => AP
                Pr => AP # CO
                Pr => AP

     where:

        * `Pr' is a head pattern ( `head_pattern/1') which describes
          the predicate or property and possibly gives some implicit
          call/answer information.

        * `CP' is a (possibly empty) complex argument property ( `complex_arg_property/1')
          which applies to the _calls_ to the predicate.

        * `AP' is a (possibly empty) complex argument property ( `complex_arg_property/1')
          which applies to the _answers_ to the predicate (if the
          predicate succeeds). These only apply if the (possibly
          empty) properties given for calls in the assertion hold.

        * `CO' is a comment string ( `docstring/1'). This comment
          only applies if the (possibly empty) properties given for
          calls in the assertion hold. The usual formatting commands
          that are applicable in comment strings can be used (see `stringcommand/1').


     The format of the different parts of the assertion body are
     given by `n_assrt_body/5' and its auxiliary types.

     *Usage:* `s_assrt_body(X)'
        - _Description:_ `X' is a predicate assertion body.


 -- REGTYPE: g_assrt_body/1:
     This predicate defines the different types of syntax admissible
     in the bodies of `comp/1' assertions. The following are
     admissible:

                Pr : CP + GP # CO
                Pr : CP + GP
                Pr + GP # CO
                Pr + GP

     where:

        * `Pr' is a head pattern ( `head_pattern/1') which describes
          the predicate or property and possibly gives some implicit
          call/answer information.

        * `CP' is a (possibly empty) complex argument property ( `complex_arg_property/1')
          which applies to the _calls_ to the predicate.

        * `GP' contains (possibly empty) complex goal property ( `complex_goal_property/1')
          which applies to the _whole execution_ of a call to the
          predicate. These only apply if the (possibly empty)
          properties given for calls in the assertion hold.

        * `CO' is a comment string ( `docstring/1'). This comment
          only applies if the (possibly empty) properties given for
          calls in the assertion hold. The usual formatting commands
          that are applicable in comment strings can be used (see `stringcommand/1').


     The format of the different parts of the assertion body are
     given by `n_assrt_body/5' and its auxiliary types.

     *Usage:* `g_assrt_body(X)'
        - _Description:_ `X' is a comp assertion body.


 -- REGTYPE: assrt_status/1:
     The types of assertion status. They have the same meaning as the
     program-point assertions, and are as follows:
          assrt_status(true).
          assrt_status(false).
          assrt_status(check).
          assrt_status(checked).
          assrt_status(trust).

     *Usage:* `assrt_status(X)'
        - _Description:_ `X' is an acceptable status for an assertion.


 -- REGTYPE: assrt_type/1:
     The admissible kinds of assertions:
          assrt_type(pred).
          assrt_type(prop).
          assrt_type(decl).
          assrt_type(func).
          assrt_type(calls).
          assrt_type(success).
          assrt_type(comp).
          assrt_type(entry).
          assrt_type(exit).
          assrt_type(test).
          assrt_type(texec).
          assrt_type(modedef).

     *Usage:* `assrt_type(X)'
        - _Description:_ `X' is an admissible kind of assertion.


 -- REGTYPE: predfunctor/1:
     *Usage:* `predfunctor(X)'
        - _Description:_ `X' is a type of assertion which defines a
          predicate.


 -- REGTYPE: propfunctor/1:
     *Usage:* `propfunctor(X)'
        - _Description:_ `X' is a type of assertion which defines a
          _property_.


 -- PROPERTY: docstring/1:
     *Usage:* `docstring(String)'
        - _Description:_ `String' is a text comment with admissible
          documentation commands. The usual formatting commands that
          are applicable in comment strings are defined by `stringcommand/1'.
          See the `lpdoc' manual for documentation on comments.



File: lpdoc-3.0.0.info.tmp,  Node: Declaring regular types,  Next: Basic data types and properties,  Prev: Types and properties related to assertions,  Up: Top

6 Declaring regular types
*************************

*Author(s):* Manuel Hermenegildo, Pedro Lo'pez, Francisco Bueno.

   This library package adds declarations and new operator
definitions which provide simple syntactic sugar to write regular
type definitions in source code. Regular types are just properties
which have the additional characteristic of being regular types ( `basic_props:regtype/1'),
defined below.

   For example, this library package allows writing:
        :- regtype tree(X) # "`X' is a tree.".
   instead of the more cumbersome:
        :- prop tree(X) + regtype # "`X' is a tree.".

   Regular types can be used as properties to describe predicates and
play an essential role in program debugging (see the Ciao Prolog
preprocessor (`ciaopp') manual).

   In this chapter we explain some general considerations worth
taking into account when writing properties in general, not just
regular types.

* Menu:

* Defining properties::
* Usage and interface (regtypes_doc)::
* Documentation on new declarations (regtypes_doc)::


File: lpdoc-3.0.0.info.tmp,  Node: Defining properties,  Next: Usage and interface (regtypes_doc),  Prev: Declaring regular types,  Up: Declaring regular types

6.1 Defining properties
=======================

Given the classes of assertions in the Ciao assertion language, there
are two fundamental classes of properties. Properties used in
assertions which refer to execution states (i.e., `calls/1',
`success/1', and the like) are called _properties of execution
states_. Properties used in assertions related to computations (i.e.,
`comp/1') are called _properties of computations_. Different
considerations apply when writing a property of the former or of the
later kind.

   Consider a definition of the predicate `string_concat/3' which
concatenates two character strings (represented as lists of ASCII
codes):
     string_concat([],L,L).
     string_concat([X|Xs],L,[X|NL]):- string_concat(Xs,L,NL).

   Assume that we would like to state in an assertion that each
argument "is a list of integers." However, we must decide which one
of the following two possibilities we mean exactly: "the argument is
_instantiated_ to a list of integers" (let us call this property
`instantiated_to_intlist/1'), or "if any part of the argument is
instantiated, this instantiation must be compatible with the argument
being a list of integers" (we will call this property
`compatible_with_intlist/1'). For example,
`instantiated_to_intlist/1' should be true for the terms `[]' and
`[1,2]', but should not for `X', `[a,2]', and `[X,2]'. In turn,
`compatible_with_intlist/1' should be true for `[]', `X', `[1,2]',
and `[X,2]', but should not be for `[X|1]', `[a,2]', and `1'. We
refer to properties such as `instantiated_to_intlist/1' above as _instantiation
properties_ and to those such as `compatible_with_intlist/1' as _compatibility
properties_ (corresponding to the traditional notions of
"instantiation types" and "compatibility types").

   It turns out that both of these notions are quite useful in
practice. In the example above, we probably would like to use
`compatible_with_intlist/1' to state that on success of
`string_concat/3' all three argument must be compatible with lists of
integers in an assertion like:

     :- success string_concat(A,B,C) => ( compatible_with_intlist(A),
                                          compatible_with_intlist(B),
                                          compatible_with_intlist(C) ).

   With this assertion, no error will be flagged for a call to
`string_concat/3' such as `string_concat([20],L,R)', which on success
produces the resulting atom `string_concat([20],L,[20|L])', but a
call `string_concat([],a,R)' would indeed flag an error.

   On the other hand, and assuming that we are running on a Prolog
system, we would probably like to use `instantiated_to_intlist/1' for
`sumlist/2' as follows:

     :- calls sumlist(L,N) : instantiated_to_intlist(L).

     sumlist([],0).
     sumlist([X|R],S) :- sumlist(R,PS), S is PS+X.

to describe the type of calls for which the program has been
designed, i.e., those in which the first argument of `sumlist/2' is
indeed a list of integers.

   The property `instantiated_to_intlist/1' might be written as in
the following (Prolog) definition:

     :- prop instantiated_to_intlist/1.

     instantiated_to_intlist(X) :-
            nonvar(X), instantiated_to_intlist_aux(X).

     instantiated_to_intlist_aux([]).
     instantiated_to_intlist_aux([X|T]) :-
            integer(X), instantiated_to_intlist(T).

   (Recall that the Prolog builtin `integer/1' itself implements an
instantiation check, failing if called with a variable as the
argument.)

   The property `compatible_with_intlist/1' might in turn be written
as follows (also in Prolog):

     :- prop compatible_with_intlist/1.

     compatible_with_intlist(X) :- var(X).
     compatible_with_intlist(X) :-
            nonvar(X), compatible_with_intlist_aux(X).

     compatible_with_intlist_aux([]).
     compatible_with_intlist_aux([X|T]) :-
            int_compat(X), compatible_with_intlist(T).

     int_compat(X) :- var(X).
     int_compat(X) :- nonvar(X), integer(X).

   Note that these predicates meet the criteria for being properties
and thus the `prop/1' declaration is correct.

   Ensuring that a property meets the criteria for "not affecting the
computation" can sometimes make its coding somewhat tedious. In some
ways, one would like to be able to write simply:

     intlist([]).
     intlist([X|R]) :- int(X), intlist(R).

(Incidentally, note that the above definition, provided that it suits
the requirements for being a property and that `int/1' is a regular
type, meets the criteria for being a regular type. Thus, it could be
declared `:- regtype intlist/1'.)

   But note that (independently of the definition of `int/1') the
definition above is not the correct instantiation check, since it
would succeed for a call such as `intlist(X)'. In fact, it is not
strictly correct as a compatibility property either, because, while
it would fail or succeed as expected, it would perform instantiations
(e.g., if called with `intlist(X)' it would bind `X' to `[]'). In
practice, it is convenient to provide some run-time support to aid in
this task.

   The run-time support of the Ciao system (see *note Run-time
checking of assertions::) ensures that the execution of properties is
performed in such a way that properties written as above can be used
directly as instantiation checks. Thus, writing:

     :- calls sumlist(L,N) : intlist(L).

has the desired effect. Also, the same properties can often be used
as compatibility checks by writing them in the assertions as
`compat(Property)' (`basic_props:compat/1'). Thus, writing:

     :- success string_concat(A,B,C) => ( compat(intlist(A)),
                                          compat(intlist(B)),
                                          compat(intlist(C)) ).

also has the desired effect.

   As a general rule, the properties that can be used directly for
checking for compatibility should be _downwards closed_, i.e., once
they hold they will keep on holding in every state accessible in
forwards execution. There are certain predicates which are inherently
_instantiation_ checks and should not be used as _compatibility_
properties nor appear in the definition of a property that is to be
used with `compat'. Examples of such predicates (for Prolog) are
`==', `ground', `nonvar', `integer', `atom', `>', etc. as they
require a certain instantiation degree of their arguments in order to
succeed.

   In contrast with properties of execution states, _properties of
computations_ refer to the entire execution of the call(s) that the
assertion relates to. One such property is, for example, `not_fail/1'
(note that although it has been used as in `:- comp append(Xs,Ys,Zs)
+ not_fail', it is in fact read as `not_fail(append(Xs,Ys,Zs))'; see
`assertions_props:complex_goal_property/1'). For this property, which
should be interpreted as "execution of the predicate either succeeds
at least once or loops," we can use the following predicate
`not_fail/1' for run-time checking:

     not_fail(Goal):-
           if( call(Goal),
               true,            %% then
               warning(Goal) ). %% else

where the `warning/1' (library) predicate simply prints a warning
message.

   In this simple case, implementation of the predicate is not very
difficult using the (non-standard) `if/3' builtin predicate present
in many Prolog systems.

   However, it is not so easy to code predicates which check other
properties of the computation and we may in general need to program a
meta-interpreter for this purpose.


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (regtypes_doc),  Next: Documentation on new declarations (regtypes_doc),  Prev: Defining properties,  Up: Declaring regular types

6.2 Usage and interface (`regtypes_doc')
========================================

   * *Library usage:*

     `:- use_package(regtypes).'

     or

     `:- module(...,...,[regtypes]).'

   * *New operators defined:*

     `regtype/1' [1150,fx], `regtype/2' [1150,xfx].

   * *New declarations defined:*

     `regtype/1', `regtype/2'.

   * *Other modules used:*

        - _System library modules:_

          `assertions/assertions_props'.

        - _Internal (engine) modules:_

          `term_basic'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on new declarations (regtypes_doc),  Prev: Usage and interface (regtypes_doc),  Up: Declaring regular types

6.3 Documentation on new declarations (`regtypes_doc')
======================================================

 -- DECLARATION: regtype/1:
     This assertion is similar to a prop assertion but it flags that
     the property being documented is also a " regular type." Regular
     types are properties whose definitions are _regular programs_
     (see lelow). This allows for example checking whether it is in
     the class of types supported by the regular type checking and
     inference modules.

     A regular program is defined by a set of clauses, each of the
     form:
          p(x, v_1, ..., v_n)  :- body_1, ..., body_k.
     where:
       1. `x' is a term whose variables (which are called _term
          variables_) are unique, i.e., it is not allowed to
          introduce equality constraints between the variables of `x'.

          For example, `p(f(X, Y)) :- ...' is valid, but `p(f(X, X))
          :- ...' is not.

       2. in all clauses defining `p/n+1' the terms `x' do not unify
          except maybe for one single clause in which `x' is a
          variable.

       3. `n' >= 0 and `p/n' is a _parametric type functor_ (whereas
          the predicate defined by the clauses is `p/n'+1).

       4. `v_1', ..., `v_n' are unique variables, which are called
          _parametric variables_.

       5. Each `body_i' is of the form:

            1. `t(z)' where `z' is one of the _term variables_ and
               `t' is a _regular type expression_;

            2. `q(y, t_1, ..., t_m)' where `m' >= 0, `q/m' is a
               _parametric type functor_, not in the set of functors
               `=/2', `^/2', `./3'.

               `t_1, ..., t_m' are _regular type expressions_, and
               `y' is a _term variable_.

       6. Each term variable occurs at most once in the clause's body
          (and should be as the first argument of a literal).
          A _regular type expression_ is either a parametric variable
     or a parametric type functor applied to some of the parametric
     variables.

     A parametric type functor is a regular type, defined by a
     regular program, or a basic type. Basic types are defined in
     *note Basic data types and properties::.

     The set of regular types is thus a well defined subset of the
     set of properties. Note that types can be used to describe
     characteristics of arguments in assertions and they can also be
     executed (called) as any other predicates.

     *Usage:* :- `regtype AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.   ( `assrt_body/1')


 -- DECLARATION: regtype/2:
     This assertion is similar to a `regtype/1' assertion but it is
     explicitely qualified. Non-qualified `regtype/1' assertions are
     assumed the qualifier `check'. Note that checking regular type
     definitions should be done with the `ciaopp' preprocessor.

     *Usage:* :- `AssertionStatus regtype AssertionBody'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          ( `assrt_status/1')

          `AssertionBody' is an assertion body.   ( `assrt_body/1')



File: lpdoc-3.0.0.info.tmp,  Node: Basic data types and properties,  Next: Properties which are native to analyzers,  Prev: Declaring regular types,  Up: Top

7 Basic data types and properties
*********************************

*Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   This library contains the set of basic properties used by the
builtin predicates, and which constitute the basic data types and
properties of the language. They can be used both as type testing
builtins within programs (by calling them explicitly) and as
properties in assertions.

* Menu:

* Usage and interface (basic_props)::
* Documentation on exports (basic_props)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (basic_props),  Next: Documentation on exports (basic_props),  Prev: Basic data types and properties,  Up: Basic data types and properties

7.1 Usage and interface (`basic_props')
=======================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*

        - _Properties:_

          `member/2', `compat/2', `inst/2', `iso/1', `deprecated/1', `not_further_inst/2', `sideff/2', `regtype/1', `native/1', `native/2', `no_rtcheck/1', `eval/1', `equiv/2', `bind_ins/1', `error_free/1', `memo/1', `filter/2', `pe_type/1'.

        - _Regular Types:_

          `term/1', `int/1', `nnegint/1', `flt/1', `num/1', `atm/1', `struct/1', `gnd/1', `gndstr/1', `constant/1', `callable/1', `operator_specifier/1', `list/1', `list/2', `nlist/2', `sequence/2', `sequence_or_list/2', `character_code/1', `string/1', `num_code/1', `predname/1', `atm_or_atm_list/1', `flag_values/1'.

   * *Other modules used:*

        - _System library modules:_

          `assertions/native_props', `terms_check'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (basic_props),  Prev: Usage and interface (basic_props),  Up: Basic data types and properties

7.2 Documentation on exports (`basic_props')
============================================

 -- REGTYPE: term/1:
     The most general type (includes all possible terms).

     *General properties:* `term(X)'
        - _The following properties hold globally:_

          `term(X)' is side-effect `free'.   ( `sideff/2')
     `term(X)'
        - _The following properties hold globally:_

          `term(X)' is evaluable at compile-time.   ( `eval/1')
     `term(X)'
        - _The following properties hold globally:_

          `term(X)' is equivalent to `true'.   ( `equiv/2')

     *Usage:* `term(X)'
        - _Description:_ `X' is any term.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- REGTYPE: int/1:
     The type of integers. The range of integers is `[-2^2147483616,
     2^2147483616)'. Thus for all practical purposes, the range of
     integers can be considered infinite.

     *General properties:* `int(T)'
        - _The following properties hold globally:_

          `int(T)' is side-effect `free'.   ( `sideff/2')
     `int(T)'
        - _If the following properties hold at call time:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `int(T)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `int(T)' are deterministic.   ( `is_det/1')
     `int(T)'
        - _The following properties hold upon exit:_

          `T' is an integer.   ( `int/1')

        - _The following properties hold globally:_

          Indicates the type of test that a predicate performs.
          Required by the nonfailure analyisis.   ( `test_type/2')

     *Usage:* `int(T)'
        - _Description:_ `T' is an integer.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- REGTYPE: nnegint/1:
     The type of non-negative integers, i.e., natural numbers.

     *General properties:* `nnegint(T)'
        - _The following properties hold globally:_

          `nnegint(T)' is side-effect `free'.   ( `sideff/2')
     `nnegint(T)'
        - _If the following properties hold at call time:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `nnegint(T)' is evaluable at compile-time.   ( `eval/1')
     `nnegint(T)'
        - _The following properties hold upon exit:_

          `T' is a non-negative integer.   ( `nnegint/1')

        - _The following properties hold globally:_

          Indicates the type of test that a predicate performs.
          Required by the nonfailure analyisis.   ( `test_type/2')

     *Usage:* `nnegint(T)'
        - _Description:_ `T' is a non-negative integer.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- REGTYPE: flt/1:
     The type of floating-point numbers. The range of floats is the
     one provided by the C `double' type, typically `[4.9e-324,
     1.8e+308]' (plus or minus). There are also three special values:
     Infinity, either positive or negative, represented as `1.0e1000'
     and `-1.0e1000'; and Not-a-number, which arises as the result of
     indeterminate operations, represented as `0.Nan'

     *General properties:* `flt(T)'
        - _The following properties hold globally:_

          `flt(T)' is side-effect `free'.   ( `sideff/2')
     `flt(T)'
        - _If the following properties hold at call time:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `flt(T)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `flt(T)' are deterministic.   ( `is_det/1')
     `flt(T)'
        - _The following properties hold upon exit:_

          `T' is a float.   ( `flt/1')

        - _The following properties hold globally:_

          Indicates the type of test that a predicate performs.
          Required by the nonfailure analyisis.   ( `test_type/2')

     *Usage:* `flt(T)'
        - _Description:_ `T' is a float.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- REGTYPE: num/1:
     The type of numbers, that is, integer or floating-point.

     *General properties:* `num(T)'
        - _The following properties hold globally:_

          `num(T)' is side-effect `free'.   ( `sideff/2')

          `num(T)' is binding insensitive.   ( `bind_ins/1')
     `num(T)'
        - _If the following properties hold at call time:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `num(T)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `num(T)' are deterministic.   ( `is_det/1')
     `num(T)'
        - _The following properties hold upon exit:_

          `T' is a number.   ( `num/1')

        - _The following properties hold globally:_

          Indicates the type of test that a predicate performs.
          Required by the nonfailure analyisis.   ( `test_type/2')

     *Usage:* `num(T)'
        - _Description:_ `T' is a number.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- REGTYPE: atm/1:
     The type of atoms, or non-numeric constants. The size of atoms
     is unbound.

     *General properties:* `atm(T)'
        - _The following properties hold globally:_

          `atm(T)' is side-effect `free'.   ( `sideff/2')
     `atm(T)'
        - _If the following properties hold at call time:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `atm(T)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `atm(T)' are deterministic.   ( `is_det/1')
     `atm(T)'
        - _The following properties hold upon exit:_

          `T' is an atom.   ( `atm/1')

        - _The following properties hold globally:_

          Indicates the type of test that a predicate performs.
          Required by the nonfailure analyisis.   ( `test_type/2')

     *Usage:* `atm(T)'
        - _Description:_ `T' is an atom.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- REGTYPE: struct/1:
     The type of compound terms, or terms with non-zeroary functors.
     By now there is a limit of 255 arguments.

     *General properties:* `struct(T)'
        - _The following properties hold globally:_

          `struct(T)' is side-effect `free'.   ( `sideff/2')
     `struct(T)'
        - _If the following properties hold at call time:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `struct(T)' is evaluable at compile-time.   ( `eval/1')
     `struct(T)'
        - _The following properties hold upon exit:_

          `T' is a compound term.   ( `struct/1')

     *Usage:* `struct(T)'
        - _Description:_ `T' is a compound term.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- REGTYPE: gnd/1:
     The type of all terms without variables.

     *General properties:* `gnd(T)'
        - _The following properties hold globally:_

          `gnd(T)' is side-effect `free'.   ( `sideff/2')
     `gnd(T)'
        - _If the following properties hold at call time:_

          `T' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `gnd(T)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `gnd(T)' are deterministic.   ( `is_det/1')
     `gnd(T)'
        - _The following properties hold upon exit:_

          `T' is ground.   ( `gnd/1')

        - _The following properties hold globally:_

          Indicates the type of test that a predicate performs.
          Required by the nonfailure analyisis.   ( `test_type/2')

     *Usage:* `gnd(T)'
        - _Description:_ `T' is ground.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- REGTYPE: gndstr/1:
     *General properties:* `gndstr(T)'
        - _The following properties hold globally:_

          `gndstr(T)' is side-effect `free'.   ( `sideff/2')
     `gndstr(T)'
        - _If the following properties hold at call time:_

          `T' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `gndstr(T)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `gndstr(T)' are deterministic.   ( `is_det/1')
     `gndstr(T)'
        - _The following properties hold upon exit:_

          `T' is a ground compound term.   ( `gndstr/1')

     *Usage:* `gndstr(T)'
        - _Description:_ `T' is a ground compound term.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- REGTYPE: constant/1:
     *General properties:* `constant(T)'
        - _The following properties hold globally:_

          `constant(T)' is side-effect `free'.   ( `sideff/2')
     `constant(T)'
        - _If the following properties hold at call time:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `constant(T)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `constant(T)' are deterministic.   ( `is_det/1')
     `constant(T)'
        - _The following properties hold upon exit:_

          `T' is an atomic term (an atom or a number).   ( `constant/1')

     *Usage:* `constant(T)'
        - _Description:_ `T' is an atomic term (an atom or a number).


 -- REGTYPE: callable/1:
     *General properties:* `callable(T)'
        - _The following properties hold globally:_

          `callable(T)' is side-effect `free'.   ( `sideff/2')
     `callable(T)'
        - _If the following properties hold at call time:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `callable(T)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `callable(T)' are deterministic.   ( `is_det/1')
     `callable(T)'
        - _The following properties hold upon exit:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

     *Usage:* `callable(T)'
        - _Description:_ `T' is a term which represents a goal, i.e.,
          an atom or a structure.


 -- REGTYPE: operator_specifier/1:
     The type and associativity of an operator is described by the
     following mnemonic atoms:

    `xfx'
          Infix, non-associative: it is a requirement that both of
          the two subexpressions which are the arguments of the
          operator must be of _lower_ precedence than the operator
          itself.

    `xfy'
          Infix, right-associative: only the first (left-hand)
          subexpression must be of lower precedence; the right-hand
          subexpression can be of the _same_ precedence as the main
          operator.

    `yfx'
          Infix, left-associative: same as above, but the other way
          around.

    `fx'
          Prefix, non-associative: the subexpression must be of
          _lower_ precedence than the operator.

    `fy'
          Prefix, associative: the subexpression can be of the _same_
          precedence as the operator.

    `xf'
          Postfix, non-associative: the subexpression must be of
          _lower_ precedence than the operator.

    `yf'
          Postfix, associative: the subexpression can be of the
          _same_ precedence as the operator.


     *General properties:* `operator_specifier(X)'
        - _The following properties hold globally:_

          `operator_specifier(X)' is side-effect `free'.   ( `sideff/2')
     `operator_specifier(X)'
        - _If the following properties hold at call time:_

          `X' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `operator_specifier(X)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `operator_specifier(X)' are
          deterministic.   ( `is_det/1')

          Goal `operator_specifier(X)' produces `7' solutions.   ( `relations/2')
     `operator_specifier(T)'
        - _The following properties hold upon exit:_

          `T' specifies the type and associativity of an operator.   ( `operator_specifier/1')

     *Usage:* `operator_specifier(X)'
        - _Description:_ `X' specifies the type and associativity of
          an operator.


 -- REGTYPE: list/1:
     A list is formed with successive applications of the functor
     `'.'/2', and its end is the atom `[]'. Defined as
          list([]).
          list([_1|L]) :-
                  list(L).

     *General properties:* `list(L)'
        - _The following properties hold globally:_

          `list(L)' is side-effect `free'.   ( `sideff/2')
     `list(L)'
        - _If the following properties hold at call time:_

          `L' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `list(L)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `list(L)' are deterministic.   ( `is_det/1')
     `list(T)'
        - _The following properties hold upon exit:_

          `T' is a list.   ( `list/1')

     *Usage:* `list(L)'
        - _Description:_ `L' is a list.


 -- REGTYPE: list/2:
     `list(L,T)'

     `L' is a list, and for all its elements, `T' holds.

     _Meta-predicate_ with arguments: `list(?,(pred 1))'.

     *General properties:* `list(L,T)'
        - _The following properties hold globally:_

          `list(L,T)' is side-effect `free'.   ( `sideff/2')
     `list(L,T)'
        - _If the following properties hold at call time:_

          `L' is currently ground (it contains no variables).   ( `ground/1')

          `T' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `list(L,T)' is evaluable at compile-time.   ( `eval/1')
     `list(X,T)'
        - _The following properties hold upon exit:_

          `X' is a list.   ( `list/1')

     *Usage:* `list(L,T)'
        - _Description:_ `L' is a list of `T's.


 -- REGTYPE: nlist/2:
     _Meta-predicate_ with arguments: `nlist(?,(pred 1))'.

     *General properties:* `nlist(L,T)'
        - _The following properties hold globally:_

          `nlist(L,T)' is side-effect `free'.   ( `sideff/2')
     `nlist(L,T)'
        - _If the following properties hold at call time:_

          `L' is currently ground (it contains no variables).   ( `ground/1')

          `T' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `nlist(L,T)' is evaluable at compile-time.   ( `eval/1')
     `nlist(X,T)'
        - _The following properties hold upon exit:_

          `X' is any term.   ( `term/1')

     *Usage:* `nlist(L,T)'
        - _Description:_ `L' is `T' or a nested list of `T's. Note
          that if `T' is term, this type is equivalent to term, this
          fact explain why we do not have a `nlist/1' type


 -- PROPERTY: member/2:
     *General properties:* `member(X,L)'
        - _The following properties hold globally:_

          `member(X,L)' is side-effect `free'.   ( `sideff/2')

          `member(X,L)' is binding insensitive.   ( `bind_ins/1')
     `member(X,L)'
        - _If the following properties hold at call time:_

          `L' is a list.   ( `list/1')

          _then the following properties hold globally:_

          `member(X,L)' is evaluable at compile-time.   ( `eval/1')
     `member(_X,L)'
        - _The following properties hold upon exit:_

          `L' is a list.   ( `list/1')
     `member(X,L)'
        - _If the following properties hold at call time:_

          `L' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold upon exit:_

          `X' is currently ground (it contains no variables).   ( `ground/1')

     *Usage:* `member(X,L)'
        - _Description:_ `X' is an element of `L'.


 -- REGTYPE: sequence/2:
     A sequence is formed with zero, one or more occurrences of the
     operator `','/2'. For example, `a, b, c' is a sequence of three
     atoms, `a' is a sequence of one atom.

     _Meta-predicate_ with arguments: `sequence(?,(pred 1))'.

     *General properties:* `sequence(S,T)'
        - _The following properties hold globally:_

          `sequence(S,T)' is side-effect `free'.   ( `sideff/2')
     `sequence(S,T)'
        - _If the following properties hold at call time:_

          `S' is currently ground (it contains no variables).   ( `ground/1')

          `T' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `sequence(S,T)' is evaluable at compile-time.   ( `eval/1')
     `sequence(E,T)'
        - _The following properties hold upon exit:_

          `E' is currently a term which is not a free variable.   ( `nonvar/1')

          `T' is currently ground (it contains no variables).   ( `ground/1')

     *Usage:* `sequence(S,T)'
        - _Description:_ `S' is a sequence of `T's.


 -- REGTYPE: sequence_or_list/2:
     _Meta-predicate_ with arguments: `sequence_or_list(?,(pred 1))'.

     *General properties:* `sequence_or_list(S,T)'
        - _The following properties hold globally:_

          `sequence_or_list(S,T)' is side-effect `free'.   ( `sideff/2')
     `sequence_or_list(S,T)'
        - _If the following properties hold at call time:_

          `S' is currently ground (it contains no variables).   ( `ground/1')

          `T' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `sequence_or_list(S,T)' is evaluable at compile-time.   ( `eval/1')
     `sequence_or_list(E,T)'
        - _The following properties hold upon exit:_

          `E' is currently a term which is not a free variable.   ( `nonvar/1')

          `T' is currently ground (it contains no variables).   ( `ground/1')

     *Usage:* `sequence_or_list(S,T)'
        - _Description:_ `S' is a sequence or list of `T's.


 -- REGTYPE: character_code/1:
     *General properties:* `character_code(T)'
        - _The following properties hold globally:_

          `character_code(T)' is side-effect `free'.   ( `sideff/2')
     `character_code(T)'
        - _If the following properties hold at call time:_

          `T' is currently a term which is not a free variable.   ( `nonvar/1')

          _then the following properties hold globally:_

          `character_code(T)' is evaluable at compile-time.   ( `eval/1')
     `character_code(I)'
        - _The following properties hold upon exit:_

          `I' is an integer which is a character code.   ( `character_code/1')

     *Usage:* `character_code(T)'
        - _Description:_ `T' is an integer which is a character code.


 -- REGTYPE: string/1:
     A string is a list of character codes. The usual syntax for
     strings `"string"' is allowed, which is equivalent to
     `[0's,0't,0'r,0'i,0'n,0'g]' or `[115,116,114,105,110,103]'.
     There is also a special Ciao syntax when the list is not
     complete: `"st"||R' is equivalent to `[0's,0't|R]'.

     *General properties:* `string(T)'
        - _The following properties hold globally:_

          `string(T)' is side-effect `free'.   ( `sideff/2')
     `string(T)'
        - _If the following properties hold at call time:_

          `T' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `string(T)' is evaluable at compile-time.   ( `eval/1')
     `string(T)'
        - _The following properties hold upon exit:_

          `T' is a string (a list of character codes).   ( `string/1')

     *Usage:* `string(T)'
        - _Description:_ `T' is a string (a list of character codes).


 -- REGTYPE: num_code/1:
     These are the ASCII codes which can appear in decimal
     representation of floating point and integer numbers, including
     scientific notation and fractionary part.


 -- REGTYPE: predname/1:
     *General properties:* `predname(P)'
        - _The following properties hold globally:_

          `predname(P)' is side-effect `free'.   ( `sideff/2')
     `predname(P)'
        - _If the following properties hold at call time:_

          `P' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `predname(P)' is evaluable at compile-time.   ( `eval/1')
     `predname(P)'
        - _The following properties hold upon exit:_

          `P' is a Name/Arity structure denoting a predicate name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          ( `predname/1')

     *Usage:* `predname(P)'
        - _Description:_ `P' is a Name/Arity structure denoting a
          predicate name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).


 -- REGTYPE: atm_or_atm_list/1:
     *General properties:* `atm_or_atm_list(T)'
        - _The following properties hold globally:_

          `atm_or_atm_list(T)' is side-effect `free'.   ( `sideff/2')
     `atm_or_atm_list(T)'
        - _If the following properties hold at call time:_

          `T' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `atm_or_atm_list(T)' is evaluable at compile-time.   ( `eval/1')
     `atm_or_atm_list(T)'
        - _The following properties hold upon exit:_

          `T' is an atom or a list of atoms.   ( `atm_or_atm_list/1')

     *Usage:* `atm_or_atm_list(T)'
        - _Description:_ `T' is an atom or a list of atoms.


 -- PROPERTY: compat/2:
     This property captures the notion of type or property
     compatibility. The instantiation or constraint state of the term
     is compatible with the given property, in the sense that
     assuming that imposing that property on the term does not render
     the store inconsistent. For example, terms `X' (i.e., a free
     variable), `[Y|Z]', and `[Y,Z]' are all compatible with the
     regular type `list/1', whereas the terms `f(a)' and `[1|2]' are
     not.

     _Meta-predicate_ with arguments: `compat(?,(pred 1))'.

     *General properties:* `compat(Term,Prop)'
        - _If the following properties hold at call time:_

          `Term' is currently ground (it contains no variables).   ( `ground/1')

          `Prop' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `compat(Term,Prop)' is evaluable at compile-time.   ( `eval/1')

     *Usage:* `compat(Term,Prop)'
        - _Description:_ `Term' is _compatible_ with `Prop'


 -- PROPERTY: inst/2:
     _Meta-predicate_ with arguments: `inst(?,(pred 1))'.

     *General properties:* `inst(Term,Prop)'
        - _The following properties hold globally:_

          `inst(Term,Prop)' is side-effect `free'.   ( `sideff/2')
     `inst(Term,Prop)'
        - _If the following properties hold at call time:_

          `Term' is currently ground (it contains no variables).   ( `ground/1')

          `Prop' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `inst(Term,Prop)' is evaluable at compile-time.   ( `eval/1')

     *Usage:* `inst(Term,Prop)'
        - _Description:_ `Term' is instantiated enough to satisfy
          `Prop'.


 -- PROPERTY: iso/1:
     _Meta-predicate_ with arguments: `iso(goal)'.

     *General properties:* `iso(G)'
        - _The following properties hold globally:_

          `iso(G)' is side-effect `free'.   ( `sideff/2')

     *Usage:* `iso(G)'
        - _Description:_ _Complies with the ISO-Prolog standard._


 -- PROPERTY: deprecated/1:
     Specifies that the predicate marked with this global property
     has been deprecated, i.e., its use is not recommended any more
     since it will be deleted at a future date. Typically this is
     done because its functionality has been superseded by another
     predicate.

     _Meta-predicate_ with arguments: `deprecated(goal)'.

     *General properties:* `deprecated(G)'
        - _The following properties hold globally:_

          `deprecated(G)' is side-effect `free'.   ( `sideff/2')

     *Usage:* `deprecated(G)'
        - _Description:_ *DEPRECATED.*


 -- PROPERTY: not_further_inst/2:
     _Meta-predicate_ with arguments: `not_further_inst(goal,?)'.

     *General properties:* `not_further_inst(G,V)'
        - _The following properties hold globally:_

          `not_further_inst(G,V)' is side-effect `free'.   ( `sideff/2')

     *Usage:* `not_further_inst(G,V)'
        - _Description:_ `V' is not further instantiated.


 -- PROPERTY: sideff/2:
     `sideff(G,X)'

     Declares that `G' is side-effect free (if its execution has no
     observable result other than its success, its failure, or its
     abortion), soft (if its execution may have other observable
     results which, however, do not affect subsequent execution,
     e.g., input/output), or hard (e.g., assert/retract).

     _Meta-predicate_ with arguments: `sideff(goal,?)'.

     *General properties:* `sideff(G,X)'
        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')

          `sideff(G,X)' is side-effect `free'.   ( `sideff/2')

     *Usage:* `sideff(G,X)'
        - _Description:_ `G' is side-effect `X'.

        - _If the following properties hold at call time:_

          `X' is an element of `[free,soft,hard]'.   ( `member/2')


 -- PROPERTY: regtype/1:
     _Meta-predicate_ with arguments: `regtype goal'.

     *General properties:* `regtype G'
        - _The following properties hold globally:_

          `regtype G' is side-effect `free'.   ( `sideff/2')

     *Usage:* `regtype G'
        - _Description:_ Defines a regular type.


 -- PROPERTY: native/1:
     _Meta-predicate_ with arguments: `native(goal)'.

     *General properties:* `native(P)'
        - _The following properties hold globally:_

          `native(P)' is side-effect `free'.   ( `sideff/2')

     *Usage:* `native(Pred)'
        - _Description:_ This predicate is understood natively by
          CiaoPP.


 -- PROPERTY: native/2:
     _Meta-predicate_ with arguments: `native(goal,?)'.

     *General properties:* `native(P,K)'
        - _The following properties hold globally:_

          `native(P,K)' is side-effect `free'.   ( `sideff/2')

     *Usage:* `native(Pred,Key)'
        - _Description:_ This predicate is understood natively by
          CiaoPP as `Key'.


 -- PROPERTY: no_rtcheck/1:
     _Meta-predicate_ with arguments: `no_rtcheck(goal)'.

     *General properties:* `no_rtcheck(G)'
        - _The following properties hold globally:_

          `no_rtcheck(G)' is side-effect `free'.   ( `sideff/2')

     *Usage:* `no_rtcheck(G)'
        - _Description:_ Declares that the assertion in which this
          comp property appears must not be checked at run-time.


 -- PROPERTY: eval/1:
     _Meta-predicate_ with arguments: `eval(goal)'.

     *Usage:* `eval(Goal)'
        - _Description:_ `Goal' is evaluable at compile-time.


 -- PROPERTY: equiv/2:
     _Meta-predicate_ with arguments: `equiv(goal,goal)'.

     *Usage:* `equiv(Goal1,Goal2)'
        - _Description:_ `Goal1' is equivalent to `Goal2'.


 -- PROPERTY: bind_ins/1:
     _Meta-predicate_ with arguments: `bind_ins(goal)'.

     *Usage:* `bind_ins(Goal)'
        - _Description:_ `Goal' is binding insensitive.


 -- PROPERTY: error_free/1:
     _Meta-predicate_ with arguments: `error_free(goal)'.

     *Usage:* `error_free(Goal)'
        - _Description:_ `Goal' is error free.


 -- PROPERTY: memo/1:
     _Meta-predicate_ with arguments: `memo(goal)'.

     *Usage:* `memo(Goal)'
        - _Description:_ `Goal' should be memoized (not unfolded).


 -- PROPERTY: filter/2:
     *Usage:* `filter(Vars,Goal)'
        - _Description:_ `Vars' should be filtered during global
          control).


 -- REGTYPE: flag_values/1:
     *Usage:* `flag_values(X)'
        - _Description:_ Define the valid flag values


 -- PROPERTY: pe_type/1:
     _Meta-predicate_ with arguments: `pe_type(goal)'.

     *Usage:* `pe_type(Goal)'
        - _Description:_ `Goal' will be filtered in partial
          evaluation time according to the PE types defined in the
          assertion.



File: lpdoc-3.0.0.info.tmp,  Node: Properties which are native to analyzers,  Next: Meta-properties,  Prev: Basic data types and properties,  Up: Top

8 Properties which are native to analyzers
******************************************

*Author(s):* Francisco Bueno, Manuel Hermenegildo, Pedro Lo'pez, Edison
Mera.

   This library contains a set of properties which are natively
understood by the different program analyzers of `ciaopp'. They are
used by `ciaopp' on output and they can also be used as properties in
assertions.

* Menu:

* Usage and interface (native_props)::
* Documentation on exports (native_props)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (native_props),  Next: Documentation on exports (native_props),  Prev: Properties which are native to analyzers,  Up: Properties which are native to analyzers

8.1 Usage and interface (`native_props')
========================================

   * *Library usage:*

     `:- use_module(library(assertions(native_props)))'

     or also as a package `:- use_package(nativeprops)'.

     Note the different names of the library and the package.

   * *Exports:*

        - _Properties:_

          `clique/1', `clique_1/1', `constraint/1', `covered/1', `covered/2', `exception/1', `exception/2', `fails/1', `finite_solutions/1', `have_choicepoints/1', `indep/1', `indep/2', `is_det/1', `linear/1', `mshare/1', `mut_exclusive/1', `no_choicepoints/1', `no_exception/1', `no_exception/2', `no_signal/1', `no_signal/2', `non_det/1', `nonground/1', `not_covered/1', `not_fails/1', `not_mut_exclusive/1', `num_solutions/2', `solutions/2', `possibly_fails/1', `possibly_nondet/1', `relations/2', `sideff_hard/1', `sideff_pure/1', `sideff_soft/1', `signal/1', `signal/2', `signals/2', `size/2', `size/3', `size_lb/2', `size_o/2', `size_ub/2', `size_metric/3', `size_metric/4', `steps/2', `steps_lb/2', `steps_o/2', `steps_ub/2', `tau/1', `terminates/1', `test_type/2', `throws/2', `user_output/2'.

   * *Other modules used:*

        - _System library modules:_

          `terms_check', `terms_vars', `sort', `lists', `streams', `file_utils', `system'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support', `internals'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (native_props),  Prev: Usage and interface (native_props),  Up: Properties which are native to analyzers

8.2 Documentation on exports (`native_props')
=============================================

 -- PROPERTY: clique/1:
     `clique(X)'

     `X' is a set of variables of interest, much the same as a
     sharing group but `X' represents all the sharing groups in the
     powerset of those variables. Similar to a sharing group, a
     clique is often translated to `ground/1', `indep/1', and `indep/2'
     properties.

     *Usage:* `clique(X)'
        - _Description:_ The clique pattern is ``X''.

        - _The following properties should hold globally:_

          This predicate is understood natively by CiaoPP as
          `clique(X)'.   ( `native/2')


 -- PROPERTY: clique_1/1:
     `clique_1(X)'

     `X' is a set of variables of interest, much the same as a
     sharing group but `X' represents all the sharing groups in the
     powerset of those variables but disregarding the singletons.
     Similar to a sharing group, a clique_1 is often translated to `ground/1', `indep/1',
     and `indep/2' properties.

     *Usage:* `clique_1(X)'
        - _Description:_ The 1-clique pattern is ``X''.

        - _The following properties should hold globally:_

          This predicate is understood natively by CiaoPP as
          `clique_1(X)'.   ( `native/2')


 -- PROPERTY: constraint/1:
     `constraint(C)'

     `C' contains a list of linear (in)equalities that relate
     variables and `int' values. For example, `[A < B + 4]' is a
     constraint while `[A < BC + 4]' or `[A = 3.4, B >= C]' are not.

     *Usage:* `constraint(C)'
        - _Description:_ `C' is a list of linear equations

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- PROPERTY: covered/1:
     `covered(X)'

     For any call of the form `X' there is at least one clause whose
     test succeeds (i.e., all the calls of the form `X' are covered)
     [DLGH97].

     *Usage:* `covered(X)'
        - _Description:_ All the calls of the form `X' are covered.


 -- PROPERTY: covered/2:
     `covered(X,Y)'

     All variables occuring in `X' occur also in `Y'.

     *Usage:* `covered(X,Y)'
        - _Description:_ `X' is covered by `Y'.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- PROPERTY: exception/1:
     _Meta-predicate_ with arguments: `exception(goal)'.

     *Usage:* `exception(Goal)'
        - _Description:_ Calls of the form `Goal' throw an exception.


 -- PROPERTY: exception/2:
     _Meta-predicate_ with arguments: `exception(goal,?)'.

     *Usage:* `exception(Goal,E)'
        - _Description:_ Calls of the form `Goal' throw an exception
          that unifies with `E'.


 -- PROPERTY: fails/1:
     `fails(X)'

     Calls of the form `X' fail.

     _Meta-predicate_ with arguments: `fails(goal)'.

     *Usage:* `fails(X)'
        - _Description:_ Calls of the form `X' fail.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- PROPERTY: finite_solutions/1:
     `finite_solutions(X)'

     Calls of the form `X' produce a finite number of solutions
     [DLGH97].

     _Meta-predicate_ with arguments: `finite_solutions(goal)'.

     *Usage:* `finite_solutions(X)'
        - _Description:_ All the calls of the form `X' have a finite
          number of solutions.


 -- PROPERTY: have_choicepoints/1:
     _Meta-predicate_ with arguments: `have_choicepoints(goal)'.

     *Usage:* `have_choicepoints(X)'
        - _Description:_ A call to `X' creates choicepoints.


 -- PROPERTY: indep/1:
     *Usage:* `indep(X)'
        - _Description:_ The variables in pairs in ``X'' are pairwise
          independent.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP as
          `indep(X)'.   ( `native/2')


 -- PROPERTY: indep/2:
     *Usage:* `indep(X,Y)'
        - _Description:_ `X' and `Y' do not have variables in common.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP as
          `indep([[X,Y]])'.   ( `native/2')


 -- PROPERTY: is_det/1:
     `is_det(X)'

     All calls of the form `X' are deterministic, i.e., produce at
     most one solution, or do not terminate. In other words, if `X'
     succeeds, it can only succeed once. It can still leave choice
     points after its execution, but when backtracking into these, it
     can only fail or go into an infinite loop.

     _Meta-predicate_ with arguments: `is_det(goal)'.

     *Usage:* `is_det(X)'
        - _Description:_ All calls of the form `X' are deterministic.


 -- PROPERTY: linear/1:
     `linear(X)'

     `X' is bound to a term which is linear, i.e., if it contains any
     variables, such variables appear only once in the term. For
     example, `[1,2,3]' and `f(A,B)' are linear terms, while `f(A,A)'
     is not.

     *Usage:* `linear(X)'
        - _Description:_ `X' is instantiated to a linear term.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- PROPERTY: mshare/1:
     `mshare(X)'

     `X' contains all _sharing sets_ [JL88,MH89] which specify the
     possible variable occurrences in the terms to which the
     variables involved in the clause may be bound. Sharing sets are
     a compact way of representing groundness of variables and
     dependencies between variables. This representation is however
     generally difficult to read for humans. For this reason, this
     information is often translated to `ground/1', `indep/1' and `indep/2'
     properties, which are easier to read.

     *Usage:* `mshare(X)'
        - _Description:_ The sharing pattern is ``X''.

        - _The following properties should hold globally:_

          This predicate is understood natively by CiaoPP as
          `sharing(X)'.   ( `native/2')


 -- PROPERTY: mut_exclusive/1:
     `mut_exclusive(X)'

     For any call of the form `X' at most one clause succeeds, i.e.,
     clauses are pairwise exclusive.

     _Meta-predicate_ with arguments: `mut_exclusive(goal)'.

     *Usage:* `mut_exclusive(X)'
        - _Description:_ For any call of the form `X' at most one
          clause succeeds.


 -- PROPERTY: no_choicepoints/1:
     _Meta-predicate_ with arguments: `no_choicepoints(goal)'.

     *Usage:* `no_choicepoints(X)'
        - _Description:_ A call to `X' does not create choicepoints.


 -- PROPERTY: no_exception/1:
     _Meta-predicate_ with arguments: `no_exception(goal)'.

     *Usage:* `no_exception(Goal)'
        - _Description:_ Calls of the form `Goal' do not throw any
          exception.


 -- PROPERTY: no_exception/2:
     _Meta-predicate_ with arguments: `no_exception(goal,?)'.

     *Usage:* `no_exception(Goal,E)'
        - _Description:_ Calls of the form `Goal' do not throw
          exception `E'.


 -- PROPERTY: no_signal/1:
     _Meta-predicate_ with arguments: `no_signal(goal)'.

     *Usage:* `no_signal(Goal)'
        - _Description:_ Calls of the form `Goal' do not send any
          signal.


 -- PROPERTY: no_signal/2:
     _Meta-predicate_ with arguments: `no_signal(goal,?)'.

     *Usage:* `no_signal(Goal,E)'
        - _Description:_ Calls of the form `Goal' do not send the
          signal `E'.


 -- PROPERTY: non_det/1:
     `non_det(X)'

     All calls of the form `X' are non-deterministic, i.e., produce
     several solutions.

     _Meta-predicate_ with arguments: `non_det(goal)'.

     *Usage:* `non_det(X)'
        - _Description:_ All calls of the form `X' are
          non-deterministic.


 -- PROPERTY: nonground/1:
     *Usage:* `nonground(X)'
        - _Description:_ ``X'' is not ground.

        - _The following properties should hold globally:_

          This predicate is understood natively by CiaoPP as
          `not_ground(X)'.   ( `native/2')


 -- PROPERTY: not_covered/1:
     `not_covered(X)'

     There is some call of the form `X' for which there is no clause
     whose test succeeds [DLGH97].

     *Usage:* `not_covered(X)'
        - _Description:_ Not all of the calls of the form `X' are
          covered.


 -- PROPERTY: not_fails/1:
     `not_fails(X)'

     Calls of the form `X' produce at least one solution, or do not
     terminate [DLGH97].

     _Meta-predicate_ with arguments: `not_fails(goal)'.

     *Usage:* `not_fails(X)'
        - _Description:_ All the calls of the form `X' do not fail.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- PROPERTY: not_mut_exclusive/1:
     `not_mut_exclusive(X)'

     For calls of the form `X' more than one clause may succeed.
     I.e., clauses are not disjoint for some call.

     _Meta-predicate_ with arguments: `not_mut_exclusive(goal)'.

     *Usage:* `not_mut_exclusive(X)'
        - _Description:_ For some calls of the form `X' more than one
          clause may succeed.


 -- PROPERTY: num_solutions/2:
     *Usage 1:* `num_solutions(X,N)'
        - _Description:_ All the calls of the form `X' have `N'
          solutions.

        - _If the following properties should hold at call time:_

          `X' is a term which represents a goal, i.e., an atom or a
          structure.   ( `callable/1')

          `N' is an integer.   ( `int/1')

     *Usage 2:* `num_solutions(Goal,Check)'
        - _Description:_ For a call to `Goal', `Check(X)' succeeds,
          where `X' is the number of solutions.

        - _If the following properties should hold at call time:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   ( `callable/1')

          `Check' is a term which represents a goal, i.e., an atom or
          a structure.   ( `callable/1')


 -- PROPERTY: solutions/2:
     *Usage:* `solutions(Goal,Sols)'
        - _Description:_ Goal `Goal' produces the solutions listed in
          `Sols'.

        - _If the following properties should hold at call time:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   ( `callable/1')

          `Sols' is a list.   ( `list/1')


 -- PROPERTY: possibly_fails/1:
     `possibly_fails(X)'

     Non-failure is not ensured for any call of the form `X'
     [DLGH97]. In other words, nothing can be ensured about
     non-failure nor termination of such calls.

     _Meta-predicate_ with arguments: `possibly_fails(goal)'.

     *Usage:* `possibly_fails(X)'
        - _Description:_ Non-failure is not ensured for calls of the
          form `X'.


 -- PROPERTY: possibly_nondet/1:
     `possibly_nondet(X)'

     Non-determinism is not ensured for all calls of the form `X'. In
     other words, nothing can be ensured about determinacy nor
     termination of such calls.

     *Usage:* `possibly_nondet(X)'
        - _Description:_ Non-determinism is not ensured for calls of
          the form `X'.


 -- PROPERTY: relations/2:
     `relations(X,N)'

     The goal `X' produces `N' solutions. In other words, `N' is the
     cardinality of the solution set of `X'.

     _Meta-predicate_ with arguments: `relations(goal,?)'.

     *Usage:* `relations(X,N)'
        - _Description:_ Goal `X' produces `N' solutions.


 -- PROPERTY: sideff_hard/1:
     _Meta-predicate_ with arguments: `sideff_hard(goal)'.

     *Usage:* `sideff_hard(X)'
        - _Description:_ `X' has _hard side-effects_, i.e., those
          that might affect program execution (e.g., assert/retract).


 -- PROPERTY: sideff_pure/1:
     _Meta-predicate_ with arguments: `sideff_pure(goal)'.

     *Usage:* `sideff_pure(X)'
        - _Description:_ `X' is pure, i.e., has no side-effects.


 -- PROPERTY: sideff_soft/1:
     _Meta-predicate_ with arguments: `sideff_soft(goal)'.

     *Usage:* `sideff_soft(X)'
        - _Description:_ `X' has _soft side-effects_, i.e., those not
          affecting program execution (e.g., input/output).


 -- PROPERTY: signal/1:
     _Meta-predicate_ with arguments: `signal(goal)'.

     *Usage:* `signal(Goal)'
        - _Description:_ Calls of the form `Goal' throw a signal.


 -- PROPERTY: signal/2:
     _Meta-predicate_ with arguments: `signal(goal,?)'.

     *Usage:* `signal(Goal,E)'
        - _Description:_ A call to `Goal' sends a signal that unifies
          with `E'.


 -- PROPERTY: signals/2:
     _Meta-predicate_ with arguments: `signals(goal,?)'.

     *Usage:* `signals(Goal,Es)'
        - _Description:_ Calls of the form `Goal' can generate only
          the signals that unify with the terms listed in `Es'.


 -- PROPERTY: size/2:
     *Usage:* `size(X,Y)'
        - _Description:_ `Y' is the size of argument `X', for any
          approximation.


 -- PROPERTY: size/3:
     *Usage:* `size(A,X,Y)'
        - _Description:_ `Y' is the size of argument `X', for the
          approximation `A'.


 -- PROPERTY: size_lb/2:
     `size_lb(X,Y)'

     The minimum size of the terms to which the argument `Y' is bound
     is given by the expression `Y'. Various measures can be used to
     determine the size of an argument, e.g., list-length, term-size,
     term-depth, integer-value, etc. [DL93,LGHD96].

     *Usage:* `size_lb(X,Y)'
        - _Description:_ `Y' is a lower bound on the size of argument
          `X'.


 -- PROPERTY: size_o/2:
     *Usage:* `size_o(X,Y)'
        - _Description:_ The size of argument `X' is in the order of
          `Y'.


 -- PROPERTY: size_ub/2:
     `size_ub(X,Y)'

     The maximum size of the terms to which the argument `Y' is bound
     is given by the expression `Y'. Various measures can be used to
     determine the size of an argument, e.g., list-length, term-size,
     term-depth, integer-value, etc. [DL93,LGHD96].

     *Usage:* `size_ub(X,Y)'
        - _Description:_ `Y' is a upper bound on the size of argument
          `X'.


 -- PROPERTY: size_metric/3:
     _Meta-predicate_ with arguments: `size_metric(goal,?,?)'.

     *Usage:* `size_metric(Head,Var,Metric)'
        - _Description:_ `Metric' is the metric of the variable
          `Var', for any approximation.


 -- PROPERTY: size_metric/4:
     _Meta-predicate_ with arguments: `size_metric(goal,?,?,?)'.

     *Usage:* `size_metric(Head,Approx,Var,Metric)'
        - _Description:_ `Metric' is the metric of the variable
          `Var', for the approximation `Approx'. Currently, `Metric'
          can be: `int/1', `size/1', `length/1', `depth/2', and
          `void/1'.


 -- PROPERTY: steps/2:
     `steps(X,Y)'

     The time (in resolution steps) spent by any call of the form `X'
     is given by the expression `Y'

     _Meta-predicate_ with arguments: `steps(goal,?)'.

     *Usage:* `steps(X,Y)'
        - _Description:_ `Y' is the cost (number of resolution steps)
          of any call of the form `X'.


 -- PROPERTY: steps_lb/2:
     `steps_lb(X,Y)'

     The minimum computation time (in resolution steps) spent by any
     call of the form `X' is given by the expression `Y'
     [DLGHL97,LGHD96]

     _Meta-predicate_ with arguments: `steps_lb(goal,?)'.

     *Usage:* `steps_lb(X,Y)'
        - _Description:_ `Y' is a lower bound on the cost of any call
          of the form `X'.


 -- PROPERTY: steps_o/2:
     _Meta-predicate_ with arguments: `steps_o(goal,?)'.

     *Usage:* `steps_o(X,Y)'
        - _Description:_ `Y' is the complexity order of the cost of
          any call of the form `X'.


 -- PROPERTY: steps_ub/2:
     `steps_ub(X,Y)'

     The maximum computation time (in resolution steps) spent by any
     call of the form `X' is given by the expression `Y'
     [DL93,LGHD96].

     _Meta-predicate_ with arguments: `steps_ub(goal,?)'.

     *Usage:* `steps_ub(X,Y)'
        - _Description:_ `Y' is a upper bound on the cost of any call
          of the form `X'.


 -- PROPERTY: tau/1:
     `tau(Types)'

     `Types' contains a list with the type associations for each
     variable, in the form `V/[T1,..,TN]'. Note that tau is used in
     object-oriented programs only

     *Usage:* `tau(TypeInfo)'
        - _Description:_ `Types' is a list of associations between
          variables and list of types

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')


 -- PROPERTY: terminates/1:
     `terminates(X)'

     Calls of the form `X' always terminate [DLGH97].

     _Meta-predicate_ with arguments: `terminates(goal)'.

     *Usage:* `terminates(X)'
        - _Description:_ All calls of the form `X' terminate.


 -- PROPERTY: test_type/2:
     _Meta-predicate_ with arguments: `test_type(goal,?)'.

     *Usage:* `test_type(X,T)'
        - _Description:_ Indicates the type of test that a predicate
          performs. Required by the nonfailure analyisis.


 -- PROPERTY: throws/2:
     _Meta-predicate_ with arguments: `throws(goal,?)'.

     *Usage:* `throws(Goal,Es)'
        - _Description:_ Calls of the form `Goal' can throw only the
          exceptions that unify with the terms listed in `Es'.


 -- PROPERTY: user_output/2:
     _Meta-predicate_ with arguments: `user_output(goal,?)'.

     *Usage:* `user_output(Goal,S)'
        - _Description:_ Calls of the form `Goal' write `S' to
          standard output.


 -- PROPERTY: instance/2:
     *Usage:* `instance(Term1,Term2)'
        - _Description:_ `Term1' is an instance of `Term2'.

        - _The following properties hold globally:_

          This predicate is understood natively by CiaoPP.   ( `native/1')



File: lpdoc-3.0.0.info.tmp,  Node: Meta-properties,  Next: An Example - Documenting a Library Module,  Prev: Properties which are native to analyzers,  Up: Top

9 Meta-properties
*****************

*Author(s):* Francisco Bueno.

   This library allows the use of some meta-constructs which provide
for specifying properties of terms which are unknown at the time of
the specification, or expressed with a shorthand for the property
definition, i.e., without really defining it.

   An example of such use is an assertion which specifies that any
property holding upon call will also hold upon exit:
              :- pred p(X) : Prop(X) => Prop(X).

   Another example is using shorthands for properties when
documenting:
              :- pred p(X) : regtype(X,(^(list;list);list)).

   (See below for an explanation of such a regular type.)

* Menu:

* Usage and interface (meta_props)::
* Documentation on exports (meta_props)::
* Documentation on multifiles (meta_props)::
* Documentation on internals (meta_props)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (meta_props),  Next: Documentation on exports (meta_props),  Prev: Meta-properties,  Up: Meta-properties

9.1 Usage and interface (`meta_props')
======================================

   * *Library usage:*

     `:- use_module(library(assertions(meta_props)))'

     or also as a package `:- use_package(metaprops)'.

     Note the different names of the library and the package.

   * *Exports:*

        - _Properties:_

          `call/2', `prop/2', `regtype/2'.

        - _Multifiles:_

          `callme/2'.

   * *Other modules used:*

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (meta_props),  Next: Documentation on multifiles (meta_props),  Prev: Usage and interface (meta_props),  Up: Meta-properties

9.2 Documentation on exports (`meta_props')
===========================================

 -- PROPERTY: call/2:
     `call(P,A)'

     `A' has property `P' (provided that `P' is a property).
     Equivalent to `P(A)'.

     *Usage:* `call(P,A)'
        - _Description:_ `A' has property `P'.

        - _If the following properties hold at call time:_

          `P' is a term which represents a goal, i.e., an atom or a
          structure.   ( `callable/1')


 -- PROPERTY: prop/2:
     *Usage:* `A prop P'
        - _Description:_ `A' has property `P'.

        - _If the following properties hold at call time:_

          `P' has property `^ (callable;prop_abs)'.   ( `(prop)/2')


 -- PROPERTY: regtype/2:
     *Usage:* `A regtype T'
        - _Description:_ `A' is of type `T'.

        - _If the following properties hold at call time:_

          `T' has property `^ ((regtype);prop_abs)'.   ( `(prop)/2')



File: lpdoc-3.0.0.info.tmp,  Node: Documentation on multifiles (meta_props),  Next: Documentation on internals (meta_props),  Prev: Documentation on exports (meta_props),  Up: Meta-properties

9.3 Documentation on multifiles (`meta_props')
==============================================

 -- PREDICATE: callme/2:
     (User defined.) A hook predicate you have to define as
     `callme(P,X):- P(X), !.' in the program that uses this library.
     This is done automatically if the package is used instead of the
     library module (but then you _should not_ define `callme/2' in
     your program).

     The predicate is _multifile_.

     *Usage:* `callme(A,B)'
        - _The following properties should hold at call time:_

          `A' is a term which represents a goal, i.e., an atom or a
          structure.   ( `callable/1')



File: lpdoc-3.0.0.info.tmp,  Node: Documentation on internals (meta_props),  Prev: Documentation on multifiles (meta_props),  Up: Meta-properties

9.4 Documentation on internals (`meta_props')
=============================================

 -- PROPERTY: prop_abs/1:
     `prop_abs(Prop)'

     `Prop' is a _property abstraction_, i.e., a _parametric
     property_, or a term formed of property abstractions, where the
     functors used in the term are escaped by `^'.

     One particular case of property abstractions are _parametric
     regular type abstractions_, i.e., a parametric type functor or a
     `^'-escaped term formed of regular type abstractions.

     Such abstractions are a short-hand for a corresponding regular
     type (correspondingly, property). For example, the following
     abstraction:
                   ^(list;list);list
     denotes terms of the form `(X;Y)' where `list(X)' and `list(Y)'
     hold and also terms `T' such that `list(T)' holds. It is
     equivalent to the regular type:
                   abstract_type((X;Y)):- list(X), list(Y).
                   abstract_type(T):- list(T).

     *Usage:* `prop_abs(Prop)'
        - _Description:_ `Prop' is a property abstraction.



File: lpdoc-3.0.0.info.tmp,  Node: An Example - Documenting a Library Module,  Next: Auto Documenter Output for the Example Module,  Prev: Meta-properties,  Up: Top

10 An Example - Documenting a Library Module
********************************************

*Author(s):* Manuel Hermenegildo.

   A simple example of the use of `lpdoc' is this manual, which can
be built in the `doc' directory of the `lpdoc' distribution. Other
examples of manuals generated using `lpdoc' can be found in the `Ciao'
system and preprocessor `doc' directories (i.e., most of the `Ciao'
manuals are generated using `lpdoc'). Some simpler examples can be
found in the `examples' directory of the `lpdoc' distribution. In
particular, the chapter following this one contains the documentation
generated automatically for the module defined by file
`examples/example_module.pl' (which for simplicity contains only
assertions, i.e., no actual code) and which is included in source
form below. Comparing this code with the output in the following
chapter illustrates the use and some of the capabilities of `lpdoc':

     %% The module headers produce documentation on the module interface
     %% Exported predicates (+ properties and types) are documented by default
     :- module(example_module,
               [bar/1,baz/1,aorb/1,tree_of/2,list_or_aorb/2,q/2,r/1, p/1, p/5, u/3,
                long/1, w/1, mytype/1, t/5, s/1, q/1],
               [assertions,basicmodes,fsyntax,regtypes,hiord,nativeprops]).

     %% We import two types: list/1 and list/2 (now in basic_props, which is
     %% exported by default from assertions).

     %% We reexport list/1
     :- reexport(library(engine(basic_props)),[ list/1 ]).

     :- use_module(library(lists), [length/2]).
     %:- use_module(bar).
     :- ensure_loaded(foo).

     %% "doc" declarations provide additional information
     :- doc(title,"Auto Documenter Output for the Example Module").

     :- doc(author,"Anonymous Author 1").
     :- doc(author,"Anonymous Author 2").

     :- doc(summary,"This is a brief summary description of the module
        or file. In this case the file is a library.").

     :- doc(module,"This is where general comments on the file go. In
        this case the file is a library which contains some assertion examples
        for testing the @em{automatic documentation system}. ").

     %% An example of a comment documenting a bug
     :- doc(bug,"Library is hard to execute: no actual code!").

     %% Standard declarations are documented with the corresponding predicate
     :- data r/1.
     :- dynamic q/2.
     :- multifile p/3.
     :- dynamic p/3.
     :- meta_predicate p(?,:,?).

     %% Uncommenting this would make these not appear in the documentation
     %% :- doc(hide,[bar/1,baz/1]).

     %% This is a type definition in Prolog syntax: declaration and code
     :- true regtype bar(X) # "@var{X} is an acceptable kind of bar.".

     bar(night).
     bar(day).

     %% This is another type definition in Prolog syntax, with no comment.
     :- true regtype baz/1.

     baz(a).
     baz(b).

     %% Two type definitions in 'typedef' syntax (will be expanded to code as above)
     %% :- typedef aorb ::= ^a;^b.
     %% :- typedef listof_or_aorb(X) ::= list(X);aorb.

     %% Using functional notation:
     :- regtype aorb/1.

     aorb := a.
     aorb := b.

     %% Should use the other function syntax which uses *first argument* for return

     :- regtype tree_of/2.

     tree_of(_) := void.
     tree_of(T) := tree(~call(T),~tree_of(T),~tree_of(T)).

     %% tree_of(_, void).
     %% tree_of(T, tree(X,L,R)) :-
     %%         T(X),
     %%         tree_of(T,L),
     %%         tree_of(T,R).

     :- regtype list_or_aorb/2.

     list_or_aorb(T)  := ~list(T).
     list_or_aorb(_T) := ~aorb.

     %% This is a property definition
     %% This comment appears only in the place where the property itself
     %% is documented.
     :- doc(long/1,"This is a property, describing a list that is longish.
        The definition is:

        @includedef{long/1}

        ").

     %% The comment here will be used to document any predicate which has an
     %% assertion which uses the property
     :- prop long(L) # "@var{L} is rather long.".

     long(L) :-
             length(L,N),
             N>100.

     %% Now, a series of assertions:
     %%
     %% This declares the entry mode of this exported predicate (i.e.,
     %% how it is called from outside).
     :- entry p/3 : gnd * var * var.

     %% This describes all the calls
     :- calls p/3 : foo * bar * baz.

     foo(_).

     %% This describes the successes (for a given type of calls)
     :- success p/3 : int * int * var => int * int * gnd.

     %% This describes a global property (for a given type of calls)
     :- comp p/3 : int * int * var + not_fails.

     :- doc(p/3,"A @bf{general comment} on the predicate." ).
     %% Documenting some typical usages of the predicate
     :- pred p/3
             : int * int * var
            => int * int * list
             + (iso,not_fails)
             # "This mode is nice.".
     :- pred p(Preds,Value,Assoc)
             : var * var * list
            => int * int * list
             + not_fails # "This mode is also nice.".
     :- pred p/3
            => list * int * list
             + (not_fails,not_fails)
             # "Just playing around.".

     :- pred q(A)
             : list(A)
            => (list(A),gnd(A))
             + not_fails
             # "Foo".
     :- pred q(A)
             # "Not a bad use at all.".

     :- pred q/2
             : var * {gnd,int}
            => {gnd,int} * int.
     :- pred q/2
             :: int * list
             # "Non-moded types are best used this way.".

     q(_).

     :- pred p/1 : var => list.

     p(_).

     :- pred r(A)
             : list(A)
            => (list(A,int),gnd(A))
             + not_fails
             # "This uses parametric types".

     :- doc(doinclude,s/1). %% Forces documentation even if not exported
     :- pred s(A)
             : list(A)
            => (list(A),gnd(A))
             + not_fails.

     s(_).

     :- doc(doinclude,[list/2,list/1]). %% Forces (local) documentation even if
                                            %% not exported

     :- modedef og(A)
            => gnd(A)
             # "This is a @em{mode} definition: the output is ground.".

     :- doc(doinclude,og/2).

     :- modedef og(A,T)
             :: T(A)
             => gnd(A)
             #  "This is a @em{parametric mode definition}.".

     :- pred t(+A,-B,?C,@D,og(E))
             :: list * list * int * int * list
             :  long(B)
             => (gnd(C),gnd(A))
             +  not_fails
             #  "This predicate uses @em{modes} extensively.".

     t(_, _, _, _, _).

     %% Some other miscellaneous assertions:

     %% Check is default assertion status anyway...
     :- check pred u(+,-,og).
     :- check pred u(int,list(mytype),int).

     u(_, _, _).

     %% ``true'' status is normally compiler output
     :- true pred w(+list(mytype)).

     mytype(_).

     w(_).

     :- doc(doinclude,is/2).

     :- trust pred is(Num,Expr) : arithexpression(Expr) => num(Num)
        # "Typical way to describe/document an external predicate (e.g.,
           written in C).".

     :- doc(doinclude,p/5).
     :- pred p(og(int),in,@list(int),-,+A) + steps_lb(1+length(A)).

     p(_, _, _, _, _) :- _ is 1.

     %% Version information. The ciao.el emacs mode allows automatic maintenance


File: lpdoc-3.0.0.info.tmp,  Node: Auto Documenter Output for the Example Module,  Next: Run-time checking of assertions,  Prev: An Example - Documenting a Library Module,  Up: Top

11 Auto Documenter Output for the Example Module
************************************************

*Author(s):* Anonymous Author 1, Anonymous Author 2.

   This is where general comments on the file go. In this case the
file is a library which contains some assertion examples for testing
the _automatic documentation system_.

* Menu:

* Usage and interface (example_module)::
* Documentation on exports (example_module)::
* Documentation on multifiles (example_module)::
* Documentation on internals (example_module)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (example_module),  Next: Documentation on exports (example_module),  Prev: Auto Documenter Output for the Example Module,  Up: Auto Documenter Output for the Example Module

11.1 Usage and interface (`example_module')
===========================================

   * *Library usage:*

     `:- use_module(library(example_module)).'

   * *Exports:*

        - _Predicates:_

          `q/2', `r/1', `p/1', `p/5', `u/3', `w/1', `mytype/1', `t/5', `s/1', `q/1'.

        - _Properties:_

          `long/1'.

        - _Regular Types:_

          `bar/1', `baz/1', `aorb/1', `tree_of/2', `list_or_aorb/2'.

        - _Multifiles:_

          `p/3'.

   * *Other modules used:*

        - _Files of module `user':_

          `foo'.

        - _System library modules:_

          `assertions/native_props', `engine/basic_props', `lists'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (example_module),  Next: Documentation on multifiles (example_module),  Prev: Usage and interface (example_module),  Up: Auto Documenter Output for the Example Module

11.2 Documentation on exports (`example_module')
================================================

 -- REGTYPE: bar/1:
     *Usage:* `bar(X)'
        - _Description:_ `X' is an acceptable kind of bar.


 -- REGTYPE: baz/1:
     A regular type, defined as follows:
          baz(a).
          baz(b).


 -- REGTYPE: aorb/1:
     A regular type, defined as follows:
          aorb(a).
          aorb(b).


 -- REGTYPE: tree_of/2:
     A regular type, defined as follows:
          tree_of(_1,void).
          tree_of(T,tree(_1,_2,_3)) :-
                  call(T,_1),
                  tree_of(T,_2),
                  tree_of(T,_3).


 -- REGTYPE: list_or_aorb/2:
     A regular type, defined as follows:
          list_or_aorb(T,_1) :-
                  list(T,_1).
          list_or_aorb(_T,_1) :-
                  aorb(_1).


 -- PREDICATE: q/2:
     The predicate is of type _dynamic_.

     *Usage 1:*
        - _The following properties should hold at call time:_

          `Arg1' is a free variable.   ( `var/1')

          `Arg2' is ground.   ( `gnd/1')

          `Arg2' is an integer.   ( `int/1')

        - _The following properties should hold upon exit:_

          `Arg1' is ground.   ( `gnd/1')

          `Arg1' is an integer.   ( `int/1')

          `Arg2' is an integer.   ( `int/1')

     *Usage 2:*
        - _Description:_ Non-moded types are best used this way.

        - _Call and exit should be compatible with:_

          `Arg1' is an integer.   ( `int/1')

          `Arg2' is a list.   ( `list/1')


 -- PREDICATE: r/1:
     The predicate is of type _data_.

     *Usage:* `r(A)'
        - _Description:_ This uses parametric types

        - _The following properties should hold at call time:_

          `A' is a list.   ( `list/1')

        - _The following properties should hold upon exit:_

          `A' is a list of `int's.   ( `list/2')

          `A' is ground.   ( `gnd/1')

        - _The following properties should hold globally:_

          All the calls of the form `r(A)' do not fail.   ( `not_fails/1')


 -- PREDICATE: p/1:
     *Usage:*
        - _The following properties should hold at call time:_

          `Arg1' is a free variable.   ( `var/1')

        - _The following properties should hold upon exit:_

          `Arg1' is a list.   ( `list/1')


 -- PREDICATE: p/5:
     *Usage:* `p(Arg1,Arg2,Arg3,Arg4,A)'
        - _Call and exit should be compatible with:_

          `Arg1' is an integer.   ( `int/1')

          `Arg3' is a list of `int's.   ( `list/2')

        - _The following properties should hold at call time:_

          `Arg2' is currently ground (it contains no variables).   ( `ground/1')

          `Arg4' is a free variable.   ( `var/1')

          `A' is currently a term which is not a free variable.   ( `nonvar/1')

        - _The following properties should hold upon exit:_

          `Arg1' is ground.   ( `gnd/1')

          `Arg2' is currently ground (it contains no variables).   ( `ground/1')

        - _The following properties should hold globally:_

          `Arg3' is not further instantiated.   ( `not_further_inst/2')

          `1+length(A)' is a lower bound on the cost of any call of
          the form `p(Arg1,Arg2,Arg3,Arg4,A)'.   ( `steps_lb/2')


 -- PREDICATE: u/3:
     *Usage 1:*
        - _The following properties should hold at call time:_

          `Arg1' is currently a term which is not a free variable.   ( `nonvar/1')

          `Arg2' is a free variable.   ( `var/1')

        - _The following properties should hold upon exit:_

          `Arg3' is ground.   ( `gnd/1')


 -- PROPERTY: long/1:
     This is a property, describing a list that is longish. The
     definition is:

          long(L) :-
                  length(L,N),
                  N>100.

     *Usage:* `long(L)'
        - _Description:_ `L' is rather long.


 -- PREDICATE: w/1:
     *Usage:*
        - _Calls should, and exit will be compatible with:_

          `Arg1' is a list of `mytype's.   ( `list/2')

        - _The following properties should hold at call time:_

          `Arg1' is currently a term which is not a free variable.   ( `nonvar/1')


 -- PREDICATE: mytype/1:
     No further documentation available for this predicate.


 -- PREDICATE: t/5:
     *Usage:* `t(A,B,C,D,E)'
        - _Description:_ This predicate uses _modes_ extensively.

        - _Call and exit should be compatible with:_

          `A' is a list.   ( `list/1')

          `B' is a list.   ( `list/1')

          `C' is an integer.   ( `int/1')

          `D' is an integer.   ( `int/1')

          `E' is a list.   ( `list/1')

        - _The following properties should hold at call time:_

          `A' is currently a term which is not a free variable.   ( `nonvar/1')

          `B' is a free variable.   ( `var/1')

          `B' is rather long.   ( `long/1')

        - _The following properties should hold upon exit:_

          `E' is ground.   ( `gnd/1')

          `C' is ground.   ( `gnd/1')

          `A' is ground.   ( `gnd/1')

        - _The following properties should hold globally:_

          `D' is not further instantiated.   ( `not_further_inst/2')

          All the calls of the form `t(A,B,C,D,E)' do not fail.   ( `not_fails/1')


 -- PREDICATE: s/1:
     *Usage:* `s(A)'
        - _The following properties should hold at call time:_

          `A' is a list.   ( `list/1')

        - _The following properties should hold upon exit:_

          `A' is a list.   ( `list/1')

          `A' is ground.   ( `gnd/1')

        - _The following properties should hold globally:_

          All the calls of the form `s(A)' do not fail.   ( `not_fails/1')


 -- PREDICATE: q/1:
     *Usage 1:* `q(A)'
        - _Description:_ Foo

        - _The following properties should hold at call time:_

          `A' is a list.   ( `list/1')

        - _The following properties should hold upon exit:_

          `A' is a list.   ( `list/1')

          `A' is ground.   ( `gnd/1')

        - _The following properties should hold globally:_

          All the calls of the form `q(A)' do not fail.   ( `not_fails/1')

     *Usage 2:* `q(A)'
        - _Description:_ Not a bad use at all.


 -- REGTYPE: list/1:
     *General properties:* `list(L)'
        - _The following properties hold globally:_

          `list(L)' is side-effect `free'.   ( `sideff/2')
     `list(L)'
        - _If the following properties hold at call time:_

          `L' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `list(L)' is evaluable at compile-time.   ( `eval/1')

          All calls of the form `list(L)' are deterministic.   ( `is_det/1')
     `list(T)'
        - _The following properties hold upon exit:_

          `T' is a list.   ( `list/1')

     *Usage:* `list(L)'
        - _Description:_ `L' is a list.



File: lpdoc-3.0.0.info.tmp,  Node: Documentation on multifiles (example_module),  Next: Documentation on internals (example_module),  Prev: Documentation on exports (example_module),  Up: Auto Documenter Output for the Example Module

11.3 Documentation on multifiles (`example_module')
===================================================

 -- PREDICATE: p/3:
     A *general comment* on the predicate.

     The predicate is _multifile_.

     The predicate is of type _dynamic_.

     *General properties:*
        - _If the following properties hold at call time:_

          `Arg1' is ground.   ( `gnd/1')

          `Arg2' is a free variable.   ( `var/1')

          `Arg3' is a free variable.   ( `var/1')

        - _The following properties should hold at call time:_

          `foo(Arg1)'  (undefined property)

          `Arg2' is an acceptable kind of bar.   ( `bar/1')

          `baz(Arg3)'  ( `baz/1')

        - _If the following properties hold at call time:_

          `Arg1' is an integer.   ( `int/1')

          `Arg2' is an integer.   ( `int/1')

          `Arg3' is a free variable.   ( `var/1')

          _then the following properties should hold upon exit:_

          `Arg1' is an integer.   ( `int/1')

          `Arg2' is an integer.   ( `int/1')

          `Arg3' is ground.   ( `gnd/1')

        - _If the following properties hold at call time:_

          `Arg1' is an integer.   ( `int/1')

          `Arg2' is an integer.   ( `int/1')

          `Arg3' is a free variable.   ( `var/1')

          _then the following properties should hold globally:_

          All the calls of the form `p(Arg1,Arg2,Arg3)' do not fail.
          ( `not_fails/1')

     *Usage 1:* < * ISO * >
        - _Description:_ This mode is nice.

        - _The following properties should hold at call time:_

          `Arg1' is an integer.   ( `int/1')

          `Arg2' is an integer.   ( `int/1')

          `Arg3' is a free variable.   ( `var/1')

        - _The following properties should hold upon exit:_

          `Arg1' is an integer.   ( `int/1')

          `Arg2' is an integer.   ( `int/1')

          `Arg3' is a list.   ( `list/1')

        - _The following properties should hold globally:_

          _Complies with the ISO-Prolog standard._  ( `iso/1')

          All the calls of the form `p(Arg1,Arg2,Arg3)' do not fail.
          ( `not_fails/1')

     *Usage 2:* `p(Preds,Value,Assoc)'
        - _Description:_ This mode is also nice.

        - _The following properties should hold at call time:_

          `Preds' is a free variable.   ( `var/1')

          `Value' is a free variable.   ( `var/1')

          `Assoc' is a list.   ( `list/1')

        - _The following properties should hold upon exit:_

          `Preds' is an integer.   ( `int/1')

          `Value' is an integer.   ( `int/1')

          `Assoc' is a list.   ( `list/1')

        - _The following properties should hold globally:_

          All the calls of the form `p(Preds,Value,Assoc)' do not
          fail.   ( `not_fails/1')

     *Usage 3:*
        - _Description:_ Just playing around.

        - _The following properties should hold upon exit:_

          `Arg1' is a list.   ( `list/1')

          `Arg2' is an integer.   ( `int/1')

          `Arg3' is a list.   ( `list/1')

        - _The following properties should hold globally:_

          All the calls of the form `p(Arg1,Arg2,Arg3)' do not fail.
          ( `not_fails/1')

          All the calls of the form `p(Arg1,Arg2,Arg3)' do not fail.
          ( `not_fails/1')



File: lpdoc-3.0.0.info.tmp,  Node: Documentation on internals (example_module),  Prev: Documentation on multifiles (example_module),  Up: Auto Documenter Output for the Example Module

11.4 Documentation on internals (`example_module')
==================================================

 -- REGTYPE: list/2:
     *General properties:* `list(L,T)'
        - _The following properties hold globally:_

          `list(L,T)' is side-effect `free'.   ( `sideff/2')
     `list(L,T)'
        - _If the following properties hold at call time:_

          `L' is currently ground (it contains no variables).   ( `ground/1')

          `T' is currently ground (it contains no variables).   ( `ground/1')

          _then the following properties hold globally:_

          `list(L,T)' is evaluable at compile-time.   ( `eval/1')
     `list(X,T)'
        - _The following properties hold upon exit:_

          `X' is a list.   ( `list/1')

     *Usage:* `list(L,T)'
        - _Description:_ `L' is a list of `T's.


 -- MODE: og/2:
     *Usage:* `og(A,T)'
        - _Description:_ This is a _parametric mode definition_.

        - _Call and exit are compatible with:_

          `call(T,A)'  (undefined property)

        - _The following properties are added upon exit:_

          `A' is ground.   ( `gnd/1')


 -- PREDICATE: is/2:
     *Usage:* `Num is Expr'
        - _Description:_ Typical way to describe/document an external
          predicate (e.g., written in C).

        - _The following properties should hold at call time:_

          `Expr' is an arithmetic expression.   ( `arithexpression/1')

        - _The following properties hold upon exit:_

          `Num' is a number.   ( `num/1')



File: lpdoc-3.0.0.info.tmp,  Node: Run-time checking of assertions,  Next: Unit Testing Library,  Prev: Auto Documenter Output for the Example Module,  Up: Top

12 Run-time checking of assertions
**********************************

*Author(s):* Edison Mera.

   This package provides a complete implementation of run-time checks
of predicate assertions. The program is instrumented to check such
assertions at run time, and in case a property does not hold, the
error is reported. Note that there is also an older package called
rtchecks, by David Trallero. The advantage of this one is that it can
be used independently of CiaoPP and also has updated functionality.

   There are two main applications of run-time checks:

   * To improve debugging of certain predicates, specifying some
     expected behavior that is checked at run-time with the
     assertions.

   * To avoid manual implementation of run-time checks that should be
     done in some predicates, leaving the code clean and
     understandable.


   The run-time checks can be configured using prolog flags. Below we
itemize the valid prolog flags with its values and a brief
explanation of the meaning:

   * `rtchecks_level'
        * `exports': Only use rtchecks for external calls of the
          exported predicates.

        * `inner' : Use also rtchecks for internal calls. Default.

   * `rtchecks_trust'
        * `no' : Disable rtchecks for trust assertions.

        * `yes' : Enable rtchecks for trust assertions. Default.

   * `rtchecks_entry'
        * `no' : Disable rtchecks for entry assertions.

        * `yes' : Enable rtchecks for entry assertions. Default.

   * `rtchecks_exit'
        * `no' : Disable rtchecks for exit assertions.

        * `yes' : Enable rtchecks for exit assertions. Default.

   * `rtchecks_test'
        * `no' : Disable rtchecks for test assertions. Default.

        * `yes' : Enable rtchecks for test assertions. Used for
          debugging purposes, but is better to use the unittest
          library.

   * `rtchecks_inline'
        * `no' : Instrument rtchecks using call to library predicates
          present in `rtchecks_rt.pl', `nativeprops.pl' and `basic_props.pl'.
          In this way, space is saved, but sacrifying performance due
          to usage of meta calls and external methods in the
          libraries. Default.

        * `yes' : Expand library predicates inline as far as
          possible. In this way, the code is faster, because its
          avoids metacalls and usage of external methods, but the
          final executable could be bigger.

   * `rtchecks_asrloc' Controls the usage of locators for the
     assertions in the error messages. The locator says the file and
     lines that contains the assertion that had failed. Valid values
     are:
        * `no' : Disabled.

        * `yes' : Enabled. Default.

   * `rtchecks_predloc' Controls the usage of locators for the
     predicate that caused the run-time check error. The locator says
     the first clause of the predicate that the violated assertion
     refers to.
        * `no' : Disabled.

        * `yes' : Enabled, Default.

   * `rtchecks_callloc'
        * `no' : Do not show the stack of predicates that caused the
          failure

        * `predicate': Show the stack of predicates that caused the
          failure. Instrument it in the predicate. Default.

        * `literal' : Show the stack of predicates that caused the
          failure. Instrument it in the literal. This mode provides
          more information, because reports also the literal in the
          body of the predicate.

   * `rtchecks_namefmt'
        * `long' : Show the name of predicates, properties and the
          values of the variables

        * `short' : Only show the name of the predicate in a reduced
          format. Default.


* Menu:

* Usage and interface (rtchecks_doc)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (rtchecks_doc),  Prev: Run-time checking of assertions,  Up: Run-time checking of assertions

12.1 Usage and interface (`rtchecks_doc')
=========================================

   * *Library usage:*

     `:- use_package(rtchecks).'

     or

     `:- module(...,...,[rtchecks]).'

   * *Other modules used:*

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Unit Testing Library,  Next: Installing lpdoc,  Prev: Run-time checking of assertions,  Up: Top

13 Unit Testing Library
***********************

*Author(s):* Edison Mera.

   This library provides an extension of the Ciao assertion language
which allows writing _unit tests_. The central idea is to use the
assertion language to provide specifications of test cases for a
given predicate. The package also provides some special properties
that are convenient when specifying unit tests and the required
run-time libraries.

   In general, a _test assertion_ is written as follows:

     :- test predicate(A1, A2, ..., An)
        :  <Precondition>
        => <Postcondition>
        +  <Global properties>
        #  <Comment>.

   Where the fields of the test assertion have the usual meaning in
Ciao assertions, i.e., they contain conjunctions of properties which
must hold at certain points in the execution. Here we give a somewhat
more operational ("test oriented"), reading to these fields: `predicate/n'
is the predicate to be tested. `Precondition' is a goal that is
called before the predicate being tested, and can be used to generate
values of the input parameters. `Postcondition' is a goal that should
succeed after `predicate/n' has been called. The idea appears to be
simple, but note that due to the non-determinism of logic programs,
the test engine needs to test all the solutions that can be tested up
to given limits (for example, a maximum number of solutions, or a
given time-out). `Properties' specifies some global properties that
the predicate should meet, for example, `not_fails' means that the
program does not fail, `exception(error(a,b))' means that the program
should throw the exception `error(a,b)', and so on. But there are
some specific properties that only applies to testing specified in
the module unittest_props.pl, for example `times(N)' specifies that
the given test should be executed N times, `try_sols(N)' specifies
that the first N solutions of the predicate `predicate/n' are tested.
`Comment' is a string that document the test.

   A convenient way to run these tests is by selecting options in the
CiaoDbg menu within the development environment: 

  1. `Run tests in current module': execute only the tests specified
     in the current module.

  2. `Run tests in all related modules': execute the tests specified
     in the module and in all the modules being used by this.

  3. `Show untested predicates': show the _exported_ predicates that
     do not have any test assertion.


* Menu:

* Additional notes::
* Usage and interface (unittest_doc)::


File: lpdoc-3.0.0.info.tmp,  Node: Additional notes,  Next: Usage and interface (unittest_doc),  Prev: Unit Testing Library,  Up: Unit Testing Library

13.1 Additional notes
=====================

  1. The test assertions allow performing _unit_ testing, i.e., in
     Ciao, performing tests _at the predicate level_.

  2. The tests currently can only be applied to exported predicates.

  3. If you need to write tests for predicates that are spread over
     several modules, but work together, then it is best to create a
     separate module, and reexport to the predicates required to
     build the test. This allows performing _integration testing_,
     using the same syntax of the unit tests.

  4. The Ciao system includes a good (and growing) number of unit
     tests. To run all the tests among the other standard tests
     within the CiaoDE run the following (at the top level of the
     source tree):

          ./ciaosetup runtests



File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (unittest_doc),  Prev: Additional notes,  Up: Unit Testing Library

13.2 Usage and interface (`unittest_doc')
=========================================

   * *Library usage:*

     `:- use_module(library(unittest)).'

   * *Other modules used:*

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Installing lpdoc,  Next: *** PART II - LPdoc Internals Manual,  Prev: Unit Testing Library,  Up: Top

14 Installing lpdoc
*******************

*Author(s):* Manuel Hermenegildo.

   This documentation is outdated.

   The source distribution contains all the source code and libraries
and can be compiled on a supported Prolog system ( `lpdoc' is
developed using `Ciao' Prolog). The latest publically distributed
version of `lpdoc' is available from
`http:://www.clip.dia.fi.upm.es/Software/Ciao'. A newer version in
Beta test is often available in
`http:://www.clip.dia.fi.upm.es/Software/Beta/Ciao'.

* Menu:

* Installing the source distribution (lpdoc)::
* Other software packages required (lpdoc)::


File: lpdoc-3.0.0.info.tmp,  Node: Installing the source distribution (lpdoc),  Next: Other software packages required (lpdoc),  Prev: Installing lpdoc,  Up: Installing lpdoc

14.1 Installing the source distribution (lpdoc)
===============================================

   * Before installing `lpdoc', you may want to read *note Other
     software packages required (lpdoc)::. Make sure that `emacs' is
     installed in your system

   * Uncompress (using `gunzip') and unpackage (using `tar' `-xpf')
     the distribution in a suitable directory. This will create a new
     directory called `lpdoc' as well as a link `lpdoc-X.Y' to this
     directory, where `X.Y' is the version number of the
     distribution. The `-p' option in the `tar' command ensures that
     the relative dates of the files in the package are preserved,
     which is needed for correct operation of the Makefiles.

   * Enter the newly created directory and if needed edit the file
     `LPDOCSETTINGS.pl' in a text editor, but in general the default
     options works well (edit the one in that directory, not the ones
     in the subdirectories).

        * Decide which Prolog/CLP system you will use for compiling `lpdoc'
          (actually, currently only Ciao is supported - but porting
          to, e.g., SICStus Prolog should not be too difficult) and
          modify the first part of the `LPDOCSETTINGS.pl' file
          accordingly. The `DOCDIR' directory should not be an
          existing `info' directory, since this will overwrite the `dir'
          file in that directory.

        * Select the directories in which you want the `lpdoc'
          binaries, libraries, and documents installed, by setting
          the corresponding variables in `LPDOCSETTINGS.pl'.


   * Type `lpmake all'. This should create the `lpdoc' executable and
     compile related libraries.

   * Type `lpmake install'. This should install it in the `BINDIR'
     directory, install the `lpdoc' library in a separate directory
     in the `LIBDIR' directory, and install the `lpdoc' documentation
     in the `DOCDIR' directory.

   * In order for the `lpdoc' documentation to be available to users
     automatically, certain environment variables have to be set. The
     installation leaves files suitable for inclusion in
     initialization scripts (e.g., `DOTcshrc' for `csh') in the `lpdoc'
     library.



File: lpdoc-3.0.0.info.tmp,  Node: Other software packages required (lpdoc),  Prev: Installing the source distribution (lpdoc),  Up: Installing lpdoc

14.2 Other software packages required (lpdoc)
=============================================

The most basic functionality of `lpdoc' (generating manuals in
`.texi' format, short manual entries in `.manl' format, generating
_index_ files) is essentially self contained. However, using the full
capabilities of `lpdoc' requires having several other software
packages installed in the system. Fortunately, all of these packages
are public domain software and they will normally be already
installed in, e.g., a standard `Linux' distribution. It should be
relatively easy to get and install the required packages in other
Unix-like packages or even in Windows, under the Cygwin environment.

   * *Basic requirements:* the `Makefile's used by `lpdoc' require GNU
     Make ( `gmake'), and for now have only been designed for
     UN*X-like operating systems.

   * *Generating* `.dvi' *files:* `lpdoc' normally generates `.texi'
     files (actually, a number of `.texic' files). From the `.texi'
     files, `.dvi' files are generated using the standard `tex'
     package directly. The `.dvi' files can also be generated with
     the GNU `Texinfo' package, which provides, among others, the `texi2dvi'
     command. However, `Texinfo' itself requires the standard `tex'
     document processing package. In order to use `texi2dvi' instead
     of `tex' when processing documents you should change the
     variable `TEX' in the `Makefile.skel' file in the `lib'
     directory before installing `lpdoc'. Generating the `.dvi' file
     requires that the `texinfo.tex' file (containing the relevant
     macros) be available to `tex'. This file is normally included
     with modern `tex' distributions, although it may be obsolete. An
     appropriate and up-to-date one for `lpdoc' is provided with the
     `lpdoc' distribution, stored in the `lpdoc' library during
     installation, and used automatically when `lpdoc' runs `tex'. The `texindex'
     package is required in order to process the indices. If you use references
     in your manual, then the `bibtex' package is also needed.  `texindex'
     and `bibtex' are included with most `tex' distributions.

   * *Generating* `.ps' *files:* `.ps' files are generated from the
     `.dvi' files using the `dvips' command (this, again, can be
     changed in the `Makefile.skel' file in the `lib' directory).
     This command is included with standard `tex' distributions.

   * *Generating* `.pdf' *files:* `.pdf' files are currently
     generated from the `.texi' file using the `pdftex' command
     (this, again, can be changed in the `Makefile.skel' file in the
     `lib' directory). This command is included in current `Linux'
     distributions.

   * *Generating* `.html' *files:* `.html' files are generated
     directly from the `.texi' file using the `texi2html' command
     (this, again, can be changed in the `Makefile.skel' file in the
     `lib' directory). This command is a `perl' script and is
     included with the `lpdoc' distribution, and installed in the
     library (so that it does not overwrite other existing versions).
     It is also typically included in the `Texinfo' distribution. A
     required intermediate step is to resolve the link references
     which appear in the `.texi' file (the `.texi' file includes all
     the `.texic' files and has all references resolved). This is
     done using the `emacs' editor in batch mode, calling functions
     in the `emacs-library.el' file included in the `lib' directory
     of the `lpdoc' distribution. Thus, a recent version of `emacs'
     is required for this purpose.

   * *Generating* `.info' *files:* `.info' files are also generated
     directly from the `.texi' file using the `makeinfo' command
     (this, again, can be changed in the `Makefile.skel' file in the
     `lib' directory). This command is included in the `Texinfo'
     distribution. Resolving the link references in the `.texi' file
     is also required as above.

   * If pictures are used in the manual, and `html' output is
     selected, the commands `pstogif' and `cjpeg' are also required,
     in order to convert the figures from `.eps' to `.jpg' format.



File: lpdoc-3.0.0.info.tmp,  Node: *** PART II - LPdoc Internals Manual,  Next: Documentation Generation Library,  Prev: Installing lpdoc,  Up: Top

PART II - LPdoc Internals Manual
********************************


File: lpdoc-3.0.0.info.tmp,  Node: Documentation Generation Library,  Next: Internal State for Documentation Generation,  Prev: *** PART II - LPdoc Internals Manual,  Up: Top

15 Documentation Generation Library
***********************************

*Author(s):* Manuel Hermenegildo, Jose F. Morales.

   This library provides some predicates which generate documentation
automatically for a given module or application, using the
declarations and assertions used in the module itself as input (see
the `assertions' library). By default, only the exported predicates
of the module appear in the documentation. The predicates will be
documented in the order in which they appear in the `module/1' or `module/2'
declaration.  

   The idea of this package is on one hand to reuse the information
present in the assertions and on the other to help ensure that code
and documentation are kept as coherent as possible. Hopefully,
keeping them close together should help in this always difficult
task. The resulting documentation is somewhat rigidly structured, but
generally sufficient for a _reference_ manual, provided a little
effort is put into the assertions and comments. The end product
understandably depends heavily on how much work is put into adding
additional comments to the source. Some documentation will be
generated in any case, but it is recommended that, at the minimum, a
module title and a comment for each of the exported predicates be
provided.

   *Note_ This part is obsolete. - JFMC*

   The output format in which the documentation is generated is
defined by the backend modules ( `autodoc_texinfo', `autodoc_html', `autodoc_man',
etc.).

   The main output format supported is `texinfo' (see The GNU Texinfo
Documentation System manual for more info), from which printed
manuals and several other printing and on-line formats can be easily
generated automatically (including info, html, etc.). There is also
some limited support for direct output in unix `man' format and
direct `html' (but note that html can also be generated in a better
way by first generating texinfo and then using one of the available
converters). For texinfo, the documentation for a module is a texinfo
chapter, suitable for inclusion in a wrapper "main" document file. A
simple example of the use of this library for generating a texinfo
reference manual (including a driver script, useful Makefiles, etc.)
is included with the library source code. Other examples can be found
in the Ciao documentation directory (i.e., the Ciao manuals
themselves).

   A simple example of the use of this library for generating a
`texinfo' reference manual (including a driver script, useful
Makefiles, etc.) is included with the library source code. Other
examples can be found in the Ciao documentation directory (i.e., the
Ciao manuals themselves).

* Menu:

* Usage and interface (autodoc)::
* Documentation on exports (autodoc)::
* Documentation on multifiles (autodoc)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc),  Next: Documentation on exports (autodoc),  Prev: Documentation Generation Library,  Up: Documentation Generation Library

15.1 Usage and interface (`autodoc')
====================================

   * *Library usage:*

     `:- use_module(library(autodoc)).'

   * *Exports:*

        - _Predicates:_

          `index_comment/2', `reset_output_dir_db/0', `ensure_output_dir_prepared/2', `get_autodoc_opts/3', `autodoc_gen_doctree/5', `fmt_infodir_entry/3', `autodoc_compute_grefs/3', `autodoc_translate_doctree/3', `autodoc_finish/1', `autodoc_gen_alternative/2'.

        - _Multifiles:_

          `autodoc_finish_hook/1', `autodoc_gen_alternative_hook/2'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(autodoc_settings))', `lpdocsrc(src(autodoc_filesystem))', `lpdocsrc(src(autodoc_structure))', `lpdocsrc(src(autodoc_doctree))', `lpdocsrc(src(autodoc_refsdb))', `lpdocsrc(src(autodoc_parse))', `lpdocsrc(src(autodoc_index))', `lpdocsrc(src(comments))', `lpdocsrc(src(autodoc_html_resources))', `lpdocsrc(src(autodoc_texinfo))'.

        - _System library modules:_

          `format', `ttyout', `aggregates', `read', `make/make_rt', `dict', `compiler/compiler', `assertions/assrt_lib', `compiler/c_itf', `assertions/assertions_props', `messages', `filenames', `lists', `terms', `make/system_extra', `system'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc),  Next: Documentation on multifiles (autodoc),  Prev: Usage and interface (autodoc),  Up: Documentation Generation Library

15.2 Documentation on exports (`autodoc')
=========================================

 -- PREDICATE: index_comment/2:
     *Usage:* `index_comment(Index,Text)'
        - _Description:_ `Type' is a type of index which is
          supported. `Text' describes the index contents.

        - _The following properties should hold upon exit:_

          `Index' is currently instantiated to an atom.   ( `atom/1')

          `Text' is a string (a list of character codes).   ( `string/1')


 -- PREDICATE: reset_output_dir_db/0:
     No further documentation available for this predicate.


 -- PREDICATE: ensure_output_dir_prepared/2:
     *Usage:* `ensure_output_dir_prepared(Backend,Opts)'
        - _Description:_ Ensure that the output directories for
          backend `Backend' are prepared.


 -- PREDICATE: get_autodoc_opts/3:
     *Usage:* `get_autodoc_opts(Backend,Mod,Opts)'
        - _Description:_ Get the list of documentation options `Opts'
          for the `FileBase' file.

        - _The following properties should hold at call time:_

          `Backend' is an atom.   ( `atm/1')

          `Mod' is an atom.   ( `atm/1')

          `Opts' is a list of `supported_option's.   ( `list/2')


 -- PREDICATE: autodoc_gen_doctree/5:
     *Usage:*
     `autodoc_gen_doctree(Backend,FileBase,SourceSuffix,Opts,Mod)'
        - _Description:_ `FileBase' is the module specifier of the
          source file being documented (without extension,
          `SourceSuffix' is the suffix of the source). The output is
          a file whose contents document the main file, based on any
          assertions present in that file. The documentation is
          produced in the format given by `Backend' (the name of the
          output file also depends on `Backend'). The formats
          supported are given by `backend_id/1'.  

        - _Call and exit should be compatible with:_

          `Backend' is a supported backend.   ( `backend_id/1')

          `FileBase' is the base name of a file (without extension).
          ( `basename/1')

          `SourceSuffix' is an atom.   ( `atm/1')

          `Opts' is a list of `supported_option's.   ( `list/2')

          `Mod' is an atom.   ( `atm/1')


 -- PREDICATE: fmt_infodir_entry/3:
     *Usage:* `fmt_infodir_entry(DocSt,Version,Mod)'
        - _Description:_ Generates a one line description (ASCII) of
          the application or library in a file for the directory of
          `emacs info' manuals.

        - _The following properties should hold at call time:_

          `docstate(DocSt)'  ( `docstate/1')

          `Version' is any term.   ( `term/1')

          `Mod' is the base name of a file (without extension).   ( `basename/1')


 -- PREDICATE: autodoc_compute_grefs/3:
     *Usage:*
        - _Description:_ Compute the globally resolved references
          (including bibliography)


 -- PREDICATE: autodoc_translate_doctree/3:
     *Usage:*
        - _Description:_ Translate the doctree using the specific
          backend


 -- PREDICATE: autodoc_finish/1:
     No further documentation available for this predicate.


 -- PREDICATE: autodoc_gen_alternative/2:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Documentation on multifiles (autodoc),  Prev: Documentation on exports (autodoc),  Up: Documentation Generation Library

15.3 Documentation on multifiles (`autodoc')
============================================

 -- PREDICATE: autodoc_finish_hook/1:
     No further documentation available for this predicate.

     The predicate is _multifile_.



 -- PREDICATE: autodoc_gen_alternative_hook/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.




File: lpdoc-3.0.0.info.tmp,  Node: Internal State for Documentation Generation,  Next: Documentation Abstract Syntax Tree,  Prev: Documentation Generation Library,  Up: Top

16 Internal State for Documentation Generation
**********************************************

*Author(s):* Manuel Hermenegildo, Jose F. Morales.

   This module defines the internal state of the documentation
generation (for a single module).

* Menu:

* Usage and interface (autodoc_state)::
* Documentation on exports (autodoc_state)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_state),  Next: Documentation on exports (autodoc_state),  Prev: Internal State for Documentation Generation,  Up: Internal State for Documentation Generation

16.1 Usage and interface (`autodoc_state')
==========================================

   * *Library usage:*

     `:- use_module(library(autodoc_state)).'

   * *Exports:*

        - _Predicates:_

          `option_comment/2', `backend_ignores_components/1', `backend_alt_format/2', `top_suffix/2', `docst_backend/2', `docst_currmod/2', `docst_set_currmod/3', `docst_opts/2', `docst_set_opts/3', `docst_inputfile/2', `docst_new_no_src/4', `docst_new_with_src/6', `docst_new_sub/3', `docst_message/2', `docst_message/3', `docst_opt/2', `docst_currmod_is_main/1', `docst_no_components/1', `docst_modname/2', `labgen_init/1', `labgen_clean/1', `labgen_get/2', `docst_mvar_lookup/3', `docst_mvar_replace/4', `docst_mvar_get/3', `docst_mdata_clean/1', `docst_mdata_assertz/2', `docst_mdata_save/1', `docst_gdata/3', `docst_gdata_query/2', `docst_gdata_query/3', `docst_gdata_restore/1', `docst_gdata_clean/1', `docst_gvar_save/2', `docst_gvar_restore/2', `docst_has_index/2', `all_indices/2', `get_doc/4', `get_doc_field/3', `get_doc_field_dict/3', `bind_dict_varnames/1', `get_mod_doc/3', `docst_modtype/2', `get_first_loc_for_pred/3'.

        - _Properties:_

          `supported_option/1'.

        - _Regular Types:_

          `backend_id/1', `docstate/1', `modtype/1'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_settings))', `lpdocsrc(src(autodoc_filesystem))', `lpdocsrc(src(autodoc_structure))', `lpdocsrc(src(autodoc_doctree))', `lpdocsrc(src(autodoc_refsdb))', `lpdocsrc(src(autodoc_parse))', `lpdocsrc(src(autodoc_index))', `lpdocsrc(src(comments))'.

        - _System library modules:_

          `make/make_rt', `dict', `compiler/compiler', `assertions/assrt_lib', `compiler/c_itf', `assertions/assertions_props', `messages', `filenames', `lists', `terms', `make/system_extra', `write', `read', `system', `aggregates'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_state),  Prev: Usage and interface (autodoc_state),  Up: Internal State for Documentation Generation

16.2 Documentation on exports (`autodoc_state')
===============================================

 -- PROPERTY: supported_option/1:
     *Usage:* `supported_option(Option)'
        - _Description:_ `Option' is a supported documentation option.


 -- PREDICATE: option_comment/2:
     *Usage:* `option_comment(Option,Text)'
        - _Description:_ `Option' is a documentation option which is
          supported. `Text' describes the effect of selecting that
          option. Currently supported options are:

               option_comment(verbose,"Verbose output (good for debugging).        ").
               option_comment(no_bugs,"Do not include information on bugs.         ").
               option_comment(no_authors,"Do not include author names.                ").
               option_comment(no_stability,"Do not include stability comment.           ").
               option_comment(no_version,"Do not include version information.         ").
               option_comment(no_versioned_output,"Do not include version in the output name.  ").
               option_comment(no_changelog,"Do not include change log.                  ").
               option_comment(no_patches,"Do not include comments for patches.        ").
               option_comment(modes,"Do not translate modes and their arguments
                                               (except for properties)                     ").
               option_comment(head_props,"Do not move head properties to body.        ").
               option_comment(literal_props,"Do not use text to document properties.     ").
               option_comment(no_propnames,"Do not include property names in prop text. ").
               option_comment(no_undefined,"Do not signal undefined properties in text. ").
               option_comment(no_propsepln,"Do not put each property in a separate line.").
               option_comment(no_biblio,"Do not include a bibliographical 'References' appendix.").
               option_comment(no_sysmods,"Do not include system modules in list of
                                               libraries used.").
               option_comment(no_engmods,"Do not include system engine modules in list
                                               of libraries used.").
               option_comment(no_isoline,"Do not include *textual* description that a
                                               given usage conforms to the ISO standard.").
               option_comment(propmods,"Include module name to which props belong.").
               option_comment(no_propuses,"Do not Include property uses (from assertions) in indices.").
               option_comment(shorttoc,"Produce shorter table of contents (no entries
                                               for individual defs of preds, props, etc.).").
               option_comment(regtype_props,"Include in the doc for regtypes the global
                                               prop stating that they are indeed regtypes.").
               option_comment(onesided,"For printing on one side (default is two).").
               option_comment(no_math,"Disable mathematical environments.").

        - _The following properties should hold upon exit:_

          `Option' is a supported documentation option.   ( `supported_option/1')

          `Text' is a string (a list of character codes).   ( `string/1')


 -- REGTYPE: backend_id/1:
     *Usage:* `backend_id(Id)'
        - _Description:_ `Id' is a supported backend.


 -- PREDICATE: backend_ignores_components/1:
     *Usage:* `backend_ignores_components(Id)'
        - _Description:_ `Id' does not take into account components
          (only documents the _mainfile_)


 -- PREDICATE: backend_alt_format/2:
     *Usage:* `backend_alt_format(Id,Ext)'
        - _Description:_ `Ext' is an alternative file format that can
          be generated by the backend `Id'


 -- PREDICATE: top_suffix/2:
     *Usage:* `top_suffix(FileFormat,PrincipalExt)'
        - _Description:_ `PrincipalExt' is extension of the target
          file that will generate the file with `FileFormat'
          extension.


 -- REGTYPE: docstate/1:
     A regular type, defined as follows:
          docstate(docstate(Backend,Name,Opts,MVarDic,I)) :-
                  backend_id(Backend),
                  atom(Name),
                  list(Opts,supported_option),
                  dictionary(MVarDic),
                  filename(I).


 -- PREDICATE: docst_backend/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_currmod/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_set_currmod/3:
     No further documentation available for this predicate.


 -- PREDICATE: docst_opts/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_set_opts/3:
     No further documentation available for this predicate.


 -- PREDICATE: docst_inputfile/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_new_no_src/4:
     No further documentation available for this predicate.


 -- PREDICATE: docst_new_with_src/6:
     No further documentation available for this predicate.


 -- PREDICATE: docst_new_sub/3:
     No further documentation available for this predicate.


 -- PREDICATE: docst_message/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_message/3:
     No further documentation available for this predicate.


 -- PREDICATE: docst_opt/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_currmod_is_main/1:
     No further documentation available for this predicate.


 -- PREDICATE: docst_no_components/1:
     *Usage:* `docst_no_components(DocSt)'
        - _Description:_ `DocSt' specify an empty list of components


 -- PREDICATE: docst_modname/2:
     *Usage:* `docst_modname(DocSt,ModName)'
        - _Description:_ `ModName' is the name of the module that we
          are documenting.


 -- PREDICATE: labgen_init/1:
     No further documentation available for this predicate.


 -- PREDICATE: labgen_clean/1:
     No further documentation available for this predicate.


 -- PREDICATE: labgen_get/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_mvar_lookup/3:
     No further documentation available for this predicate.


 -- PREDICATE: docst_mvar_replace/4:
     No further documentation available for this predicate.


 -- PREDICATE: docst_mvar_get/3:
     No further documentation available for this predicate.


 -- PREDICATE: docst_mdata_clean/1:
     No further documentation available for this predicate.


 -- PREDICATE: docst_mdata_assertz/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_mdata_save/1:
     No further documentation available for this predicate.


 -- PREDICATE: docst_gdata/3:
     No further documentation available for this predicate.

     The predicate is of type _data_.



 -- PREDICATE: docst_gdata_query/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_gdata_query/3:
     No further documentation available for this predicate.


 -- PREDICATE: docst_gdata_restore/1:
     No further documentation available for this predicate.


 -- PREDICATE: docst_gdata_clean/1:
     No further documentation available for this predicate.


 -- PREDICATE: docst_gvar_save/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_gvar_restore/2:
     No further documentation available for this predicate.


 -- PREDICATE: docst_has_index/2:
     No further documentation available for this predicate.


 -- PREDICATE: all_indices/2:
     No further documentation available for this predicate.


 -- PREDICATE: get_doc/4:
     No further documentation available for this predicate.


 -- PREDICATE: get_doc_field/3:
     No further documentation available for this predicate.


 -- PREDICATE: get_doc_field_dict/3:
     No further documentation available for this predicate.


 -- PREDICATE: bind_dict_varnames/1:
     *Usage:* `bind_dict_varnames(Dict)'
        - _Description:_ Binds the variables in `Dict' to the
          corresponding names (i.e., the names that appeared in the
          source during read.


 -- PREDICATE: get_mod_doc/3:
     No further documentation available for this predicate.


 -- REGTYPE: modtype/1:
          modtype(part).
          modtype(application).
          modtype(documentation).
          modtype(module).
          modtype(user).
          modtype(include).
          modtype(package).

     *Usage:*
        - _Description:_ Represents the type of file being documented.


 -- PREDICATE: docst_modtype/2:
     No further documentation available for this predicate.


 -- PREDICATE: get_first_loc_for_pred/3:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Documentation Abstract Syntax Tree,  Next: Handling the Document Structure,  Prev: Internal State for Documentation Generation,  Up: Top

17 Documentation Abstract Syntax Tree
*************************************

*Author(s):* Manuel Hermenegildo (original version), Jose F. Morales.

   This module defines the intermediate tree representation `doctree/1'
for documentation and its related operations.

   *Note_ This part needs better documentation. - JFMC*

* Menu:

* Usage and interface (autodoc_doctree)::
* Documentation on exports (autodoc_doctree)::
* Documentation on multifiles (autodoc_doctree)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_doctree),  Next: Documentation on exports (autodoc_doctree),  Prev: Documentation Abstract Syntax Tree,  Up: Documentation Abstract Syntax Tree

17.1 Usage and interface (`autodoc_doctree')
============================================

   * *Library usage:*

     `:- use_module(library(autodoc_doctree)).'

   * *Exports:*

        - _Predicates:_

          `cmd_type/1', `doctree_is_empty/1', `is_nonempty_doctree/1', `empty_doctree/1', `doctree_insert_end/3', `doctree_insert_before_section/3', `doctree_concat/3', `doclink_at/2', `doclink_is_local/1', `section_prop/2', `section_select_prop/3', `doctree_save/2', `doctree_restore/2', `doctree_simplify/2', `doctree_putvars/5', `doctree_scan_and_save_refs/2', `doctree_prepare_docst_translate_and_write/3', `doctree_to_rawtext/3', `doctree_translate_and_write/3', `escape_string/4', `is_version/1', `version_patch/2', `version_date/2', `version_numstr/2', `version_string/2', `insert_show_toc/3'.

        - _Regular Types:_

          `doctree/1', `doclink/1', `doclabel/1', `doctokens/1'.

        - _Multifiles:_

          `autodoc_rw_command_hook/4', `autodoc_escape_string_hook/5'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(autodoc_refsdb))', `lpdocsrc(src(autodoc_index))', `lpdocsrc(src(autodoc_structure))', `lpdocsrc(src(autodoc_filesystem))', `lpdocsrc(src(autodoc_settings))', `lpdocsrc(src(comments))', `lpdocsrc(src(autodoc_texinfo))', `lpdocsrc(src(autodoc_man))', `lpdocsrc(src(autodoc_html))'.

        - _System library modules:_

          `write', `operators', `format', `lists', `make/system_extra', `read', `terms', `make/make_rt'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_doctree),  Next: Documentation on multifiles (autodoc_doctree),  Prev: Usage and interface (autodoc_doctree),  Up: Documentation Abstract Syntax Tree

17.2 Documentation on exports (`autodoc_doctree')
=================================================

 -- PREDICATE: cmd_type/1:
     No further documentation available for this predicate.


 -- REGTYPE: doctree/1:
     *Usage:*
        - _Description:_ Intermediate tree representation for
          documentation


 -- PREDICATE: doctree_is_empty/1:
     *Usage:* `doctree_is_empty(+R)'
        - _Description:_ Emptiness test

        - _The following properties should hold at call time:_

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: is_nonempty_doctree/1:
     *Usage:* `is_nonempty_doctree(+R)'
        - _Description:_ Not empty test

        - _The following properties should hold at call time:_

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: empty_doctree/1:
     *Usage:* `empty_doctree(-R)'
        - _Description:_ Empty

        - _The following properties should hold at call time:_

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: doctree_insert_end/3:
     *Usage:* `doctree_insert_end(A0,Elem,A)'
        - _Description:_ Insert `Elem' in `A0' at the end, obtaining
          `A'

        - _Call and exit should be compatible with:_

          Intermediate tree representation for documentation  ( `doctree/1')

          Intermediate tree representation for documentation  ( `doctree/1')

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: doctree_insert_before_section/3:
     *Usage:* `doctree_insert_before_section(A0,Elem,A)'
        - _Description:_ Insert `Elem' in `A0' before the first
          section, obtaining `A'

        - _Call and exit should be compatible with:_

          Intermediate tree representation for documentation  ( `doctree/1')

          Intermediate tree representation for documentation  ( `doctree/1')

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: doctree_concat/3:
     No further documentation available for this predicate.


 -- REGTYPE: doclink/1:
     *Usage:*
        - _Description:_ A link to a document label


 -- REGTYPE: doclabel/1:
     *Usage:*
        - _Description:_ An internal label


 -- PREDICATE: doclink_at/2:
     No further documentation available for this predicate.


 -- PREDICATE: doclink_is_local/1:
     No further documentation available for this predicate.


 -- REGTYPE: doctokens/1:
     *Usage:*
        - _Description:_ Primitive doctree subset (ready for output,
          not further reducible)


 -- PREDICATE: section_prop/2:
     No further documentation available for this predicate.


 -- PREDICATE: section_select_prop/3:
     No further documentation available for this predicate.


 -- PREDICATE: doctree_save/2:


 -- PREDICATE: doctree_restore/2:


 -- PREDICATE: doctree_simplify/2:
     No further documentation available for this predicate.


 -- PREDICATE: doctree_putvars/5:
     *Usage:* `doctree_putvars(R0,DocSt,PDict,VarDict,R)'
        - _Description:_ Traverse `R0' and replace each `var(Name)'
          doctree item with a fresh variable `B'. For each
          replacement, the term `B=Var' is introduced in `VarDict',
          where `Var' is the associated value to `Name' in the
          dictionary `PDict'.

        - _The following properties should hold at call time:_

          Intermediate tree representation for documentation  ( `doctree/1')

          `docstate(DocSt)'  ( `docstate/1')

        - _The following properties should hold upon exit:_

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: doctree_scan_and_save_refs/2:
     *Usage:* `doctree_scan_and_save_refs(R,DocSt)'
        - _Description:_ Scan and save the references of the doctree

        - _The following properties should hold at call time:_

          Intermediate tree representation for documentation  ( `doctree/1')

          `docstate(DocSt)'  ( `docstate/1')


 -- PREDICATE: doctree_prepare_docst_translate_and_write/3:
     No further documentation available for this predicate.


 -- PREDICATE: doctree_to_rawtext/3:
     *Usage:* `doctree_to_rawtext(X,DocSt,Y)'
        - _Description:_ `Y' is a simplified raw text representation
          of the `X'

        - _Call and exit should be compatible with:_

          Intermediate tree representation for documentation  ( `doctree/1')

          `docstate(DocSt)'  ( `docstate/1')

          `Y' is a string (a list of character codes).   ( `string/1')


 -- PREDICATE: doctree_translate_and_write/3:
     No further documentation available for this predicate.


 -- PREDICATE: escape_string/4:
     *Usage:*
        - _Description:_ Escapes needed characters in input string as
          needed for the target format.

        - _The following properties should hold upon exit:_

          `Arg1' is currently instantiated to an atom.   ( `atom/1')

          `Arg2' is a string (a list of character codes).   ( `string/1')

          `docstate(Arg3)'  ( `docstate/1')

          `Arg4' is a string (a list of character codes).   ( `string/1')


 -- PREDICATE: is_version/1:
     No further documentation available for this predicate.


 -- PREDICATE: version_patch/2:
     No further documentation available for this predicate.


 -- PREDICATE: version_date/2:
     No further documentation available for this predicate.


 -- PREDICATE: version_numstr/2:
     *Usage:* `version_numstr(Version,Str)'
        - _Description:_ Obtain the string `Str' representation of
          version `Version' (except date)


 -- PREDICATE: version_string/2:
     *Usage:* `version_string(Version,Str)'
        - _Description:_ Obtain the string `Str' representation of
          version `Version' (including date)


 -- PREDICATE: insert_show_toc/3:
     *Usage:* `insert_show_toc(R0,DocSt,R)'
        - _Description:_ Insert the command to show the table of
          contents in a given `doctree/1'. The right place may be
          different depending on the chosen backend.



File: lpdoc-3.0.0.info.tmp,  Node: Documentation on multifiles (autodoc_doctree),  Prev: Documentation on exports (autodoc_doctree),  Up: Documentation Abstract Syntax Tree

17.3 Documentation on multifiles (`autodoc_doctree')
====================================================

 -- PREDICATE: autodoc_rw_command_hook/4:
     No further documentation available for this predicate.

     The predicate is _multifile_.



 -- PREDICATE: autodoc_escape_string_hook/5:
     No further documentation available for this predicate.

     The predicate is _multifile_.




File: lpdoc-3.0.0.info.tmp,  Node: Handling the Document Structure,  Next: Access to Default Settings,  Prev: Documentation Abstract Syntax Tree,  Up: Top

18 Handling the Document Structure
**********************************

*Author(s):* Jose F. Morales.

* Menu:

* Usage and interface (autodoc_structure)::
* Documentation on exports (autodoc_structure)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_structure),  Next: Documentation on exports (autodoc_structure),  Prev: Handling the Document Structure,  Up: Handling the Document Structure

18.1 Usage and interface (`autodoc_structure')
==============================================

   * *Library usage:*

     `:- use_module(library(autodoc_structure)).'

   * *Exports:*

        - _Predicates:_

          `docstr_node/4', `clean_docstr/0', `parse_structure/0', `standalone_docstr/1', `get_mainmod/1', `get_mainmod_spec/1', `all_component_specs/1'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_settings))'.

        - _System library modules:_

          `filenames', `aggregates', `terms', `make/make_rt'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_structure),  Prev: Usage and interface (autodoc_structure),  Up: Handling the Document Structure

18.2 Documentation on exports (`autodoc_structure')
===================================================

 -- PREDICATE: docstr_node/4:
     No further documentation available for this predicate.

     The predicate is of type _data_.



 -- PREDICATE: clean_docstr/0:
     No further documentation available for this predicate.


 -- PREDICATE: parse_structure/0:
     No further documentation available for this predicate.


 -- PREDICATE: standalone_docstr/1:
     No further documentation available for this predicate.


 -- PREDICATE: get_mainmod/1:
     No further documentation available for this predicate.


 -- PREDICATE: get_mainmod_spec/1:
     No further documentation available for this predicate.


 -- PREDICATE: all_component_specs/1:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Access to Default Settings,  Next: *** LPdoc Backends,  Prev: Handling the Document Structure,  Up: Top

19 Access to Default Settings
*****************************

*Author(s):* Jose F. Morales.

   This module defines the setting values with some default values.

   *Note_ This part needs better documentation. - JFMC*

* Menu:

* Usage and interface (autodoc_settings)::
* Documentation on exports (autodoc_settings)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_settings),  Next: Documentation on exports (autodoc_settings),  Prev: Access to Default Settings,  Up: Access to Default Settings

19.1 Usage and interface (`autodoc_settings')
=============================================

   * *Library usage:*

     `:- use_module(library(autodoc_settings)).'

   * *Exports:*

        - _Predicates:_

          `lpdoc_option/1', `verify_settings/0', `check_setting/1', `setting_value_or_default/2', `setting_value_or_default/3', `setting_value/2', `all_setting_values/2', `get_command_option/1', `requested_file_formats/1', `load_vpaths/0', `viewer/3', `xdvi/1', `xdvisize/1', `pdfview/1', `psview/1', `htmlview/1', `bibtex/1', `tex/1', `texindex/1', `dvips/1', `ps2pdf/1', `makeinfo/1', `makertf/1', `rtftohlp/1', `convertc/1'.

   * *Other modules used:*

        - _System library modules:_

          `make/system_extra', `make/make_rt', `aggregates', `distutils/distutils'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_settings),  Prev: Usage and interface (autodoc_settings),  Up: Access to Default Settings

19.2 Documentation on exports (`autodoc_settings')
==================================================

 -- PREDICATE: lpdoc_option/1:
     Defines the global options of lpdoc.

     The predicate is of type _data_.



 -- PREDICATE: verify_settings/0:
     No further documentation available for this predicate.


 -- PREDICATE: check_setting/1:
     No further documentation available for this predicate.


 -- PREDICATE: setting_value_or_default/2:
     *Usage:* `setting_value_or_default(Var,Value)'
        - _Description:_ Returns in `Value' the value of the variable
          `Var'. In case this variable does not exists, it returns a
          default value. If there is no default value for the
          variable `Var' it fails.


 -- PREDICATE: setting_value_or_default/3:
     No further documentation available for this predicate.


 -- PREDICATE: setting_value/2:
     No further documentation available for this predicate.


 -- PREDICATE: all_setting_values/2:
     No further documentation available for this predicate.


 -- PREDICATE: get_command_option/1:
     No further documentation available for this predicate.


 -- PREDICATE: requested_file_formats/1:
     *Usage:* `requested_file_formats(F)'
        - _Description:_ `F' is a requested file format


 -- PREDICATE: load_vpaths/0:
     No further documentation available for this predicate.


 -- PREDICATE: viewer/3:
     No further documentation available for this predicate.


 -- PREDICATE: xdvi/1:
     No further documentation available for this predicate.


 -- PREDICATE: xdvisize/1:
     No further documentation available for this predicate.


 -- PREDICATE: pdfview/1:
     No further documentation available for this predicate.


 -- PREDICATE: psview/1:
     No further documentation available for this predicate.


 -- PREDICATE: htmlview/1:
     No further documentation available for this predicate.


 -- PREDICATE: bibtex/1:
     No further documentation available for this predicate.


 -- PREDICATE: tex/1:
     No further documentation available for this predicate.


 -- PREDICATE: texindex/1:
     No further documentation available for this predicate.


 -- PREDICATE: dvips/1:
     No further documentation available for this predicate.


 -- PREDICATE: ps2pdf/1:
     No further documentation available for this predicate.


 -- PREDICATE: makeinfo/1:
     No further documentation available for this predicate.


 -- PREDICATE: makertf/1:
     No further documentation available for this predicate.


 -- PREDICATE: rtftohlp/1:
     No further documentation available for this predicate.


 -- PREDICATE: convertc/1:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: *** LPdoc Backends,  Next: Texinfo Backend,  Prev: Access to Default Settings,  Up: Top

LPdoc Backends
**************


File: lpdoc-3.0.0.info.tmp,  Node: Texinfo Backend,  Next: HTML Backend,  Prev: *** LPdoc Backends,  Up: Top

20 Texinfo Backend
******************

*Author(s):* Manuel Hermenegildo, Jose F. Morales.

* Menu:

* Usage and interface (autodoc_texinfo)::
* Documentation on exports (autodoc_texinfo)::
* Documentation on multifiles (autodoc_texinfo)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_texinfo),  Next: Documentation on exports (autodoc_texinfo),  Prev: Texinfo Backend,  Up: Texinfo Backend

20.1 Usage and interface (`autodoc_texinfo')
============================================

   * *Library usage:*

     `:- use_module(library(autodoc_texinfo)).'

   * *Exports:*

        - _Predicates:_

          `infodir_base/2'.

        - _Multifiles:_

          `autodoc_escape_string_hook/5', `autodoc_rw_command_hook/4', `autodoc_finish_hook/1', `autodoc_gen_alternative_hook/2'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(autodoc_filesystem))', `lpdocsrc(src(autodoc_structure))', `lpdocsrc(src(autodoc_index))', `lpdocsrc(src(autodoc_doctree))', `lpdocsrc(src(autodoc_images))', `lpdocsrc(src(autodoc_settings))', `fastformat', `lpdocsrc(src(comments))', `ciaodesrc(makedir(ConfigValues))', `lpdocsrc(src(autodoc_aux))'.

        - _System library modules:_

          `lists', `terms', `format', `messages', `system', `make/make_rt', `file_utils', `make/system_extra'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_texinfo),  Next: Documentation on multifiles (autodoc_texinfo),  Prev: Usage and interface (autodoc_texinfo),  Up: Texinfo Backend

20.2 Documentation on exports (`autodoc_texinfo')
=================================================

 -- PREDICATE: infodir_base/2:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Documentation on multifiles (autodoc_texinfo),  Prev: Documentation on exports (autodoc_texinfo),  Up: Texinfo Backend

20.3 Documentation on multifiles (`autodoc_texinfo')
====================================================

 -- PREDICATE: autodoc_escape_string_hook/5:
     No further documentation available for this predicate.

     The predicate is _multifile_.



 -- PREDICATE: autodoc_rw_command_hook/4:
     The predicate is _multifile_.

     *Usage:*
     `autodoc_rw_command_hook(Backend,DocSt,Command,NewCommand)'
        - _The following properties should hold at call time:_

          `Backend' is a supported backend.   ( `backend_id/1')

          `docstate(DocSt)'  ( `docstate/1')

          Intermediate tree representation for documentation  ( `doctree/1')

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: autodoc_finish_hook/1:
     No further documentation available for this predicate.

     The predicate is _multifile_.



 -- PREDICATE: autodoc_gen_alternative_hook/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.




File: lpdoc-3.0.0.info.tmp,  Node: HTML Backend,  Next: Resource Handling for the HTML Backend,  Prev: Texinfo Backend,  Up: Top

21 HTML Backend
***************

*Author(s):* Jose F. Morales.

* Menu:

* Usage and interface (autodoc_html)::
* Documentation on multifiles (autodoc_html)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_html),  Next: Documentation on multifiles (autodoc_html),  Prev: HTML Backend,  Up: HTML Backend

21.1 Usage and interface (`autodoc_html')
=========================================

   * *Library usage:*

     `:- use_module(library(autodoc_html)).'

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(autodoc_structure))', `lpdocsrc(src(autodoc_filesystem))', `lpdocsrc(src(autodoc_doctree))', `lpdocsrc(src(autodoc_index))', `lpdocsrc(src(autodoc_refsdb))', `lpdocsrc(src(autodoc_images))', `lpdocsrc(src(autodoc_settings))', `lpdocsrc(src(comments))', `fastformat', `lpdocsrc(src(autodoc_html_template))', `lpdocsrc(src(distpkg_download))', `lpdocsrc(src(autodoc_html_resources))'.

        - _System library modules:_

          `lists', `dict', `system', `file_utils'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on multifiles (autodoc_html),  Prev: Usage and interface (autodoc_html),  Up: HTML Backend

21.2 Documentation on multifiles (`autodoc_html')
=================================================

 -- PREDICATE: autodoc_escape_string_hook/5:
     No further documentation available for this predicate.

     The predicate is _multifile_.



 -- PREDICATE: autodoc_rw_command_hook/4:
     The predicate is _multifile_.

     *Usage:*
     `autodoc_rw_command_hook(Backend,DocSt,Command,NewCommand)'
        - _The following properties should hold at call time:_

          `Backend' is a supported backend.   ( `backend_id/1')

          `docstate(DocSt)'  ( `docstate/1')

          Intermediate tree representation for documentation  ( `doctree/1')

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: autodoc_finish_hook/1:
     No further documentation available for this predicate.

     The predicate is _multifile_.



 -- PREDICATE: autodoc_gen_alternative_hook/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.




File: lpdoc-3.0.0.info.tmp,  Node: Resource Handling for the HTML Backend,  Next: Template Support for the HTML Backend,  Prev: HTML Backend,  Up: Top

22 Resource Handling for the HTML Backend
*****************************************

*Author(s):* Jose F. Morales.

* Menu:

* Usage and interface (autodoc_html_resources)::
* Documentation on exports (autodoc_html_resources)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_html_resources),  Next: Documentation on exports (autodoc_html_resources),  Prev: Resource Handling for the HTML Backend,  Up: Resource Handling for the HTML Backend

22.1 Usage and interface (`autodoc_html_resources')
===================================================

   * *Library usage:*

     `:- use_module(library(autodoc_html_resources)).'

   * *Exports:*

        - _Predicates:_

          `prepare_web_skel/1', `prepare_mathjax/0', `using_mathjax/1'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc))', `lpdocsrc(src(autodoc_settings))', `lpdocsrc(src(autodoc_filesystem))'.

        - _System library modules:_

          `messages', `file_utils', `make/system_extra', `distutils/dirutils', `terms'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_html_resources),  Prev: Usage and interface (autodoc_html_resources),  Up: Resource Handling for the HTML Backend

22.2 Documentation on exports (`autodoc_html_resources')
========================================================

 -- PREDICATE: prepare_web_skel/1:
     No further documentation available for this predicate.


 -- PREDICATE: prepare_mathjax/0:
     No further documentation available for this predicate.


 -- PREDICATE: using_mathjax/1:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Template Support for the HTML Backend,  Next: Man Pages (man) Backend,  Prev: Resource Handling for the HTML Backend,  Up: Top

23 Template Support for the HTML Backend
****************************************

*Author(s):* Jose F. Morales.

* Menu:

* Usage and interface (autodoc_html_template)::
* Documentation on exports (autodoc_html_template)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_html_template),  Next: Documentation on exports (autodoc_html_template),  Prev: Template Support for the HTML Backend,  Up: Template Support for the HTML Backend

23.1 Usage and interface (`autodoc_html_template')
==================================================

   * *Library usage:*

     `:- use_module(library(autodoc_html_template)).'

   * *Exports:*

        - _Predicates:_

          `img_url/2', `fmt_html_template/3'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_settings))'.

        - _System library modules:_

          `component_registry/component_registry', `messages', `aggregates', `system', `file_utils', `make/system_extra', `distutils/dirutils', `lists', `terms', `make/make_rt', `pillow/html'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_html_template),  Prev: Usage and interface (autodoc_html_template),  Up: Template Support for the HTML Backend

23.2 Documentation on exports (`autodoc_html_template')
=======================================================

 -- PREDICATE: img_url/2:
     *Usage:* `img_url(Name,Url)'
        - _Description:_ Obtain the `URL' where image `Name' is or
          will be found.

        - _Call and exit should be compatible with:_

          `Name' is an atom.   ( `atm/1')

          `Url' is a string (a list of character codes).   ( `string/1')


 -- PREDICATE: fmt_html_template/3:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Man Pages (man) Backend,  Next: Filesystem Abstraction,  Prev: Template Support for the HTML Backend,  Up: Top

24 Man Pages (man) Backend
**************************

*Author(s):* Jose F. Morales, Manuel Hermenegildo.

* Menu:

* Usage and interface (autodoc_man)::
* Documentation on multifiles (autodoc_man)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_man),  Next: Documentation on multifiles (autodoc_man),  Prev: Man Pages (man) Backend,  Up: Man Pages (man) Backend

24.1 Usage and interface (`autodoc_man')
========================================

   * *Library usage:*

     `:- use_module(library(autodoc_man)).'

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(autodoc_doctree))', `lpdocsrc(src(autodoc_images))', `lpdocsrc(src(autodoc_aux))', `lpdocsrc(src(comments))', `fastformat'.

        - _System library modules:_

          `lists'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on multifiles (autodoc_man),  Prev: Usage and interface (autodoc_man),  Up: Man Pages (man) Backend

24.2 Documentation on multifiles (`autodoc_man')
================================================

 -- PREDICATE: autodoc_rw_command_hook/4:
     The predicate is _multifile_.

     *Usage:*
     `autodoc_rw_command_hook(Backend,DocSt,Command,NewCommand)'
        - _The following properties should hold at call time:_

          `Backend' is a supported backend.   ( `backend_id/1')

          `docstate(DocSt)'  ( `docstate/1')

          Intermediate tree representation for documentation  ( `doctree/1')

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: autodoc_finish_hook/1:
     No further documentation available for this predicate.

     The predicate is _multifile_.



 -- PREDICATE: autodoc_gen_alternative_hook/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.




File: lpdoc-3.0.0.info.tmp,  Node: Filesystem Abstraction,  Next: Indexing Commands (Definition and Formatting),  Prev: Man Pages (man) Backend,  Up: Top

25 Filesystem Abstraction
*************************

*Author(s):* Jose F. Morales.

   This module provides definitions to assign unique file-system
paths and names for each of the intermediate and final results of
documentation generation.

* Menu:

* Usage and interface (autodoc_filesystem)::
* Documentation on exports (autodoc_filesystem)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_filesystem),  Next: Documentation on exports (autodoc_filesystem),  Prev: Filesystem Abstraction,  Up: Filesystem Abstraction

25.1 Usage and interface (`autodoc_filesystem')
===============================================

   * *Library usage:*

     `:- use_module(library(autodoc_filesystem)).'

   * *Exports:*

        - _Predicates:_

          `file_format_name/2', `supported_file_format/1', `file_format_provided_by_backend/3', `clean_fs_db/0', `get_output_dir/2', `get_cache_dir/2', `ensure_output_dir/1', `ensure_cache_dir/1', `main_absfile_in_format/2', `main_absfile_for_subtarget/3', `absfile_for_aux/3', `absfile_for_subtarget/4', `main_output_name/2', `get_subbase/3', `absfile_to_relfile/3', `clean_all/0', `clean_docs_no_texi/0', `clean_all_temporal/0', `clean_intermediate/0', `clean_tex_intermediate/0'.

        - _Regular Types:_

          `filename/1', `basename/1', `subtarget/1'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_settings))', `lpdocsrc(src(autodoc_structure))', `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(component_versions))'.

        - _System library modules:_

          `aggregates', `make/system_extra', `terms', `distutils/dirutils', `system', `component_registry/component_registry'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_filesystem),  Prev: Usage and interface (autodoc_filesystem),  Up: Filesystem Abstraction

25.2 Documentation on exports (`autodoc_filesystem')
====================================================

 -- REGTYPE: filename/1:
     *Usage:* `filename(X)'
        - _Description:_ `X' is the name of a file.


 -- REGTYPE: basename/1:
     *Usage:* `basename(X)'
        - _Description:_ `X' is the base name of a file (without
          extension).


 -- REGTYPE: subtarget/1:
     *Usage:*
        - _Description:_ The kind of intermediate/final results for a
          single documentation processing unit (module).


 -- PREDICATE: file_format_name/2:
     No further documentation available for this predicate.


 -- PREDICATE: supported_file_format/1:
     No further documentation available for this predicate.


 -- PREDICATE: file_format_provided_by_backend/3:
     *Usage:* `file_format_provided_by_backend(Ext,Backend,Subtarget)'
        - _Description:_ `Backend' is the backend that generates
          files with format `Ext'

        - _Call and exit should be compatible with:_

          `Ext' is an atom.   ( `atm/1')

          `Backend' is a supported backend.   ( `backend_id/1')

          `Subtarget' is an atom.   ( `atm/1')


 -- PREDICATE: clean_fs_db/0:
     *Usage:*
        - _Description:_ Clean the cached information for the
          filesystem mapping of the documentaton generation.


 -- PREDICATE: get_output_dir/2:
     *Usage:* `get_output_dir(Backend,Dir)'
        - _Description:_ Obtain the `Dir' directory where final
          documentation files will be stored


 -- PREDICATE: get_cache_dir/2:
     *Usage:* `get_cache_dir(Backend,Dir)'
        - _Description:_ Obtain the `Dir' directory where final
          documentation files will be stored


 -- PREDICATE: ensure_output_dir/1:
     No further documentation available for this predicate.


 -- PREDICATE: ensure_cache_dir/1:
     No further documentation available for this predicate.


 -- PREDICATE: main_absfile_in_format/2:
     *Usage:* `main_absfile_in_format(Ext,File)'
        - _Description:_ `File' is the absolute file name for the
          documentation in `Ext' format of the _main_ module


 -- PREDICATE: main_absfile_for_subtarget/3:
     No further documentation available for this predicate.


 -- PREDICATE: absfile_for_aux/3:
     *Usage:* `absfile_for_aux(AuxName,Backend,AbsFile)'
        - _Description:_ Absolute file for an auxiliary output file
          (e.g. CSS, images, etc.)


 -- PREDICATE: absfile_for_subtarget/4:
     No further documentation available for this predicate.


 -- PREDICATE: main_output_name/2:
     No further documentation available for this predicate.


 -- PREDICATE: get_subbase/3:
     *Usage:* `get_subbase(Base,Sub,SubBase)'
        - _Description:_ `SubBase' is the name for the sub-file
          (`Sub') associated with `Base'

        - _The following properties should hold upon exit:_

          `Base' is the base name of a file (without extension).   ( `basename/1')

          `Sub' is an atom.   ( `atm/1')

          `SubBase' is the base name of a file (without extension).
          ( `basename/1')


 -- PREDICATE: absfile_to_relfile/3:
     *Usage:* `absfile_to_relfile(A,Backend,B)'
        - _Description:_ Obtain the relative path, w.r.t. the output
          directory, of an absolute file. This is useful, e.g., for
          URLs.


 -- PREDICATE: clean_all/0:
     No further documentation available for this predicate.


 -- PREDICATE: clean_docs_no_texi/0:
     No further documentation available for this predicate.


 -- PREDICATE: clean_all_temporal/0:
     No further documentation available for this predicate.


 -- PREDICATE: clean_intermediate/0:
     No further documentation available for this predicate.


 -- PREDICATE: clean_tex_intermediate/0:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Indexing Commands (Definition and Formatting),  Next: Database of Documentation References,  Prev: Filesystem Abstraction,  Up: Top

26 Indexing Commands (Definition and Formatting)
************************************************

*Author(s):* Jose F. Morales.

   This module defines index commands and formatting.

   *Note_ This part needs better documentation. - JFMC*

* Menu:

* Usage and interface (autodoc_index)::
* Documentation on exports (autodoc_index)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_index),  Next: Documentation on exports (autodoc_index),  Prev: Indexing Commands (Definition and Formatting),  Up: Indexing Commands (Definition and Formatting)

26.1 Usage and interface (`autodoc_index')
==========================================

   * *Library usage:*

     `:- use_module(library(autodoc_index)).'

   * *Exports:*

        - _Predicates:_

          `get_idxsub/2', `get_idxbase/3', `typeindex/5', `idx_get_indices/3', `is_index_cmd/1', `codetype/1', `normalize_index_cmd/3', `fmt_idx_env/7', `fmt_index/3'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(autodoc_filesystem))', `lpdocsrc(src(autodoc_doctree))', `lpdocsrc(src(autodoc_structure))', `lpdocsrc(src(autodoc_refsdb))'.

        - _System library modules:_

          `dict', `lists', `aggregates'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_index),  Prev: Usage and interface (autodoc_index),  Up: Indexing Commands (Definition and Formatting)

26.2 Documentation on exports (`autodoc_index')
===============================================

 -- PREDICATE: get_idxsub/2:
     No further documentation available for this predicate.


 -- PREDICATE: get_idxbase/3:
     No further documentation available for this predicate.


 -- PREDICATE: typeindex/5:
     *Usage:* `typeindex(Type,Index,IType,Name,Comment)'
        - _Description:_ `Index' is the (info) index name in which
          objects of type `Type' go. `Name' is the title of the index
          in the documentation. `IType' is the type of index; an
          empty string means normal. code`Comment' is a comment to
          include before the index.

        - _The following properties should hold upon exit:_

          `Type' is currently instantiated to an atom.   ( `atom/1')

          `Index' is an atom.   ( `atm/1')

          `IType' is a string (a list of character codes).   ( `string/1')

          `Name' is a string (a list of character codes).   ( `string/1')

          Intermediate tree representation for documentation  ( `doctree/1')


 -- PREDICATE: idx_get_indices/3:
     No further documentation available for this predicate.


 -- PREDICATE: is_index_cmd/1:
     No further documentation available for this predicate.


 -- PREDICATE: codetype/1:
     No further documentation available for this predicate.


 -- PREDICATE: normalize_index_cmd/3:
     No further documentation available for this predicate.


 -- PREDICATE: fmt_idx_env/7:
     No further documentation available for this predicate.


 -- PREDICATE: fmt_index/3:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Database of Documentation References,  Next: Error Messages,  Prev: Indexing Commands (Definition and Formatting),  Up: Top

27 Database of Documentation References
***************************************

*Author(s):* Jose F. Morales.

   This module stores and manages all the documentation references
(indices, sections, bibliography, etc.). It includes the generation
of the table of contents.

* Menu:

* Usage and interface (autodoc_refsdb)::
* Documentation on exports (autodoc_refsdb)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_refsdb),  Next: Documentation on exports (autodoc_refsdb),  Prev: Database of Documentation References,  Up: Database of Documentation References

27.1 Usage and interface (`autodoc_refsdb')
===========================================

   * *Library usage:*

     `:- use_module(library(autodoc_refsdb)).'

   * *Exports:*

        - _Predicates:_

          `compute_refs_and_biblio/1', `prepare_current_refs/1', `clean_current_refs/1', `secttree_resolve/3'.

        - _Regular Types:_

          `secttree/1'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(autodoc_doctree))', `lpdocsrc(src(autodoc_structure))', `lpdocsrc(src(autodoc_filesystem))', `lpdocsrc(src(autodoc_bibrefs))', `.(autodoc_structure)'.

        - _System library modules:_

          `aggregates', `lists'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_refsdb),  Prev: Usage and interface (autodoc_refsdb),  Up: Database of Documentation References

27.2 Documentation on exports (`autodoc_refsdb')
================================================

 -- PREDICATE: compute_refs_and_biblio/1:
     No further documentation available for this predicate.


 -- PREDICATE: prepare_current_refs/1:
     *Usage:*
        - _Description:_ Prepare references for the translation of
          the current file.

        - _Call and exit should be compatible with:_

          `docstate(Arg1)'  ( `docstate/1')


 -- PREDICATE: clean_current_refs/1:
     *Usage:*
        - _Description:_ Clean the data stored by `prepare_current_refs/1'.

        - _Call and exit should be compatible with:_

          `docstate(Arg1)'  ( `docstate/1')


 -- REGTYPE: secttree/1:
     *Usage:*
        - _Description:_ A tree of sections


 -- PREDICATE: secttree_resolve/3:
     *Usage:* `secttree_resolve(LabelName,Tree,Link)'
        - _Description:_ Locate in the section tree `Tree' the
          section with label name `LabelName' and return the `Link'
          to the section.

        - _Call and exit should be compatible with:_

          `LabelName' is a string (a list of character codes).   ( `string/1')

          Intermediate tree representation for documentation  ( `doctree/1')

          A link to a document label  ( `doclink/1')



File: lpdoc-3.0.0.info.tmp,  Node: Error Messages,  Next: Resolution of Bibliographical References,  Prev: Database of Documentation References,  Up: Top

28 Error Messages
*****************

*Author(s):* Manuel Hermenegildo.

* Menu:

* Usage and interface (autodoc_errors)::
* Documentation on exports (autodoc_errors)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_errors),  Next: Documentation on exports (autodoc_errors),  Prev: Error Messages,  Up: Error Messages

28.1 Usage and interface (`autodoc_errors')
===========================================

   * *Library usage:*

     `:- use_module(library(autodoc_errors)).'

   * *Exports:*

        - _Predicates:_

          `error_text/3'.

   * *Other modules used:*

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_errors),  Prev: Usage and interface (autodoc_errors),  Up: Error Messages

28.2 Documentation on exports (`autodoc_errors')
================================================

 -- PREDICATE: error_text/3:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Resolution of Bibliographical References,  Next: Auxiliary Definitions,  Prev: Error Messages,  Up: Top

29 Resolution of Bibliographical References
*******************************************

*Author(s):* Manuel Hermenegildo (original version), Jose F. Morales.

   This module provides a predicate to resolve the bibliographical
references found during the generation of documentation.

* Menu:

* Usage and interface (autodoc_bibrefs)::
* Documentation on exports (autodoc_bibrefs)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_bibrefs),  Next: Documentation on exports (autodoc_bibrefs),  Prev: Resolution of Bibliographical References,  Up: Resolution of Bibliographical References

29.1 Usage and interface (`autodoc_bibrefs')
============================================

   * *Library usage:*

     `:- use_module(library(autodoc_bibrefs)).'

   * *Exports:*

        - _Predicates:_

          `resolve_bibliography/1'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(autodoc_doctree))', `lpdocsrc(src(autodoc_refsdb))', `lpdocsrc(src(autodoc_aux))', `lpdocsrc(src(autodoc_settings))', `lpdocsrc(src(autodoc_parse))'.

        - _System library modules:_

          `dict', `aggregates', `terms', `file_utils', `lists', `format', `make/make_rt', `make/system_extra'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_bibrefs),  Prev: Usage and interface (autodoc_bibrefs),  Up: Resolution of Bibliographical References

29.2 Documentation on exports (`autodoc_bibrefs')
=================================================

 -- PREDICATE: resolve_bibliography/1:
     *Usage:* `resolve_bibliography(DocSt)'
        - _Description:_ This predicate resolves bibliographical
          references. The algorithm is as follows:
             * Write all the bibliographical references to a `.aux'
               file.

             * Invoke BibTeX with a customized `.bst' file that
               generates a pseudo-docstring.

             * Load the docstring and fix its syntax.

             * Parse the docstring as a doctree.

             * Extract `(Label,Ref)' pairs from `bibitem' commands.

          Both the docstring and label/reference pairs are kept in
          the `DocSt', and used later to map symbolic references to
          textual labels.

        - _The following properties should hold at call time:_

          `docstate(DocSt)'  ( `docstate/1')



File: lpdoc-3.0.0.info.tmp,  Node: Auxiliary Definitions,  Next: Image Handling,  Prev: Resolution of Bibliographical References,  Up: Top

30 Auxiliary Definitions
************************

*Author(s):* Manuel Hermenegildo, Jose F. Morales.

* Menu:

* Usage and interface (autodoc_aux)::
* Documentation on exports (autodoc_aux)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_aux),  Next: Documentation on exports (autodoc_aux),  Prev: Auxiliary Definitions,  Up: Auxiliary Definitions

30.1 Usage and interface (`autodoc_aux')
========================================

   * *Library usage:*

     `:- use_module(library(autodoc_aux)).'

   * *Exports:*

        - _Predicates:_

          `read_file/2', `ascii_blank_lines/2', `sh_exec/2'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_settings))'.

        - _System library modules:_

          `messages', `system', `make/system_extra', `lists'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_aux),  Prev: Usage and interface (autodoc_aux),  Up: Auxiliary Definitions

30.2 Documentation on exports (`autodoc_aux')
=============================================

 -- PREDICATE: read_file/2:
     No further documentation available for this predicate.


 -- PREDICATE: ascii_blank_lines/2:
     No further documentation available for this predicate.


 -- PREDICATE: sh_exec/2:
     No further documentation available for this predicate.



File: lpdoc-3.0.0.info.tmp,  Node: Image Handling,  Next: References,  Prev: Auxiliary Definitions,  Up: Top

31 Image Handling
*****************

*Author(s):* Jose F. Morales.

   This module defines the handling of image commands. It defines
predicates to locate and convert images in the different formats
required for documentation.

   *Note_ This part needs better documentation. - JFMC*

* Menu:

* Usage and interface (autodoc_images)::
* Documentation on exports (autodoc_images)::


File: lpdoc-3.0.0.info.tmp,  Node: Usage and interface (autodoc_images),  Next: Documentation on exports (autodoc_images),  Prev: Image Handling,  Up: Image Handling

31.1 Usage and interface (`autodoc_images')
===========================================

   * *Library usage:*

     `:- use_module(library(autodoc_images)).'

   * *Exports:*

        - _Predicates:_

          `locate_and_convert_image/4', `clean_image_cache/0'.

   * *Other modules used:*

        - _Application modules:_

          `lpdocsrc(src(autodoc_state))', `lpdocsrc(src(autodoc_filesystem))', `lpdocsrc(src(autodoc_settings))', `lpdocsrc(src(autodoc_aux))'.

        - _System library modules:_

          `terms', `make/make_rt', `make/system_extra', `system', `errhandle', `messages', `format'.

        - _Internal (engine) modules:_

          `term_basic', `arithmetic', `atomic_basic', `attributes', `basic_props', `basiccontrol', `data_facts', `exceptions', `io_aux', `io_basic', `prolog_flags', `streams_basic', `system_info', `term_compare', `term_typing', `hiord_rt', `debugger_support'.


File: lpdoc-3.0.0.info.tmp,  Node: Documentation on exports (autodoc_images),  Prev: Usage and interface (autodoc_images),  Up: Image Handling

31.2 Documentation on exports (`autodoc_images')
================================================

 -- PREDICATE: locate_and_convert_image/4:
     *Usage:*
     `locate_and_convert_image(SrcSpecS,AcceptedFormats,DocSt,TargetFileS)'
        - _Description:_ The image at `SrcSpecS' is located (as one
          of the known formats `known_format/1') and converted to one
          of the `AcceptedFormats'. The target file is called
          `TargetFileS'

        - _Call and exit should be compatible with:_

          `SrcSpecS' is a string (a list of character codes).   ( `string/1')

          `AcceptedFormats' is a list of `atom's.   ( `list/2')

          `docstate(DocSt)'  ( `docstate/1')

          `TargetFileS' is a string (a list of character codes).   ( `string/1')


 -- PREDICATE: clean_image_cache/0:
     *Usage:*
        - _Description:_ Clean the cache for image copy/conversions.



File: lpdoc-3.0.0.info.tmp,  Node: References,  Next: Library/Module Index,  Prev: Image Handling,  Up: Top

References
**********

*[Bue95]*
     F. Bueno.
     The CIAO Multiparadigm Compiler: A User's Manual.
     Technical Report CLIP8/95.0, Facultad de Informa'tica, UPM, June
     1995.

*[Bue98]*
     F. Bueno.
     Using Assertions for Static Debugging of CLP: A Manual.
     Technical Report CLIP1/98.0, DISCIPL Project/CLIP Group, UPM,
     June 1998.

*[DEDC96]*
     P. Deransart, A. Ed-Dbali, and L. Cervoni.
     _Prolog: The Standard_.
     Springer-Verlag, 1996.

*[DL93]*
     S. K. Debray and N. W. Lin.
     Cost Analysis of Logic Programs.
     _ACM Transactions on Programming Languages and Systems_,
     15(5):826-875, November 1993.

*[DLGH97]*
     S.K. Debray, P. Lo'pez-Garci'a, and M. Hermenegildo.
     Non-Failure Analysis for Logic Programs.
     In _1997 International Conference on Logic Programming_, pages
     48-62, Cambridge, MA, June 1997. MIT Press, Cambridge, MA.

*[DLGHL97]*
     S. K. Debray, P. Lo'pez-Garci'a, M. Hermenegildo, and N.-W. Lin.
     Lower Bound Cost Estimation for Logic Programs.
     In _1997 International Logic Programming Symposium_, pages
     291-305. MIT Press, Cambridge, MA, October 1997.

*[Her99]*
     M. Hermenegildo.
     A Documentation Generator for Logic Programming Systems.
     Technical Report CLIP10/99.0, Facultad de Informa'tica, UPM,
     September 1999.

*[Her00]*
     M. Hermenegildo.
     A Documentation Generator for (C)LP Systems.
     In _International Conference on Computational Logic, CL2000_,
     number 1861 in LNAI, pages 1345-1361. Springer-Verlag, July 2000.

*[JL88]*
     D. Jacobs and A. Langen.
     Compilation of Logic Programs for Restricted And-Parallelism.
     In _European Symposium on Programming_, pages 284-297, 1988.

*[JM94]*
     J. Jaffar and M.J. Maher.
     Constraint Logic Programming: A Survey.
     _Journal of Logic Programming_, 19/20:503-581, 1994.

*[Knu84]*
     D. Knuth.
     Literate programming.
     _Computer Journal_, 27:97-111, 1984.

*[LGHD96]*
     P. Lo'pez-Garci'a, M. Hermenegildo, and S. K. Debray.
     A Methodology for Granularity Based Control of Parallelism in
     Logic Programs.
     _Journal of Symbolic Computation, Special Issue on Parallel
     Symbolic Computation_, 21(4-6):715-734, 1996.

*[MH89]*
     K. Muthukumar and M. Hermenegildo.
     Determination of Variable Dependence Information at Compile-Time
     Through Abstract Interpretation.
     In _1989 North American Conference on Logic Programming_, pages
     166-189. MIT Press, October 1989.

*[PBH97]*
     G. Puebla, F. Bueno, and M. Hermenegildo.
     An Assertion Language for Debugging of Constraint Logic Programs.
     Technical Report CLIP2/97.1, Facultad de Informa'tica, UPM, July
     1997.

*[PBH98]*
     G. Puebla, F. Bueno, and M. Hermenegildo.
     A Framework for Assertion-based Debugging in Constraint Logic
     Programming.
     In _Proceedings of the JICSLP'98 Workshop on Types for CLP_,
     pages 3-15, Manchester, UK, June 1998.

*[PBH00]*
     G. Puebla, F. Bueno, and M. Hermenegildo.
     An Assertion Language for Constraint Logic Programs.
     In P. Deransart, M. Hermenegildo, and J. Maluszynski, editors,
     _Analysis and Visualization Tools for Constraint Programming_,
     number 1870 in LNCS, pages 23-61. Springer-Verlag, September
     2000.



File: lpdoc-3.0.0.info.tmp,  Node: Library/Module Index,  Next: Predicate/Method Index,  Prev: References,  Up: Top

Library/Module Index
********************

 [index ]
* Menu:

* assertions:                            The Ciao assertion package.
                                                              (line 7)
* assertions_props:                      Types and properties related to assertions.
                                                              (line 7)
* autodoc:                               Documentation Generation Library.
                                                              (line 6)
* autodoc_aux:                           Auxiliary Definitions.
                                                              (line 7)
* autodoc_bibrefs:                       Resolution of Bibliographical References.
                                                              (line 7)
* autodoc_doctree:                       Documentation Abstract Syntax Tree.
                                                              (line 7)
* autodoc_errors:                        Error Messages.      (line 7)
* autodoc_filesystem:                    Filesystem Abstraction.
                                                              (line 7)
* autodoc_html:                          HTML Backend.        (line 7)
* autodoc_html_resources:                Resource Handling for the HTML Backend.
                                                              (line 7)
* autodoc_html_template:                 Template Support for the HTML Backend.
                                                              (line 7)
* autodoc_images:                        Image Handling.      (line 7)
* autodoc_index:                         Indexing Commands (Definition and Formatting).
                                                              (line 7)
* autodoc_man:                           Man Pages (man) Backend.
                                                              (line 7)
* autodoc_refsdb:                        Database of Documentation References.
                                                              (line 7)
* autodoc_settings:                      Access to Default Settings.
                                                              (line 7)
* autodoc_state:                         Internal State for Documentation Generation.
                                                              (line 7)
* autodoc_structure:                     Handling the Document Structure.
                                                              (line 7)
* autodoc_texinfo:                       Texinfo Backend.     (line 6)
* basic_props:                           Basic data types and properties.
                                                              (line 7)
* comments:                              Documentation Mark-up Language and Declarations.
                                                              (line 6)
* example_module:                        Auto Documenter Output for the Example Module.
                                                              (line 6)
* Generating:                            Generating Installing and Accessing Manuals.
                                                              (line 6)
* lpdoc_examples:                        An Example - Documenting a Library Module.
                                                              (line 7)
* lpdoc_install:                         Installing lpdoc.    (line 6)
* meta_props:                            Meta-properties.     (line 7)
* native_props:                          Properties which are native to analyzers.
                                                              (line 7)
* regtypes:                              Declaring regular types.
                                                              (line 7)
* rtchecks:                              Run-time checking of assertions.
                                                              (line 7)
* unittest:                              Unit Testing Library.
                                                              (line 6)


File: lpdoc-3.0.0.info.tmp,  Node: Predicate/Method Index,  Next: Property Index,  Prev: Library/Module Index,  Up: Top

Predicate/Method Index
**********************

 [index ]
* Menu:

* absfile_for_aux/3:                     Documentation on exports (autodoc_filesystem).
                                                            (line  81)
* absfile_for_subtarget/4:               Documentation on exports (autodoc_filesystem).
                                                            (line  87)
* absfile_to_relfile/3:                  Documentation on exports (autodoc_filesystem).
                                                            (line 110)
* all_component_specs/1:                 Documentation on exports (autodoc_structure).
                                                            (line  33)
* all_indices/2:                         Documentation on exports (autodoc_state).
                                                            (line 223)
* all_setting_values/2:                  Documentation on exports (autodoc_settings).
                                                            (line  37)
* ascii_blank_lines/2:                   Documentation on exports (autodoc_aux).
                                                            (line  10)
* autodoc_compute_grefs/3:               Documentation on exports (autodoc).
                                                            (line  83)
* autodoc_escape_string_hook/5 <1>:      Documentation on multifiles (autodoc_html).
                                                            (line   6)
* autodoc_escape_string_hook/5 <2>:      Documentation on multifiles (autodoc_texinfo).
                                                            (line   7)
* autodoc_escape_string_hook/5:          Documentation on multifiles (autodoc_doctree).
                                                            (line  14)
* autodoc_finish/1:                      Documentation on exports (autodoc).
                                                            (line  95)
* autodoc_finish_hook/1 <1>:             Documentation on multifiles (autodoc_man).
                                                            (line  22)
* autodoc_finish_hook/1 <2>:             Documentation on multifiles (autodoc_html).
                                                            (line  29)
* autodoc_finish_hook/1 <3>:             Documentation on multifiles (autodoc_texinfo).
                                                            (line  30)
* autodoc_finish_hook/1:                 Documentation on multifiles (autodoc).
                                                            (line   7)
* autodoc_gen_alternative/2:             Documentation on exports (autodoc).
                                                            (line  99)
* autodoc_gen_alternative_hook/2 <1>:    Documentation on multifiles (autodoc_man).
                                                            (line  29)
* autodoc_gen_alternative_hook/2 <2>:    Documentation on multifiles (autodoc_html).
                                                            (line  36)
* autodoc_gen_alternative_hook/2 <3>:    Documentation on multifiles (autodoc_texinfo).
                                                            (line  37)
* autodoc_gen_alternative_hook/2:        Documentation on multifiles (autodoc).
                                                            (line  14)
* autodoc_gen_doctree/5:                 Documentation on exports (autodoc).
                                                            (line  42)
* autodoc_rw_command_hook/4 <1>:         Documentation on multifiles (autodoc_man).
                                                            (line   6)
* autodoc_rw_command_hook/4 <2>:         Documentation on multifiles (autodoc_html).
                                                            (line  13)
* autodoc_rw_command_hook/4 <3>:         Documentation on multifiles (autodoc_texinfo).
                                                            (line  14)
* autodoc_rw_command_hook/4:             Documentation on multifiles (autodoc_doctree).
                                                            (line   7)
* autodoc_translate_doctree/3:           Documentation on exports (autodoc).
                                                            (line  89)
* backend_alt_format/2:                  Documentation on exports (autodoc_state).
                                                            (line  66)
* backend_ignores_components/1:          Documentation on exports (autodoc_state).
                                                            (line  60)
* bibtex/1:                              Documentation on exports (autodoc_settings).
                                                            (line  78)
* bind_dict_varnames/1:                  Documentation on exports (autodoc_state).
                                                            (line 239)
* callme/2:                              Documentation on multifiles (meta_props).
                                                            (line   7)
* check/1:                               Documentation on exports (assertions_doc).
                                                            (line   7)
* check_setting/1:                       Documentation on exports (autodoc_settings).
                                                            (line  17)
* clean_all/0:                           Documentation on exports (autodoc_filesystem).
                                                            (line 117)
* clean_all_temporal/0:                  Documentation on exports (autodoc_filesystem).
                                                            (line 125)
* clean_current_refs/1:                  Documentation on exports (autodoc_refsdb).
                                                            (line  20)
* clean_docs_no_texi/0:                  Documentation on exports (autodoc_filesystem).
                                                            (line 121)
* clean_docstr/0:                        Documentation on exports (autodoc_structure).
                                                            (line  13)
* clean_fs_db/0:                         Documentation on exports (autodoc_filesystem).
                                                            (line  45)
* clean_image_cache/0:                   Documentation on exports (autodoc_images).
                                                            (line  25)
* clean_intermediate/0:                  Documentation on exports (autodoc_filesystem).
                                                            (line 129)
* clean_tex_intermediate/0:              Documentation on exports (autodoc_filesystem).
                                                            (line 133)
* cmd_type/1:                            Documentation on exports (autodoc_doctree).
                                                            (line   6)
* codetype/1:                            Documentation on exports (autodoc_index).
                                                            (line  43)
* compute_refs_and_biblio/1:             Documentation on exports (autodoc_refsdb).
                                                            (line   6)
* convertc/1:                            Documentation on exports (autodoc_settings).
                                                            (line 110)
* doc_id_type/3:                         Documentation on exports (comments).
                                                            (line 541)
* doclink_at/2:                          Documentation on exports (autodoc_doctree).
                                                            (line  85)
* doclink_is_local/1:                    Documentation on exports (autodoc_doctree).
                                                            (line  89)
* docst_backend/2:                       Documentation on exports (autodoc_state).
                                                            (line  89)
* docst_currmod/2:                       Documentation on exports (autodoc_state).
                                                            (line  93)
* docst_currmod_is_main/1:               Documentation on exports (autodoc_state).
                                                            (line 137)
* docst_gdata/3:                         Documentation on exports (autodoc_state).
                                                            (line 188)
* docst_gdata_clean/1:                   Documentation on exports (autodoc_state).
                                                            (line 207)
* docst_gdata_query/2:                   Documentation on exports (autodoc_state).
                                                            (line 195)
* docst_gdata_query/3:                   Documentation on exports (autodoc_state).
                                                            (line 199)
* docst_gdata_restore/1:                 Documentation on exports (autodoc_state).
                                                            (line 203)
* docst_gvar_restore/2:                  Documentation on exports (autodoc_state).
                                                            (line 215)
* docst_gvar_save/2:                     Documentation on exports (autodoc_state).
                                                            (line 211)
* docst_has_index/2:                     Documentation on exports (autodoc_state).
                                                            (line 219)
* docst_inputfile/2:                     Documentation on exports (autodoc_state).
                                                            (line 109)
* docst_mdata_assertz/2:                 Documentation on exports (autodoc_state).
                                                            (line 180)
* docst_mdata_clean/1:                   Documentation on exports (autodoc_state).
                                                            (line 176)
* docst_mdata_save/1:                    Documentation on exports (autodoc_state).
                                                            (line 184)
* docst_message/2:                       Documentation on exports (autodoc_state).
                                                            (line 125)
* docst_message/3:                       Documentation on exports (autodoc_state).
                                                            (line 129)
* docst_modname/2:                       Documentation on exports (autodoc_state).
                                                            (line 146)
* docst_modtype/2:                       Documentation on exports (autodoc_state).
                                                            (line 263)
* docst_mvar_get/3:                      Documentation on exports (autodoc_state).
                                                            (line 172)
* docst_mvar_lookup/3:                   Documentation on exports (autodoc_state).
                                                            (line 164)
* docst_mvar_replace/4:                  Documentation on exports (autodoc_state).
                                                            (line 168)
* docst_new_no_src/4:                    Documentation on exports (autodoc_state).
                                                            (line 113)
* docst_new_sub/3:                       Documentation on exports (autodoc_state).
                                                            (line 121)
* docst_new_with_src/6:                  Documentation on exports (autodoc_state).
                                                            (line 117)
* docst_no_components/1:                 Documentation on exports (autodoc_state).
                                                            (line 141)
* docst_opt/2:                           Documentation on exports (autodoc_state).
                                                            (line 133)
* docst_opts/2:                          Documentation on exports (autodoc_state).
                                                            (line 101)
* docst_set_currmod/3:                   Documentation on exports (autodoc_state).
                                                            (line  97)
* docst_set_opts/3:                      Documentation on exports (autodoc_state).
                                                            (line 105)
* docstr_node/4:                         Documentation on exports (autodoc_structure).
                                                            (line   6)
* doctree_concat/3:                      Documentation on exports (autodoc_doctree).
                                                            (line  71)
* doctree_insert_before_section/3:       Documentation on exports (autodoc_doctree).
                                                            (line  57)
* doctree_insert_end/3:                  Documentation on exports (autodoc_doctree).
                                                            (line  43)
* doctree_is_empty/1:                    Documentation on exports (autodoc_doctree).
                                                            (line  16)
* doctree_prepare_docst_translate_and_write/3: Documentation on exports (autodoc_doctree).
                                                            (line 147)
* doctree_putvars/5:                     Documentation on exports (autodoc_doctree).
                                                            (line 117)
* doctree_restore/2:                     Documentation on exports (autodoc_doctree).
                                                            (line 110)
* doctree_save/2:                        Documentation on exports (autodoc_doctree).
                                                            (line 107)
* doctree_scan_and_save_refs/2:          Documentation on exports (autodoc_doctree).
                                                            (line 136)
* doctree_simplify/2:                    Documentation on exports (autodoc_doctree).
                                                            (line 113)
* doctree_to_rawtext/3:                  Documentation on exports (autodoc_doctree).
                                                            (line 151)
* doctree_translate_and_write/3:         Documentation on exports (autodoc_doctree).
                                                            (line 165)
* dvips/1:                               Documentation on exports (autodoc_settings).
                                                            (line  90)
* empty_doctree/1:                       Documentation on exports (autodoc_doctree).
                                                            (line  34)
* ensure_cache_dir/1:                    Documentation on exports (autodoc_filesystem).
                                                            (line  67)
* ensure_output_dir/1:                   Documentation on exports (autodoc_filesystem).
                                                            (line  63)
* ensure_output_dir_prepared/2:          Documentation on exports (autodoc).
                                                            (line  22)
* error_text/3:                          Documentation on exports (autodoc_errors).
                                                            (line   6)
* escape_string/4:                       Documentation on exports (autodoc_doctree).
                                                            (line 169)
* false/1:                               Documentation on exports (assertions_doc).
                                                            (line  75)
* file_format_name/2:                    Documentation on exports (autodoc_filesystem).
                                                            (line  23)
* file_format_provided_by_backend/3:     Documentation on exports (autodoc_filesystem).
                                                            (line  31)
* fmt_html_template/3:                   Documentation on exports (autodoc_html_template).
                                                            (line  18)
* fmt_idx_env/7:                         Documentation on exports (autodoc_index).
                                                            (line  51)
* fmt_index/3:                           Documentation on exports (autodoc_index).
                                                            (line  55)
* fmt_infodir_entry/3:                   Documentation on exports (autodoc).
                                                            (line  68)
* get_autodoc_opts/3:                    Documentation on exports (autodoc).
                                                            (line  28)
* get_cache_dir/2:                       Documentation on exports (autodoc_filesystem).
                                                            (line  57)
* get_command_option/1:                  Documentation on exports (autodoc_settings).
                                                            (line  41)
* get_doc/4:                             Documentation on exports (autodoc_state).
                                                            (line 227)
* get_doc_field/3:                       Documentation on exports (autodoc_state).
                                                            (line 231)
* get_doc_field_dict/3:                  Documentation on exports (autodoc_state).
                                                            (line 235)
* get_first_loc_for_pred/3:              Documentation on exports (autodoc_state).
                                                            (line 267)
* get_idxbase/3:                         Documentation on exports (autodoc_index).
                                                            (line  10)
* get_idxsub/2:                          Documentation on exports (autodoc_index).
                                                            (line   6)
* get_mainmod/1:                         Documentation on exports (autodoc_structure).
                                                            (line  25)
* get_mainmod_spec/1:                    Documentation on exports (autodoc_structure).
                                                            (line  29)
* get_mod_doc/3:                         Documentation on exports (autodoc_state).
                                                            (line 246)
* get_output_dir/2:                      Documentation on exports (autodoc_filesystem).
                                                            (line  51)
* get_subbase/3:                         Documentation on exports (autodoc_filesystem).
                                                            (line  95)
* htmlview/1:                            Documentation on exports (autodoc_settings).
                                                            (line  74)
* idx_get_indices/3:                     Documentation on exports (autodoc_index).
                                                            (line  35)
* img_url/2:                             Documentation on exports (autodoc_html_template).
                                                            (line   6)
* index_comment/2:                       Documentation on exports (autodoc).
                                                            (line   6)
* infodir_base/2:                        Documentation on exports (autodoc_texinfo).
                                                            (line   6)
* insert_show_toc/3:                     Documentation on exports (autodoc_doctree).
                                                            (line 209)
* is/2:                                  Documentation on internals (example_module).
                                                            (line  44)
* is_index_cmd/1:                        Documentation on exports (autodoc_index).
                                                            (line  39)
* is_nonempty_doctree/1:                 Documentation on exports (autodoc_doctree).
                                                            (line  25)
* is_version/1:                          Documentation on exports (autodoc_doctree).
                                                            (line 185)
* labgen_clean/1:                        Documentation on exports (autodoc_state).
                                                            (line 156)
* labgen_get/2:                          Documentation on exports (autodoc_state).
                                                            (line 160)
* labgen_init/1:                         Documentation on exports (autodoc_state).
                                                            (line 152)
* load_vpaths/0:                         Documentation on exports (autodoc_settings).
                                                            (line  50)
* locate_and_convert_image/4:            Documentation on exports (autodoc_images).
                                                            (line   6)
* lpdoc_option/1:                        Documentation on exports (autodoc_settings).
                                                            (line   6)
* main_absfile_for_subtarget/3:          Documentation on exports (autodoc_filesystem).
                                                            (line  77)
* main_absfile_in_format/2:              Documentation on exports (autodoc_filesystem).
                                                            (line  71)
* main_output_name/2:                    Documentation on exports (autodoc_filesystem).
                                                            (line  91)
* makeinfo/1:                            Documentation on exports (autodoc_settings).
                                                            (line  98)
* makertf/1:                             Documentation on exports (autodoc_settings).
                                                            (line 102)
* mytype/1:                              Documentation on exports (example_module).
                                                            (line 168)
* normalize_index_cmd/3:                 Documentation on exports (autodoc_index).
                                                            (line  47)
* option_comment/2:                      Documentation on exports (autodoc_state).
                                                            (line  11)
* p/1:                                   Documentation on exports (example_module).
                                                            (line  91)
* p/3:                                   Documentation on multifiles (example_module).
                                                            (line   7)
* p/5:                                   Documentation on exports (example_module).
                                                            (line 102)
* parse_structure/0:                     Documentation on exports (autodoc_structure).
                                                            (line  17)
* pdfview/1:                             Documentation on exports (autodoc_settings).
                                                            (line  66)
* prepare_current_refs/1:                Documentation on exports (autodoc_refsdb).
                                                            (line  10)
* prepare_mathjax/0:                     Documentation on exports (autodoc_html_resources).
                                                            (line  10)
* prepare_web_skel/1:                    Documentation on exports (autodoc_html_resources).
                                                            (line   6)
* ps2pdf/1:                              Documentation on exports (autodoc_settings).
                                                            (line  94)
* psview/1:                              Documentation on exports (autodoc_settings).
                                                            (line  70)
* q/1:                                   Documentation on exports (example_module).
                                                            (line 228)
* q/2:                                   Documentation on exports (example_module).
                                                            (line  40)
* r/1:                                   Documentation on exports (example_module).
                                                            (line  70)
* read_file/2:                           Documentation on exports (autodoc_aux).
                                                            (line   6)
* requested_file_formats/1:              Documentation on exports (autodoc_settings).
                                                            (line  45)
* reset_output_dir_db/0:                 Documentation on exports (autodoc).
                                                            (line  18)
* resolve_bibliography/1:                Documentation on exports (autodoc_bibrefs).
                                                            (line   6)
* rtftohlp/1:                            Documentation on exports (autodoc_settings).
                                                            (line 106)
* s/1:                                   Documentation on exports (example_module).
                                                            (line 211)
* section_prop/2:                        Documentation on exports (autodoc_doctree).
                                                            (line  99)
* section_select_prop/3:                 Documentation on exports (autodoc_doctree).
                                                            (line 103)
* secttree_resolve/3:                    Documentation on exports (autodoc_refsdb).
                                                            (line  34)
* setting_value/2:                       Documentation on exports (autodoc_settings).
                                                            (line  33)
* setting_value_or_default/2:            Documentation on exports (autodoc_settings).
                                                            (line  21)
* setting_value_or_default/3:            Documentation on exports (autodoc_settings).
                                                            (line  29)
* sh_exec/2:                             Documentation on exports (autodoc_aux).
                                                            (line  14)
* standalone_docstr/1:                   Documentation on exports (autodoc_structure).
                                                            (line  21)
* supported_file_format/1:               Documentation on exports (autodoc_filesystem).
                                                            (line  27)
* t/5:                                   Documentation on exports (example_module).
                                                            (line 172)
* tex/1:                                 Documentation on exports (autodoc_settings).
                                                            (line  82)
* texindex/1:                            Documentation on exports (autodoc_settings).
                                                            (line  86)
* top_suffix/2:                          Documentation on exports (autodoc_state).
                                                            (line  72)
* true/1:                                Documentation on exports (assertions_doc).
                                                            (line  59)
* trust/1:                               Documentation on exports (assertions_doc).
                                                            (line  26)
* typeindex/5:                           Documentation on exports (autodoc_index).
                                                            (line  14)
* u/3:                                   Documentation on exports (example_module).
                                                            (line 132)
* using_mathjax/1:                       Documentation on exports (autodoc_html_resources).
                                                            (line  14)
* verify_settings/0:                     Documentation on exports (autodoc_settings).
                                                            (line  13)
* version_date/2:                        Documentation on exports (autodoc_doctree).
                                                            (line 193)
* version_numstr/2:                      Documentation on exports (autodoc_doctree).
                                                            (line 197)
* version_patch/2:                       Documentation on exports (autodoc_doctree).
                                                            (line 189)
* version_string/2:                      Documentation on exports (autodoc_doctree).
                                                            (line 203)
* viewer/3:                              Documentation on exports (autodoc_settings).
                                                            (line  54)
* w/1:                                   Documentation on exports (example_module).
                                                            (line 157)
* xdvi/1:                                Documentation on exports (autodoc_settings).
                                                            (line  58)
* xdvisize/1:                            Documentation on exports (autodoc_settings).
                                                            (line  62)


File: lpdoc-3.0.0.info.tmp,  Node: Property Index,  Next: Regular Type Index,  Prev: Predicate/Method Index,  Up: Top

Property Index
**************

 [index ]
* Menu:

* bind_ins/1:                            Documentation on exports (basic_props).
                                                            (line 890)
* call/2:                                Documentation on exports (meta_props).
                                                            (line   6)
* clique/1:                              Documentation on exports (native_props).
                                                            (line   6)
* clique_1/1:                            Documentation on exports (native_props).
                                                            (line  24)
* compat/2:                              Documentation on exports (basic_props).
                                                            (line 707)
* constraint/1:                          Documentation on exports (native_props).
                                                            (line  42)
* covered/1:                             Documentation on exports (native_props).
                                                            (line  57)
* covered/2:                             Documentation on exports (native_props).
                                                            (line  68)
* deprecated/1:                          Documentation on exports (basic_props).
                                                            (line 769)
* docstring/1 <1>:                       Documentation on exports (assertions_props).
                                                            (line 356)
* docstring/1:                           Documentation on exports (comments).
                                                            (line   6)
* equiv/2:                               Documentation on exports (basic_props).
                                                            (line 883)
* error_free/1:                          Documentation on exports (basic_props).
                                                            (line 897)
* eval/1:                                Documentation on exports (basic_props).
                                                            (line 876)
* exception/1:                           Documentation on exports (native_props).
                                                            (line  81)
* exception/2:                           Documentation on exports (native_props).
                                                            (line  88)
* fails/1:                               Documentation on exports (native_props).
                                                            (line  96)
* filter/2:                              Documentation on exports (basic_props).
                                                            (line 911)
* finite_solutions/1:                    Documentation on exports (native_props).
                                                            (line 111)
* have_choicepoints/1:                   Documentation on exports (native_props).
                                                            (line 124)
* head_pattern/1:                        Documentation on exports (assertions_props).
                                                            (line  51)
* indep/1:                               Documentation on exports (native_props).
                                                            (line 131)
* indep/2:                               Documentation on exports (native_props).
                                                            (line 142)
* inst/2:                                Documentation on exports (basic_props).
                                                            (line 734)
* instance/2:                            Documentation on exports (native_props).
                                                            (line 603)
* is_det/1:                              Documentation on exports (native_props).
                                                            (line 152)
* iso/1:                                 Documentation on exports (basic_props).
                                                            (line 757)
* linear/1:                              Documentation on exports (native_props).
                                                            (line 167)
* long/1:                                Documentation on exports (example_module).
                                                            (line 145)
* member/2:                              Documentation on exports (basic_props).
                                                            (line 506)
* memo/1:                                Documentation on exports (basic_props).
                                                            (line 904)
* mshare/1:                              Documentation on exports (native_props).
                                                            (line 183)
* mut_exclusive/1:                       Documentation on exports (native_props).
                                                            (line 204)
* nabody/1:                              Documentation on exports (assertions_props).
                                                            (line 203)
* native/1:                              Documentation on exports (basic_props).
                                                            (line 837)
* native/2:                              Documentation on exports (basic_props).
                                                            (line 850)
* no_choicepoints/1:                     Documentation on exports (native_props).
                                                            (line 217)
* no_exception/1:                        Documentation on exports (native_props).
                                                            (line 224)
* no_exception/2:                        Documentation on exports (native_props).
                                                            (line 232)
* no_rtcheck/1:                          Documentation on exports (basic_props).
                                                            (line 863)
* no_signal/1:                           Documentation on exports (native_props).
                                                            (line 240)
* no_signal/2:                           Documentation on exports (native_props).
                                                            (line 248)
* non_det/1:                             Documentation on exports (native_props).
                                                            (line 256)
* nonground/1:                           Documentation on exports (native_props).
                                                            (line 269)
* not_covered/1:                         Documentation on exports (native_props).
                                                            (line 279)
* not_fails/1:                           Documentation on exports (native_props).
                                                            (line 290)
* not_further_inst/2:                    Documentation on exports (basic_props).
                                                            (line 787)
* not_mut_exclusive/1:                   Documentation on exports (native_props).
                                                            (line 306)
* num_solutions/2:                       Documentation on exports (native_props).
                                                            (line 319)
* pe_type/1:                             Documentation on exports (basic_props).
                                                            (line 922)
* possibly_fails/1:                      Documentation on exports (native_props).
                                                            (line 357)
* possibly_nondet/1:                     Documentation on exports (native_props).
                                                            (line 371)
* prop/2:                                Documentation on exports (meta_props).
                                                            (line  21)
* prop_abs/1:                            Documentation on internals (meta_props).
                                                            (line   7)
* regtype/1:                             Documentation on exports (basic_props).
                                                            (line 825)
* regtype/2:                             Documentation on exports (meta_props).
                                                            (line  30)
* relations/2:                           Documentation on exports (native_props).
                                                            (line 383)
* sideff/2:                              Documentation on exports (basic_props).
                                                            (line 799)
* sideff_hard/1:                         Documentation on exports (native_props).
                                                            (line 395)
* sideff_pure/1:                         Documentation on exports (native_props).
                                                            (line 403)
* sideff_soft/1:                         Documentation on exports (native_props).
                                                            (line 410)
* signal/1:                              Documentation on exports (native_props).
                                                            (line 418)
* signal/2:                              Documentation on exports (native_props).
                                                            (line 425)
* signals/2:                             Documentation on exports (native_props).
                                                            (line 433)
* size/2:                                Documentation on exports (native_props).
                                                            (line 441)
* size/3:                                Documentation on exports (native_props).
                                                            (line 447)
* size_lb/2:                             Documentation on exports (native_props).
                                                            (line 453)
* size_metric/3:                         Documentation on exports (native_props).
                                                            (line 485)
* size_metric/4:                         Documentation on exports (native_props).
                                                            (line 493)
* size_o/2:                              Documentation on exports (native_props).
                                                            (line 466)
* size_ub/2:                             Documentation on exports (native_props).
                                                            (line 472)
* solutions/2:                           Documentation on exports (native_props).
                                                            (line 344)
* steps/2:                               Documentation on exports (native_props).
                                                            (line 503)
* steps_lb/2:                            Documentation on exports (native_props).
                                                            (line 516)
* steps_o/2:                             Documentation on exports (native_props).
                                                            (line 530)
* steps_ub/2:                            Documentation on exports (native_props).
                                                            (line 538)
* stringcommand/1:                       Documentation on exports (comments).
                                                            (line  39)
* supported_option/1:                    Documentation on exports (autodoc_state).
                                                            (line   6)
* tau/1:                                 Documentation on exports (native_props).
                                                            (line 552)
* terminates/1:                          Documentation on exports (native_props).
                                                            (line 568)
* test_type/2:                           Documentation on exports (native_props).
                                                            (line 579)
* throws/2:                              Documentation on exports (native_props).
                                                            (line 587)
* user_output/2:                         Documentation on exports (native_props).
                                                            (line 595)


File: lpdoc-3.0.0.info.tmp,  Node: Regular Type Index,  Next: Declaration Index,  Prev: Property Index,  Up: Top

Regular Type Index
******************

 [index ]
* Menu:

* aorb/1:                                Documentation on exports (example_module).
                                                            (line  17)
* assrt_body/1:                          Documentation on exports (assertions_props).
                                                            (line   6)
* assrt_status/1:                        Documentation on exports (assertions_props).
                                                            (line 312)
* assrt_type/1:                          Documentation on exports (assertions_props).
                                                            (line 325)
* atm/1:                                 Documentation on exports (basic_props).
                                                            (line 177)
* atm_or_atm_list/1:                     Documentation on exports (basic_props).
                                                            (line 685)
* backend_id/1:                          Documentation on exports (autodoc_state).
                                                            (line  55)
* bar/1:                                 Documentation on exports (example_module).
                                                            (line   6)
* basename/1:                            Documentation on exports (autodoc_filesystem).
                                                            (line  11)
* baz/1:                                 Documentation on exports (example_module).
                                                            (line  11)
* c_assrt_body/1:                        Documentation on exports (assertions_props).
                                                            (line 213)
* callable/1:                            Documentation on exports (basic_props).
                                                            (line 329)
* character_code/1:                      Documentation on exports (basic_props).
                                                            (line 598)
* complex_arg_property/1:                Documentation on exports (assertions_props).
                                                            (line 106)
* complex_goal_property/1:               Documentation on exports (assertions_props).
                                                            (line 176)
* constant/1:                            Documentation on exports (basic_props).
                                                            (line 305)
* dictionary/1:                          Documentation on exports (assertions_props).
                                                            (line 208)
* doclabel/1:                            Documentation on exports (autodoc_doctree).
                                                            (line  80)
* doclink/1:                             Documentation on exports (autodoc_doctree).
                                                            (line  75)
* docstate/1:                            Documentation on exports (autodoc_state).
                                                            (line  79)
* doctokens/1:                           Documentation on exports (autodoc_doctree).
                                                            (line  93)
* doctree/1:                             Documentation on exports (autodoc_doctree).
                                                            (line  10)
* filename/1:                            Documentation on exports (autodoc_filesystem).
                                                            (line   6)
* filetype/1:                            Documentation on exports (comments).
                                                            (line 529)
* flag_values/1:                         Documentation on exports (basic_props).
                                                            (line 917)
* flt/1:                                 Documentation on exports (basic_props).
                                                            (line 100)
* g_assrt_body/1:                        Documentation on exports (assertions_props).
                                                            (line 275)
* gnd/1:                                 Documentation on exports (basic_props).
                                                            (line 242)
* gndstr/1:                              Documentation on exports (basic_props).
                                                            (line 277)
* int/1:                                 Documentation on exports (basic_props).
                                                            (line  30)
* list/1 <1>:                            Documentation on exports (example_module).
                                                            (line 250)
* list/1:                                Documentation on exports (basic_props).
                                                            (line 418)
* list/2 <1>:                            Documentation on internals (example_module).
                                                            (line   7)
* list/2:                                Documentation on exports (basic_props).
                                                            (line 448)
* list_or_aorb/2:                        Documentation on exports (example_module).
                                                            (line  32)
* modtype/1:                             Documentation on exports (autodoc_state).
                                                            (line 250)
* nlist/2:                               Documentation on exports (basic_props).
                                                            (line 478)
* nnegint/1:                             Documentation on exports (basic_props).
                                                            (line  67)
* num/1:                                 Documentation on exports (basic_props).
                                                            (line 140)
* num_code/1:                            Documentation on exports (basic_props).
                                                            (line 648)
* operator_specifier/1:                  Documentation on exports (basic_props).
                                                            (line 354)
* predfunctor/1:                         Documentation on exports (assertions_props).
                                                            (line 344)
* predname/1:                            Documentation on exports (basic_props).
                                                            (line 654)
* property_conjunction/1:                Documentation on exports (assertions_props).
                                                            (line 122)
* property_starterm/1:                   Documentation on exports (assertions_props).
                                                            (line 142)
* propfunctor/1:                         Documentation on exports (assertions_props).
                                                            (line 350)
* s_assrt_body/1:                        Documentation on exports (assertions_props).
                                                            (line 238)
* secttree/1:                            Documentation on exports (autodoc_refsdb).
                                                            (line  29)
* sequence/2:                            Documentation on exports (basic_props).
                                                            (line 538)
* sequence_or_list/2:                    Documentation on exports (basic_props).
                                                            (line 570)
* string/1:                              Documentation on exports (basic_props).
                                                            (line 620)
* struct/1:                              Documentation on exports (basic_props).
                                                            (line 213)
* subtarget/1:                           Documentation on exports (autodoc_filesystem).
                                                            (line  17)
* term/1:                                Documentation on exports (basic_props).
                                                            (line   6)
* time_struct/1:                         Documentation on internals (comments).
                                                            (line 489)
* tree_of/2:                             Documentation on exports (example_module).
                                                            (line  23)
* version_descriptor/1:                  Documentation on exports (comments).
                                                            (line 513)
* version_maintenance_type/1:            Documentation on internals (comments).
                                                            (line 501)
* version_number/1:                      Documentation on internals (comments).
                                                            (line 463)
* ymd_date/1:                            Documentation on internals (comments).
                                                            (line 476)


File: lpdoc-3.0.0.info.tmp,  Node: Declaration Index,  Next: Concept Index,  Prev: Regular Type Index,  Up: Top

Declaration Index
*****************

 [index ]
* Menu:

* calls/1:                               Documentation on new declarations (assertions_doc).
                                                            (line  72)
* calls/2:                               Documentation on new declarations (assertions_doc).
                                                            (line  88)
* comment/2:                             Documentation on new declarations (assertions_doc).
                                                            (line 368)
* comp/1:                                Documentation on new declarations (assertions_doc).
                                                            (line 166)
* comp/2:                                Documentation on new declarations (assertions_doc).
                                                            (line 185)
* decl/1:                                Documentation on new declarations (assertions_doc).
                                                            (line 329)
* decl/2:                                Documentation on new declarations (assertions_doc).
                                                            (line 339)
* doc/2 <1>:                             Documentation on new declarations (assertions_doc).
                                                            (line 353)
* doc/2:                                 Documentation on internals (comments).
                                                            (line   7)
* entry/1:                               Documentation on new declarations (assertions_doc).
                                                            (line 243)
* exit/1:                                Documentation on new declarations (assertions_doc).
                                                            (line 269)
* exit/2:                                Documentation on new declarations (assertions_doc).
                                                            (line 287)
* modedef/1:                             Documentation on new declarations (assertions_doc).
                                                            (line 302)
* pred/1:                                Documentation on new declarations (assertions_doc).
                                                            (line   6)
* pred/2:                                Documentation on new declarations (assertions_doc).
                                                            (line  33)
* prop/1:                                Documentation on new declarations (assertions_doc).
                                                            (line 199)
* prop/2:                                Documentation on new declarations (assertions_doc).
                                                            (line 229)
* regtype/1:                             Documentation on new declarations (regtypes_doc).
                                                            (line   6)
* regtype/2:                             Documentation on new declarations (regtypes_doc).
                                                            (line  68)
* success/1:                             Documentation on new declarations (assertions_doc).
                                                            (line 102)
* success/2:                             Documentation on new declarations (assertions_doc).
                                                            (line 121)
* test/1:                                Documentation on new declarations (assertions_doc).
                                                            (line 136)
* test/2:                                Documentation on new declarations (assertions_doc).
                                                            (line 150)
* texec/1:                               Documentation on new declarations (assertions_doc).
                                                            (line  47)
* texec/2:                               Documentation on new declarations (assertions_doc).
                                                            (line  58)


File: lpdoc-3.0.0.info.tmp,  Node: Concept Index,  Next: Author Index,  Prev: Declaration Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* :                                      Version/Change Log.
                                                            (line 130)
* .bib files <1>:                        Documentation on exports (comments).
                                                            (line 274)
* .bib files:                            Generating a manual.
                                                            (line 116)
* @! command:                            Documentation on exports (comments).
                                                            (line 487)
* @" command:                            Documentation on exports (comments).
                                                            (line 418)
* @' command:                            Documentation on exports (comments).
                                                            (line 409)
* @. command:                            Documentation on exports (comments).
                                                            (line 427)
* @.. command:                           Documentation on exports (comments).
                                                            (line 415)
* @= command:                            Documentation on exports (comments).
                                                            (line 424)
* @? command:                            Documentation on exports (comments).
                                                            (line 484)
* @^ command:                            Documentation on exports (comments).
                                                            (line 412)
* @` command:                            Documentation on exports (comments).
                                                            (line 406)
* @AA command:                           Documentation on exports (comments).
                                                            (line 466)
* @aa command:                           Documentation on exports (comments).
                                                            (line 463)
* @AE command:                           Documentation on exports (comments).
                                                            (line 460)
* @ae command:                           Documentation on exports (comments).
                                                            (line 457)
* @apl command:                          Documentation on exports (comments).
                                                            (line 244)
* @author command:                       Documentation on exports (comments).
                                                            (line 306)
* @b command:                            Documentation on exports (comments).
                                                            (line 448)
* @begin{alert} command:                 Documentation on exports (comments).
                                                            (line 116)
* @begin{cartouche} command:             Documentation on exports (comments).
                                                            (line 109)
* @begin{description} command:           Documentation on exports (comments).
                                                            (line  86)
* @begin{displaymath} command:           Documentation on exports (comments).
                                                            (line 329)
* @begin{enumerate} command:             Documentation on exports (comments).
                                                            (line  78)
* @begin{itemize} command:               Documentation on exports (comments).
                                                            (line  66)
* @begin{verbatim} command:              Documentation on exports (comments).
                                                            (line 101)
* @bf command:                           Documentation on exports (comments).
                                                            (line 139)
* @bullet command:                       Documentation on exports (comments).
                                                            (line 502)
* @c command:                            Documentation on exports (comments).
                                                            (line 442)
* @cindex command:                       Documentation on exports (comments).
                                                            (line 189)
* @cite command:                         Documentation on exports (comments).
                                                            (line 272)
* @comment command:                      Documentation on exports (comments).
                                                            (line  62)
* @concept command:                      Documentation on exports (comments).
                                                            (line 196)
* @copyright command:                    Documentation on exports (comments).
                                                            (line 496)
* @d command:                            Documentation on exports (comments).
                                                            (line 445)
* @decl command:                         Documentation on exports (comments).
                                                            (line 225)
* @defmathcmd/2 command:                 Documentation on exports (comments).
                                                            (line 341)
* @defmathcmd/3 command:                 Documentation on exports (comments).
                                                            (line 336)
* @em command:                           Documentation on exports (comments).
                                                            (line 143)
* @email command:                        Documentation on exports (comments).
                                                            (line 298)
* @end{alert} command:                   Documentation on exports (comments).
                                                            (line 120)
* @end{cartouche} command:               Documentation on exports (comments).
                                                            (line 113)
* @end{description} command:             Documentation on exports (comments).
                                                            (line  98)
* @end{displaymath} command:             Documentation on exports (comments).
                                                            (line 333)
* @end{enumerate} command:               Documentation on exports (comments).
                                                            (line  83)
* @end{itemize} command:                 Documentation on exports (comments).
                                                            (line  75)
* @end{verbatim} command:                Documentation on exports (comments).
                                                            (line 106)
* @file command:                         Documentation on exports (comments).
                                                            (line 251)
* @footnote command:                     Documentation on exports (comments).
                                                            (line 132)
* @H command:                            Documentation on exports (comments).
                                                            (line 436)
* @hfill command:                        Documentation on exports (comments).
                                                            (line 135)
* @i command:                            Documentation on exports (comments).
                                                            (line 490)
* @image command:                        Documentation on exports (comments).
                                                            (line 389)
* @include command:                      Documentation on exports (comments).
                                                            (line 354)
* @includedef command:                   Documentation on exports (comments).
                                                            (line 382)
* @includefact command:                  Documentation on exports (comments).
                                                            (line 372)
* @includeverbatim command:              Documentation on exports (comments).
                                                            (line 361)
* @index command:                        Documentation on exports (comments).
                                                            (line 181)
* @iso command:                          Documentation on exports (comments).
                                                            (line 499)
* @item command:                         Documentation on exports (comments).
                                                            (line  71)
* @j command:                            Documentation on exports (comments).
                                                            (line 493)
* @key command:                          Documentation on exports (comments).
                                                            (line 151)
* @L command:                            Documentation on exports (comments).
                                                            (line 478)
* @l command:                            Documentation on exports (comments).
                                                            (line 475)
* @lib command:                          Documentation on exports (comments).
                                                            (line 235)
* @math command:                         Documentation on exports (comments).
                                                            (line 326)
* @noindent command:                     Documentation on exports (comments).
                                                            (line 165)
* @O command:                            Documentation on exports (comments).
                                                            (line 472)
* @o command:                            Documentation on exports (comments).
                                                            (line 469)
* @OE command:                           Documentation on exports (comments).
                                                            (line 454)
* @oe command:                           Documentation on exports (comments).
                                                            (line 451)
* @op command:                           Documentation on exports (comments).
                                                            (line 215)
* @p command:                            Documentation on exports (comments).
                                                            (line 161)
* @pred command:                         Documentation on exports (comments).
                                                            (line 205)
* @ref command:                          Documentation on exports (comments).
                                                            (line 285)
* @result command:                       Documentation on exports (comments).
                                                            (line 505)
* @section command:                      Documentation on exports (comments).
                                                            (line 123)
* @sp command:                           Documentation on exports (comments).
                                                            (line 157)
* @ss command:                           Documentation on exports (comments).
                                                            (line 481)
* @subsection command:                   Documentation on exports (comments).
                                                            (line 129)
* @t command:                            Documentation on exports (comments).
                                                            (line 439)
* @today command:                        Documentation on exports (comments).
                                                            (line 314)
* @tt command:                           Documentation on exports (comments).
                                                            (line 147)
* @u command:                            Documentation on exports (comments).
                                                            (line 430)
* @uref command:                         Documentation on exports (comments).
                                                            (line 290)
* @v command:                            Documentation on exports (comments).
                                                            (line 433)
* @var command:                          Documentation on exports (comments).
                                                            (line 258)
* @version command:                      Documentation on exports (comments).
                                                            (line 317)
* @~ command:                            Documentation on exports (comments).
                                                            (line 421)
* A4 paper:                              Generating a manual.
                                                            (line 139)
* abstract:                              Documentation on internals (comments).
                                                            (line 142)
* accents:                               Documentation on exports (comments).
                                                            (line 402)
* acceptable modes:                      Documentation on exports (assertions_props).
                                                            (line  69)
* acknowledgements:                      Documentation on internals (comments).
                                                            (line 109)
* address:                               Documentation on internals (comments).
                                                            (line  95)
* appendix:                              Documentation on internals (comments).
                                                            (line 176)
* application:                           lpdoc operation - source and target files.
                                                            (line  19)
* assertion body syntax:                 Documentation on exports (assertions_props).
                                                            (line   7)
* assertions:                            Documentation Mark-up Language and Declarations.
                                                            (line  19)
* author:                                Documentation on internals (comments).
                                                            (line  75)
* automatic documentation:               Documentation Generation Library.
                                                            (line  16)
* automatic documentation library:       Documentation Generation Library.
                                                            (line   8)
* avoiding indentation:                  Documentation on exports (comments).
                                                            (line 167)
* bibliographic citations:               Documentation on exports (comments).
                                                            (line 267)
* bibliographic entries:                 Generating a manual.
                                                            (line 117)
* bibliographic entry:                   Documentation on exports (comments).
                                                            (line 272)
* bibtex <1>:                            Documentation on exports (comments).
                                                            (line 274)
* bibtex:                                Generating a manual.
                                                            (line 117)
* blank lines:                           Documentation on exports (comments).
                                                            (line 157)
* bold face:                             Documentation on exports (comments).
                                                            (line 139)
* bug:                                   Documentation on internals (comments).
                                                            (line 264)
* calls assertion:                       Documentation on new declarations (assertions_doc).
                                                            (line  73)
* check assertion:                       Documentation on exports (assertions_doc).
                                                            (line   9)
* Ciao:                                  Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* comment:                               Documentation on exports (comments).
                                                            (line  62)
* comment assertion:                     Documentation on new declarations (assertions_doc).
                                                            (line 355)
* comments, machine readable:            The Ciao assertion package.
                                                            (line  23)
* comp assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 167)
* compatibility properties:              Defining properties.
                                                            (line  34)
* component files:                       lpdoc operation - source and target files.
                                                            (line  45)
* contents area:                         Installing a generated manual in a public area.
                                                            (line  31)
* copyright:                             Documentation on internals (comments).
                                                            (line 125)
* date:                                  Documentation on exports (comments).
                                                            (line 314)
* decl assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 330)
* description list:                      Documentation on exports (comments).
                                                            (line  86)
* document structure:                    Generating a manual.
                                                            (line  65)
* documentation format:                  Documentation Generation Library.
                                                            (line  31)
* documentation strings:                 Documentation on internals (comments).
                                                            (line   9)
* emacs Ciao mode:                       Documentation on internals (comments).
                                                            (line 314)
* Emacs, accessing info files:           Accessing info manuals.
                                                            (line  10)
* Emacs, generating manuals from:        Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* Emacs, LPdoc mode:                     Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* email address:                         Documentation on exports (comments).
                                                            (line 298)
* email addresses:                       Documentation on exports (comments).
                                                            (line 268)
* emphasis face:                         Documentation on exports (comments).
                                                            (line 143)
* encapsulated postscript:               Documentation on exports (comments).
                                                            (line 390)
* entry assertion:                       Documentation on new declarations (assertions_doc).
                                                            (line 244)
* enumerated list:                       Documentation on exports (comments).
                                                            (line  78)
* escape sequences:                      Documentation on exports (comments).
                                                            (line  14)
* example of lpdoc use:                  An Example - Documenting a Library Module.
                                                            (line   9)
* exit assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 270)
* false assertion:                       Documentation on exports (assertions_doc).
                                                            (line  77)
* fixed format text:                     Documentation on exports (comments).
                                                            (line 101)
* fixed-width font:                      Documentation on exports (comments).
                                                            (line 147)
* footnote:                              Documentation on exports (comments).
                                                            (line 132)
* formatting commands <1>:               Some attention points.
                                                            (line   6)
* formatting commands:                   Documentation on exports (comments).
                                                            (line   9)
* framed box:                            Documentation on exports (comments).
                                                            (line 109)
* generating from Emacs:                 Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* generating manuals:                    Generating Installing and Accessing Manuals.
                                                            (line   8)
* hard side-effects:                     Documentation on exports (native_props).
                                                            (line 399)
* html index page:                       Installing a generated manual in a public area.
                                                            (line  32)
* image file:                            Documentation on exports (comments).
                                                            (line 390)
* images, inserting:                     Documentation on exports (comments).
                                                            (line 389)
* images, scaling:                       Documentation on exports (comments).
                                                            (line 394)
* including a predicate definition:      Documentation on exports (comments).
                                                            (line 386)
* including an image:                    Documentation on exports (comments).
                                                            (line 389)
* including code:                        Documentation on exports (comments).
                                                            (line 347)
* including files:                       Documentation on exports (comments).
                                                            (line 347)
* including images:                      Documentation on exports (comments).
                                                            (line 347)
* including or not authors:              Generating a manual.
                                                            (line  76)
* including or not bug info:             Generating a manual.
                                                            (line  75)
* including or not changelog:            Generating a manual.
                                                            (line  76)
* including or not versions, patches:    Generating a manual.
                                                            (line  75)
* indentation, avoiding:                 Documentation on exports (comments).
                                                            (line 166)
* index pages out of order:              Installing a generated manual in a public area.
                                                            (line  32)
* info path list:                        Accessing info manuals.
                                                            (line  56)
* installation:                          Overview of this document.
                                                            (line  13)
* installation, of manuals:              Installing a generated manual in a public area.
                                                            (line   6)
* instantiation properties:              Defining properties.
                                                            (line  33)
* internals manual:                      Writing comments which document version/patch changes.
                                                            (line  24)
* introduction:                          Documentation on internals (comments).
                                                            (line 157)
* italics face:                          Documentation on exports (comments).
                                                            (line 143)
* item in an itemized list:              Documentation on exports (comments).
                                                            (line  71)
* itemized list:                         Documentation on exports (comments).
                                                            (line  66)
* keyboard key:                          Documentation on exports (comments).
                                                            (line 151)
* LaTeX notation:                        Documentation on exports (comments).
                                                            (line 323)
* letter size paper:                     Generating a manual.
                                                            (line 154)
* library:                               lpdoc operation - source and target files.
                                                            (line  13)
* literate programming:                  Enhancing the documentation being generated.
                                                            (line  35)
* log of changes:                        Documentation on internals (comments).
                                                            (line 281)
* machine readable comments:             Documentation on internals (comments).
                                                            (line   8)
* main body:                             Documentation on internals (comments).
                                                            (line 158)
* main file:                             lpdoc operation - source and target files.
                                                            (line  44)
* Makefile:                              Other software packages required (lpdoc).
                                                            (line  16)
* module comment:                        Documentation on internals (comments).
                                                            (line 158)
* module declaration:                    Documentation Generation Library.
                                                            (line  14)
* new item in description list:          Documentation on exports (comments).
                                                            (line  94)
* one-sided printing:                    Generating a manual.
                                                            (line  76)
* page numbering, changing:              Generating a manual.
                                                            (line 128)
* page size, changing:                   Generating a manual.
                                                            (line 133)
* page style, changing:                  Generating a manual.
                                                            (line 133)
* paragraph break:                       Documentation on exports (comments).
                                                            (line 161)
* parametric property:                   Documentation on internals (meta_props).
                                                            (line  10)
* parametric regular type abstractions:  Documentation on internals (meta_props).
                                                            (line  14)
* parametric type functor:               Documentation on new declarations (regtypes_doc).
                                                            (line  29)
* parts in a large document:             Splitting large documents into parts.
                                                            (line  13)
* parts in large documents:              Documentation on internals (comments).
                                                            (line 435)
* planned improvement:                   Documentation on internals (comments).
                                                            (line 264)
* pred assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line   7)
* program section:                       Documentation on internals (comments).
                                                            (line 208)
* program subsection:                    Documentation on internals (comments).
                                                            (line 224)
* Prolog, Ciao:                          Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* prop assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 200)
* properties of computations:            Defining properties.
                                                            (line  11)
* properties of execution states:        Defining properties.
                                                            (line   9)
* properties, basic:                     Basic data types and properties.
                                                            (line   9)
* properties, native:                    Properties which are native to analyzers.
                                                            (line  10)
* property abstraction:                  Documentation on internals (meta_props).
                                                            (line  10)
* references:                            Documentation on exports (comments).
                                                            (line 268)
* regtype assertion:                     Documentation on new declarations (regtypes_doc).
                                                            (line   7)
* regular type expression:               Documentation on new declarations (regtypes_doc).
                                                            (line  49)
* running unit tests:                    Unit Testing Library.
                                                            (line  45)
* section:                               Documentation on exports (comments).
                                                            (line 123)
* sections:                              Documentation on exports (comments).
                                                            (line 268)
* SETTINGS.pl <1>:                       Generating a manual.
                                                            (line  24)
* SETTINGS.pl:                           Generating a manual from the Ciao Emacs mode.
                                                            (line  16)
* sharing pieces of text:                Documentation on exports (comments).
                                                            (line 376)
* sharing sets:                          Documentation on exports (native_props).
                                                            (line 186)
* soft side-effects:                     Documentation on exports (native_props).
                                                            (line 414)
* space, extra lines:                    Documentation on exports (comments).
                                                            (line 157)
* spcae, horizontal fill:                Documentation on exports (comments).
                                                            (line 135)
* special characters:                    Documentation on exports (comments).
                                                            (line 402)
* strong face:                           Documentation on exports (comments).
                                                            (line 139)
* subsection:                            Documentation on exports (comments).
                                                            (line 129)
* subtitle:                              Documentation on internals (comments).
                                                            (line  32)
* success assertion:                     Documentation on new declarations (assertions_doc).
                                                            (line 103)
* supported documentation formats:       Documentation on exports (autodoc).
                                                            (line  52)
* synopsis section of the man page:      Generating a manual.
                                                            (line  96)
* syntax of formatting commands:         Documentation on exports (comments).
                                                            (line  19)
* system modules:                        Generating a manual.
                                                            (line  61)
* test assertion <1>:                    Unit Testing Library.
                                                            (line  15)
* test assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 137)
* texec assertion:                       Documentation on new declarations (assertions_doc).
                                                            (line  48)
* texinfo:                               Documentation Generation Library.
                                                            (line  51)
* texinfo files:                         lpdoc operation - source and target files.
                                                            (line  23)
* textual comments:                      Documentation Mark-up Language and Declarations.
                                                            (line  18)
* thesis-like style:                     Generating a manual.
                                                            (line 157)
* title:                                 Documentation on internals (comments).
                                                            (line  13)
* true assertion:                        Documentation on exports (assertions_doc).
                                                            (line  61)
* trust assertion:                       Documentation on exports (assertions_doc).
                                                            (line  28)
* two-sided:                             Generating a manual.
                                                            (line  77)
* typewriter-like font:                  Documentation on exports (comments).
                                                            (line 147)
* unit tests:                            Unit Testing Library.
                                                            (line   9)
* Universal Resource Locator:            Documentation on exports (comments).
                                                            (line 290)
* URL:                                   Documentation on exports (comments).
                                                            (line 291)
* urls:                                  Documentation on exports (comments).
                                                            (line 268)
* usage of a command:                    Documentation on exports (comments).
                                                            (line 378)
* usage of the application:              Generating a manual.
                                                            (line  95)
* verbatim text:                         Documentation on exports (comments).
                                                            (line 101)
* version:                               Documentation on exports (comments).
                                                            (line 317)
* version maintenance mode for packages: Documentation on internals (comments).
                                                            (line 332)
* version number:                        Documentation on internals (comments).
                                                            (line 282)
* WWW address:                           Documentation on exports (comments).
                                                            (line 291)


File: lpdoc-3.0.0.info.tmp,  Node: Author Index,  Next: Global Index,  Prev: Concept Index,  Up: Top

Author Index
************

 [index ]
* Menu:

* Anonymous Author 1:                    Auto Documenter Output for the Example Module.
                                                              (line 6)
* Anonymous Author 2:                    Auto Documenter Output for the Example Module.
                                                              (line 6)
* Daniel Cabeza:                         Basic data types and properties.
                                                              (line 7)
* Edison Mera <1>:                       Unit Testing Library.
                                                              (line 6)
* Edison Mera <2>:                       Run-time checking of assertions.
                                                              (line 7)
* Edison Mera:                           Properties which are native to analyzers.
                                                              (line 7)
* Francisco Bueno <1>:                   Meta-properties.     (line 7)
* Francisco Bueno <2>:                   Properties which are native to analyzers.
                                                              (line 7)
* Francisco Bueno <3>:                   Declaring regular types.
                                                              (line 7)
* Francisco Bueno:                       The Ciao assertion package.
                                                              (line 7)
* German Puebla:                         The Ciao assertion package.
                                                              (line 7)
* Jose F. Morales <1>:                   Image Handling.      (line 7)
* Jose F. Morales <2>:                   Auxiliary Definitions.
                                                              (line 7)
* Jose F. Morales <3>:                   Resolution of Bibliographical References.
                                                              (line 7)
* Jose F. Morales <4>:                   Database of Documentation References.
                                                              (line 7)
* Jose F. Morales <5>:                   Indexing Commands (Definition and Formatting).
                                                              (line 7)
* Jose F. Morales <6>:                   Filesystem Abstraction.
                                                              (line 7)
* Jose F. Morales <7>:                   Man Pages (man) Backend.
                                                              (line 7)
* Jose F. Morales <8>:                   Template Support for the HTML Backend.
                                                              (line 7)
* Jose F. Morales <9>:                   Resource Handling for the HTML Backend.
                                                              (line 7)
* Jose F. Morales <10>:                  HTML Backend.        (line 7)
* Jose F. Morales <11>:                  Texinfo Backend.     (line 6)
* Jose F. Morales <12>:                  Access to Default Settings.
                                                              (line 7)
* Jose F. Morales <13>:                  Handling the Document Structure.
                                                              (line 7)
* Jose F. Morales <14>:                  Documentation Abstract Syntax Tree.
                                                              (line 7)
* Jose F. Morales <15>:                  Internal State for Documentation Generation.
                                                              (line 7)
* Jose F. Morales:                       Documentation Generation Library.
                                                              (line 6)
* Manuel Hermenegildo <1>:               Auxiliary Definitions.
                                                              (line 7)
* Manuel Hermenegildo <2>:               Resolution of Bibliographical References.
                                                              (line 7)
* Manuel Hermenegildo <3>:               Error Messages.      (line 7)
* Manuel Hermenegildo <4>:               Man Pages (man) Backend.
                                                              (line 7)
* Manuel Hermenegildo <5>:               Texinfo Backend.     (line 6)
* Manuel Hermenegildo <6>:               Documentation Abstract Syntax Tree.
                                                              (line 7)
* Manuel Hermenegildo <7>:               Internal State for Documentation Generation.
                                                              (line 7)
* Manuel Hermenegildo <8>:               Documentation Generation Library.
                                                              (line 6)
* Manuel Hermenegildo <9>:               Installing lpdoc.    (line 6)
* Manuel Hermenegildo <10>:              An Example - Documenting a Library Module.
                                                              (line 7)
* Manuel Hermenegildo <11>:              Properties which are native to analyzers.
                                                              (line 7)
* Manuel Hermenegildo <12>:              Basic data types and properties.
                                                              (line 7)
* Manuel Hermenegildo <13>:              Declaring regular types.
                                                              (line 7)
* Manuel Hermenegildo <14>:              Types and properties related to assertions.
                                                              (line 7)
* Manuel Hermenegildo <15>:              The Ciao assertion package.
                                                              (line 7)
* Manuel Hermenegildo <16>:              Documentation Mark-up Language and Declarations.
                                                              (line 6)
* Manuel Hermenegildo:                   Generating Installing and Accessing Manuals.
                                                              (line 6)
* Pedro Lopez <1>:                       Properties which are native to analyzers.
                                                              (line 7)
* Pedro Lopez:                           Declaring regular types.
                                                              (line 7)


File: lpdoc-3.0.0.info.tmp,  Node: Global Index,  Prev: Author Index,  Up: Top

Global Index
************

This is a global index containing pointers to places where concepts,
predicates, modes, properties, types, applications, etc., are
referred to  in the text of the document.

 [index ]
* Menu:

* :                                      Version/Change Log.
                                                            (line 130)
* ','/2:                                 Documentation on exports (basic_props).
                                                            (line 540)
* (prop)/2:                              Documentation on exports (meta_props).
                                                            (line  27)
* */2:                                   Documentation on exports (assertions_props).
                                                            (line 145)
* +/1:                                   Documentation on exports (assertions_props).
                                                            (line  65)
* +/2:                                   Documentation on exports (assertions_props).
                                                            (line  95)
* .(autodoc_structure):                  Usage and interface (autodoc_refsdb).
                                                            (line  24)
* .bib files <1>:                        Documentation on exports (comments).
                                                            (line 274)
* .bib files:                            Generating a manual.
                                                            (line 116)
* .cshrc:                                Installing a generated manual in a public area.
                                                            (line  39)
* .profile:                              Installing a generated manual in a public area.
                                                            (line  41)
* ::/2:                                  Usage and interface (assertions_doc).
                                                            (line  23)
* = /2:                                  Documentation on internals (comments).
                                                            (line  27)
* =>/2:                                  Usage and interface (assertions_doc).
                                                            (line  23)
* @! command:                            Documentation on exports (comments).
                                                            (line 487)
* @" command:                            Documentation on exports (comments).
                                                            (line 418)
* @' command:                            Documentation on exports (comments).
                                                            (line 409)
* @. command:                            Documentation on exports (comments).
                                                            (line 427)
* @.. command:                           Documentation on exports (comments).
                                                            (line 415)
* @= command:                            Documentation on exports (comments).
                                                            (line 424)
* @? command:                            Documentation on exports (comments).
                                                            (line 484)
* @^ command:                            Documentation on exports (comments).
                                                            (line 412)
* @` command:                            Documentation on exports (comments).
                                                            (line 406)
* @AA command:                           Documentation on exports (comments).
                                                            (line 466)
* @aa command:                           Documentation on exports (comments).
                                                            (line 463)
* @AE command:                           Documentation on exports (comments).
                                                            (line 460)
* @ae command:                           Documentation on exports (comments).
                                                            (line 457)
* @apl command:                          Documentation on exports (comments).
                                                            (line 244)
* @author command:                       Documentation on exports (comments).
                                                            (line 306)
* @b command:                            Documentation on exports (comments).
                                                            (line 448)
* @begin{alert} command:                 Documentation on exports (comments).
                                                            (line 116)
* @begin{cartouche} command:             Documentation on exports (comments).
                                                            (line 109)
* @begin{description} command:           Documentation on exports (comments).
                                                            (line  86)
* @begin{displaymath} command:           Documentation on exports (comments).
                                                            (line 329)
* @begin{enumerate} command:             Documentation on exports (comments).
                                                            (line  78)
* @begin{itemize} command:               Documentation on exports (comments).
                                                            (line  66)
* @begin{verbatim} command:              Documentation on exports (comments).
                                                            (line 101)
* @bf command:                           Documentation on exports (comments).
                                                            (line 139)
* @bullet command:                       Documentation on exports (comments).
                                                            (line 502)
* @c command:                            Documentation on exports (comments).
                                                            (line 442)
* @cindex command:                       Documentation on exports (comments).
                                                            (line 189)
* @cite command <1>:                     Documentation on exports (comments).
                                                            (line 272)
* @cite command:                         Generating a manual.
                                                            (line 119)
* @comment command:                      Documentation on exports (comments).
                                                            (line  62)
* @concept command:                      Documentation on exports (comments).
                                                            (line 196)
* @copyright command:                    Documentation on exports (comments).
                                                            (line 496)
* @d command:                            Documentation on exports (comments).
                                                            (line 445)
* @decl command:                         Documentation on exports (comments).
                                                            (line 225)
* @defmathcmd/2 command:                 Documentation on exports (comments).
                                                            (line 341)
* @defmathcmd/3 command:                 Documentation on exports (comments).
                                                            (line 336)
* @em command:                           Documentation on exports (comments).
                                                            (line 143)
* @email command:                        Documentation on exports (comments).
                                                            (line 298)
* @end{alert} command:                   Documentation on exports (comments).
                                                            (line 120)
* @end{cartouche} command:               Documentation on exports (comments).
                                                            (line 113)
* @end{description} command:             Documentation on exports (comments).
                                                            (line  98)
* @end{displaymath} command:             Documentation on exports (comments).
                                                            (line 333)
* @end{enumerate} command:               Documentation on exports (comments).
                                                            (line  83)
* @end{itemize} command:                 Documentation on exports (comments).
                                                            (line  75)
* @end{verbatim} command:                Documentation on exports (comments).
                                                            (line 106)
* @file command:                         Documentation on exports (comments).
                                                            (line 251)
* @footnote command:                     Documentation on exports (comments).
                                                            (line 132)
* @H command:                            Documentation on exports (comments).
                                                            (line 436)
* @hfill command:                        Documentation on exports (comments).
                                                            (line 135)
* @i command:                            Documentation on exports (comments).
                                                            (line 490)
* @image command:                        Documentation on exports (comments).
                                                            (line 389)
* @include command:                      Documentation on exports (comments).
                                                            (line 354)
* @includedef command:                   Documentation on exports (comments).
                                                            (line 382)
* @includefact command:                  Documentation on exports (comments).
                                                            (line 372)
* @includeverbatim command:              Documentation on exports (comments).
                                                            (line 361)
* @index command:                        Documentation on exports (comments).
                                                            (line 181)
* @iso command:                          Documentation on exports (comments).
                                                            (line 499)
* @item command:                         Documentation on exports (comments).
                                                            (line  71)
* @j command:                            Documentation on exports (comments).
                                                            (line 493)
* @key command:                          Documentation on exports (comments).
                                                            (line 151)
* @L command:                            Documentation on exports (comments).
                                                            (line 478)
* @l command:                            Documentation on exports (comments).
                                                            (line 475)
* @lib command:                          Documentation on exports (comments).
                                                            (line 235)
* @math command:                         Documentation on exports (comments).
                                                            (line 326)
* @noindent command:                     Documentation on exports (comments).
                                                            (line 165)
* @O command:                            Documentation on exports (comments).
                                                            (line 472)
* @o command:                            Documentation on exports (comments).
                                                            (line 469)
* @OE command:                           Documentation on exports (comments).
                                                            (line 454)
* @oe command:                           Documentation on exports (comments).
                                                            (line 451)
* @op command:                           Documentation on exports (comments).
                                                            (line 215)
* @p command:                            Documentation on exports (comments).
                                                            (line 161)
* @pred command:                         Documentation on exports (comments).
                                                            (line 205)
* @ref command:                          Documentation on exports (comments).
                                                            (line 285)
* @result command:                       Documentation on exports (comments).
                                                            (line 505)
* @section command:                      Documentation on exports (comments).
                                                            (line 123)
* @sp command:                           Documentation on exports (comments).
                                                            (line 157)
* @ss command:                           Documentation on exports (comments).
                                                            (line 481)
* @subsection command:                   Documentation on exports (comments).
                                                            (line 129)
* @t command:                            Documentation on exports (comments).
                                                            (line 439)
* @today command:                        Documentation on exports (comments).
                                                            (line 314)
* @tt command:                           Documentation on exports (comments).
                                                            (line 147)
* @u command:                            Documentation on exports (comments).
                                                            (line 430)
* @uref command:                         Documentation on exports (comments).
                                                            (line 290)
* @v command:                            Documentation on exports (comments).
                                                            (line 433)
* @var command:                          Documentation on exports (comments).
                                                            (line 258)
* @version command:                      Documentation on exports (comments).
                                                            (line 317)
* @~ command:                            Documentation on exports (comments).
                                                            (line 421)
* A4 paper:                              Generating a manual.
                                                            (line 139)
* absfile_for_aux/3 <1>:                 Documentation on exports (autodoc_filesystem).
                                                            (line  81)
* absfile_for_aux/3:                     Usage and interface (autodoc_filesystem).
                                                            (line  14)
* absfile_for_subtarget/4 <1>:           Documentation on exports (autodoc_filesystem).
                                                            (line  87)
* absfile_for_subtarget/4:               Usage and interface (autodoc_filesystem).
                                                            (line  14)
* absfile_to_relfile/3 <1>:              Documentation on exports (autodoc_filesystem).
                                                            (line 110)
* absfile_to_relfile/3:                  Usage and interface (autodoc_filesystem).
                                                            (line  14)
* abstract:                              Documentation on internals (comments).
                                                            (line 142)
* accents:                               Documentation on exports (comments).
                                                            (line 402)
* acceptable modes:                      Documentation on exports (assertions_props).
                                                            (line  69)
* acknowledgements:                      Documentation on internals (comments).
                                                            (line 109)
* address <1>:                           Documentation on internals (comments).
                                                            (line  95)
* address:                               Documentation on exports (comments).
                                                            (line 302)
* aggregates <1>:                        Usage and interface (autodoc_bibrefs).
                                                            (line  24)
* aggregates <2>:                        Usage and interface (autodoc_refsdb).
                                                            (line  28)
* aggregates <3>:                        Usage and interface (autodoc_index).
                                                            (line  24)
* aggregates <4>:                        Usage and interface (autodoc_filesystem).
                                                            (line  28)
* aggregates <5>:                        Usage and interface (autodoc_html_template).
                                                            (line  24)
* aggregates <6>:                        Usage and interface (autodoc_settings).
                                                            (line  20)
* aggregates <7>:                        Usage and interface (autodoc_structure).
                                                            (line  24)
* aggregates <8>:                        Usage and interface (autodoc_state).
                                                            (line  32)
* aggregates:                            Usage and interface (autodoc).
                                                            (line  28)
* all_component_specs/1 <1>:             Documentation on exports (autodoc_structure).
                                                            (line  33)
* all_component_specs/1:                 Usage and interface (autodoc_structure).
                                                            (line  14)
* all_indices/2 <1>:                     Documentation on exports (autodoc_state).
                                                            (line 223)
* all_indices/2:                         Usage and interface (autodoc_state).
                                                            (line  14)
* all_setting_values/2 <1>:              Documentation on exports (autodoc_settings).
                                                            (line  37)
* all_setting_values/2:                  Usage and interface (autodoc_settings).
                                                            (line  14)
* analyzer output:                       Documentation on exports (assertions_doc).
                                                            (line  64)
* Anonymous Author 1:                    Auto Documenter Output for the Example Module.
                                                            (line   6)
* Anonymous Author 2:                    Auto Documenter Output for the Example Module.
                                                            (line   6)
* aorb/1 <1>:                            Documentation on exports (example_module).
                                                            (line  17)
* aorb/1:                                Usage and interface (example_module).
                                                            (line  22)
* appendix:                              Documentation on internals (comments).
                                                            (line 176)
* application:                           lpdoc operation - source and target files.
                                                            (line  19)
* arithexpression/1:                     Documentation on internals (example_module).
                                                            (line  51)
* arithmetic <1>:                        Usage and interface (autodoc_images).
                                                            (line  28)
* arithmetic <2>:                        Usage and interface (autodoc_aux).
                                                            (line  28)
* arithmetic <3>:                        Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* arithmetic <4>:                        Usage and interface (autodoc_errors).
                                                            (line  20)
* arithmetic <5>:                        Usage and interface (autodoc_refsdb).
                                                            (line  32)
* arithmetic <6>:                        Usage and interface (autodoc_index).
                                                            (line  28)
* arithmetic <7>:                        Usage and interface (autodoc_filesystem).
                                                            (line  32)
* arithmetic <8>:                        Usage and interface (autodoc_man).
                                                            (line  22)
* arithmetic <9>:                        Usage and interface (autodoc_html_template).
                                                            (line  28)
* arithmetic <10>:                       Usage and interface (autodoc_html_resources).
                                                            (line  28)
* arithmetic <11>:                       Usage and interface (autodoc_html).
                                                            (line  22)
* arithmetic <12>:                       Usage and interface (autodoc_texinfo).
                                                            (line  32)
* arithmetic <13>:                       Usage and interface (autodoc_settings).
                                                            (line  24)
* arithmetic <14>:                       Usage and interface (autodoc_structure).
                                                            (line  28)
* arithmetic <15>:                       Usage and interface (autodoc_doctree).
                                                            (line  36)
* arithmetic <16>:                       Usage and interface (autodoc_state).
                                                            (line  36)
* arithmetic <17>:                       Usage and interface (autodoc).
                                                            (line  32)
* arithmetic <18>:                       Usage and interface (unittest_doc).
                                                            (line  14)
* arithmetic <19>:                       Usage and interface (rtchecks_doc).
                                                            (line  18)
* arithmetic <20>:                       Usage and interface (example_module).
                                                            (line  40)
* arithmetic <21>:                       Usage and interface (meta_props).
                                                            (line  28)
* arithmetic <22>:                       Usage and interface (native_props).
                                                            (line  28)
* arithmetic <23>:                       Usage and interface (basic_props).
                                                            (line  29)
* arithmetic <24>:                       Usage and interface (assertions_props).
                                                            (line  24)
* arithmetic <25>:                       Documentation on new declarations (assertions_doc).
                                                            (line  79)
* arithmetic <26>:                       Usage and interface (assertions_doc).
                                                            (line  44)
* arithmetic:                            Usage and interface (comments).
                                                            (line  40)
* ascii_blank_lines/2 <1>:               Documentation on exports (autodoc_aux).
                                                            (line  10)
* ascii_blank_lines/2:                   Usage and interface (autodoc_aux).
                                                            (line  14)
* assertion body syntax:                 Documentation on exports (assertions_props).
                                                            (line   7)
* assertion status:                      Documentation on new declarations (assertions_doc).
                                                            (line  60)
* assertions <1>:                        Documentation Generation Library.
                                                            (line  11)
* assertions <2>:                        Types and properties related to assertions.
                                                            (line   9)
* assertions <3>:                        Usage and interface (assertions_doc).
                                                            (line   9)
* assertions <4>:                        The Ciao assertion package.
                                                            (line   7)
* assertions <5>:                        Usage and interface (comments).
                                                            (line  10)
* assertions <6>:                        Documentation Mark-up Language and Declarations.
                                                            (line  19)
* assertions <7>:                        Documenting reexported predicates.
                                                            (line  19)
* assertions <8>:                        Documenting files which are not modules.
                                                            (line  18)
* assertions:                            Overview of this document.
                                                            (line   7)
* assertions/assertions_props <1>:       Usage and interface (autodoc_state).
                                                            (line  32)
* assertions/assertions_props <2>:       Usage and interface (autodoc).
                                                            (line  28)
* assertions/assertions_props <3>:       Usage and interface (regtypes_doc).
                                                            (line  26)
* assertions/assertions_props:           Usage and interface (assertions_doc).
                                                            (line  40)
* assertions/assrt_lib <1>:              Usage and interface (autodoc_state).
                                                            (line  32)
* assertions/assrt_lib:                  Usage and interface (autodoc).
                                                            (line  28)
* assertions/native_props <1>:           Usage and interface (example_module).
                                                            (line  36)
* assertions/native_props:               Usage and interface (basic_props).
                                                            (line  25)
* assertions_props:                      Types and properties related to assertions.
                                                            (line   7)
* assrt_body/1 <1>:                      Documentation on new declarations (regtypes_doc).
                                                            (line  65)
* assrt_body/1 <2>:                      Documentation on exports (assertions_props).
                                                            (line   6)
* assrt_body/1 <3>:                      Usage and interface (assertions_props).
                                                            (line  18)
* assrt_body/1:                          Documentation on new declarations (assertions_doc).
                                                            (line   9)
* assrt_status/1 <1>:                    Documentation on new declarations (regtypes_doc).
                                                            (line  78)
* assrt_status/1 <2>:                    Documentation on exports (assertions_props).
                                                            (line 312)
* assrt_status/1 <3>:                    Usage and interface (assertions_props).
                                                            (line  18)
* assrt_status/1:                        Documentation on new declarations (assertions_doc).
                                                            (line  42)
* assrt_type/1 <1>:                      Documentation on exports (assertions_props).
                                                            (line 325)
* assrt_type/1:                          Usage and interface (assertions_props).
                                                            (line  18)
* atm/1 <1>:                             Documentation on exports (autodoc_index).
                                                            (line  26)
* atm/1 <2>:                             Documentation on exports (autodoc_filesystem).
                                                            (line  38)
* atm/1 <3>:                             Documentation on exports (autodoc_html_template).
                                                            (line  13)
* atm/1 <4>:                             Documentation on exports (autodoc).
                                                            (line  35)
* atm/1 <5>:                             Documentation on exports (basic_props).
                                                            (line 177)
* atm/1 <6>:                             Usage and interface (basic_props).
                                                            (line  19)
* atm/1:                                 Documentation on internals (comments).
                                                            (line 460)
* atm_or_atm_list/1 <1>:                 Documentation on exports (basic_props).
                                                            (line 685)
* atm_or_atm_list/1:                     Usage and interface (basic_props).
                                                            (line  19)
* atom/1 <1>:                            Documentation on exports (autodoc_index).
                                                            (line  24)
* atom/1 <2>:                            Documentation on exports (autodoc_doctree).
                                                            (line 176)
* atom/1:                                Documentation on exports (autodoc).
                                                            (line  13)
* atomic_basic <1>:                      Usage and interface (autodoc_images).
                                                            (line  28)
* atomic_basic <2>:                      Usage and interface (autodoc_aux).
                                                            (line  28)
* atomic_basic <3>:                      Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* atomic_basic <4>:                      Usage and interface (autodoc_errors).
                                                            (line  20)
* atomic_basic <5>:                      Usage and interface (autodoc_refsdb).
                                                            (line  32)
* atomic_basic <6>:                      Usage and interface (autodoc_index).
                                                            (line  28)
* atomic_basic <7>:                      Usage and interface (autodoc_filesystem).
                                                            (line  32)
* atomic_basic <8>:                      Usage and interface (autodoc_man).
                                                            (line  22)
* atomic_basic <9>:                      Usage and interface (autodoc_html_template).
                                                            (line  28)
* atomic_basic <10>:                     Usage and interface (autodoc_html_resources).
                                                            (line  28)
* atomic_basic <11>:                     Usage and interface (autodoc_html).
                                                            (line  22)
* atomic_basic <12>:                     Usage and interface (autodoc_texinfo).
                                                            (line  32)
* atomic_basic <13>:                     Usage and interface (autodoc_settings).
                                                            (line  24)
* atomic_basic <14>:                     Usage and interface (autodoc_structure).
                                                            (line  28)
* atomic_basic <15>:                     Usage and interface (autodoc_doctree).
                                                            (line  36)
* atomic_basic <16>:                     Usage and interface (autodoc_state).
                                                            (line  36)
* atomic_basic <17>:                     Usage and interface (autodoc).
                                                            (line  32)
* atomic_basic <18>:                     Usage and interface (unittest_doc).
                                                            (line  14)
* atomic_basic <19>:                     Usage and interface (rtchecks_doc).
                                                            (line  18)
* atomic_basic <20>:                     Usage and interface (example_module).
                                                            (line  40)
* atomic_basic <21>:                     Usage and interface (meta_props).
                                                            (line  28)
* atomic_basic <22>:                     Usage and interface (native_props).
                                                            (line  28)
* atomic_basic <23>:                     Usage and interface (basic_props).
                                                            (line  29)
* atomic_basic <24>:                     Usage and interface (assertions_props).
                                                            (line  24)
* atomic_basic <25>:                     Usage and interface (assertions_doc).
                                                            (line  44)
* atomic_basic:                          Usage and interface (comments).
                                                            (line  40)
* attributes <1>:                        Usage and interface (autodoc_images).
                                                            (line  28)
* attributes <2>:                        Usage and interface (autodoc_aux).
                                                            (line  28)
* attributes <3>:                        Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* attributes <4>:                        Usage and interface (autodoc_errors).
                                                            (line  20)
* attributes <5>:                        Usage and interface (autodoc_refsdb).
                                                            (line  32)
* attributes <6>:                        Usage and interface (autodoc_index).
                                                            (line  28)
* attributes <7>:                        Usage and interface (autodoc_filesystem).
                                                            (line  32)
* attributes <8>:                        Usage and interface (autodoc_man).
                                                            (line  22)
* attributes <9>:                        Usage and interface (autodoc_html_template).
                                                            (line  28)
* attributes <10>:                       Usage and interface (autodoc_html_resources).
                                                            (line  28)
* attributes <11>:                       Usage and interface (autodoc_html).
                                                            (line  22)
* attributes <12>:                       Usage and interface (autodoc_texinfo).
                                                            (line  32)
* attributes <13>:                       Usage and interface (autodoc_settings).
                                                            (line  24)
* attributes <14>:                       Usage and interface (autodoc_structure).
                                                            (line  28)
* attributes <15>:                       Usage and interface (autodoc_doctree).
                                                            (line  36)
* attributes <16>:                       Usage and interface (autodoc_state).
                                                            (line  36)
* attributes <17>:                       Usage and interface (autodoc).
                                                            (line  32)
* attributes <18>:                       Usage and interface (unittest_doc).
                                                            (line  14)
* attributes <19>:                       Usage and interface (rtchecks_doc).
                                                            (line  18)
* attributes <20>:                       Usage and interface (example_module).
                                                            (line  40)
* attributes <21>:                       Usage and interface (meta_props).
                                                            (line  28)
* attributes <22>:                       Usage and interface (native_props).
                                                            (line  28)
* attributes <23>:                       Usage and interface (basic_props).
                                                            (line  29)
* attributes <24>:                       Usage and interface (assertions_props).
                                                            (line  24)
* attributes <25>:                       Usage and interface (assertions_doc).
                                                            (line  44)
* attributes:                            Usage and interface (comments).
                                                            (line  40)
* author:                                Documentation on internals (comments).
                                                            (line  75)
* author indexing:                       Documentation on internals (comments).
                                                            (line  80)
* autodoc <1>:                           Documentation Generation Library.
                                                            (line   6)
* autodoc <2>:                           Generating a manual.
                                                            (line  78)
* autodoc:                               Overview of this document.
                                                            (line  39)
* autodoc_aux:                           Auxiliary Definitions.
                                                            (line   7)
* autodoc_bibrefs:                       Resolution of Bibliographical References.
                                                            (line   7)
* autodoc_compute_grefs/3 <1>:           Documentation on exports (autodoc).
                                                            (line  83)
* autodoc_compute_grefs/3:               Usage and interface (autodoc).
                                                            (line  14)
* autodoc_doctree:                       Documentation Abstract Syntax Tree.
                                                            (line   7)
* autodoc_errors:                        Error Messages.    (line   7)
* autodoc_escape_string_hook/5 <1>:      Documentation on multifiles (autodoc_html).
                                                            (line   6)
* autodoc_escape_string_hook/5 <2>:      Documentation on multifiles (autodoc_texinfo).
                                                            (line   7)
* autodoc_escape_string_hook/5 <3>:      Usage and interface (autodoc_texinfo).
                                                            (line  18)
* autodoc_escape_string_hook/5 <4>:      Documentation on multifiles (autodoc_doctree).
                                                            (line  14)
* autodoc_escape_string_hook/5:          Usage and interface (autodoc_doctree).
                                                            (line  22)
* autodoc_filesystem:                    Filesystem Abstraction.
                                                            (line   7)
* autodoc_finish/1 <1>:                  Documentation on exports (autodoc).
                                                            (line  95)
* autodoc_finish/1:                      Usage and interface (autodoc).
                                                            (line  14)
* autodoc_finish_hook/1 <1>:             Documentation on multifiles (autodoc_man).
                                                            (line  22)
* autodoc_finish_hook/1 <2>:             Documentation on multifiles (autodoc_html).
                                                            (line  29)
* autodoc_finish_hook/1 <3>:             Documentation on multifiles (autodoc_texinfo).
                                                            (line  30)
* autodoc_finish_hook/1 <4>:             Usage and interface (autodoc_texinfo).
                                                            (line  18)
* autodoc_finish_hook/1 <5>:             Documentation on multifiles (autodoc).
                                                            (line   7)
* autodoc_finish_hook/1:                 Usage and interface (autodoc).
                                                            (line  18)
* autodoc_gen_alternative/2 <1>:         Documentation on exports (autodoc).
                                                            (line  99)
* autodoc_gen_alternative/2:             Usage and interface (autodoc).
                                                            (line  14)
* autodoc_gen_alternative_hook/2 <1>:    Documentation on multifiles (autodoc_man).
                                                            (line  29)
* autodoc_gen_alternative_hook/2 <2>:    Documentation on multifiles (autodoc_html).
                                                            (line  36)
* autodoc_gen_alternative_hook/2 <3>:    Documentation on multifiles (autodoc_texinfo).
                                                            (line  37)
* autodoc_gen_alternative_hook/2 <4>:    Usage and interface (autodoc_texinfo).
                                                            (line  18)
* autodoc_gen_alternative_hook/2 <5>:    Documentation on multifiles (autodoc).
                                                            (line  14)
* autodoc_gen_alternative_hook/2:        Usage and interface (autodoc).
                                                            (line  18)
* autodoc_gen_doctree/5 <1>:             Documentation on exports (autodoc).
                                                            (line  42)
* autodoc_gen_doctree/5:                 Usage and interface (autodoc).
                                                            (line  14)
* autodoc_html <1>:                      HTML Backend.      (line   7)
* autodoc_html:                          Documentation Generation Library.
                                                            (line  32)
* autodoc_html_resources:                Resource Handling for the HTML Backend.
                                                            (line   7)
* autodoc_html_template:                 Template Support for the HTML Backend.
                                                            (line   7)
* autodoc_images:                        Image Handling.    (line   7)
* autodoc_index:                         Indexing Commands (Definition and Formatting).
                                                            (line   7)
* autodoc_man <1>:                       Man Pages (man) Backend.
                                                            (line   7)
* autodoc_man:                           Documentation Generation Library.
                                                            (line  32)
* autodoc_refsdb:                        Database of Documentation References.
                                                            (line   7)
* autodoc_rw_command_hook/4 <1>:         Documentation on multifiles (autodoc_man).
                                                            (line   6)
* autodoc_rw_command_hook/4 <2>:         Documentation on multifiles (autodoc_html).
                                                            (line  13)
* autodoc_rw_command_hook/4 <3>:         Documentation on multifiles (autodoc_texinfo).
                                                            (line  14)
* autodoc_rw_command_hook/4 <4>:         Usage and interface (autodoc_texinfo).
                                                            (line  18)
* autodoc_rw_command_hook/4 <5>:         Documentation on multifiles (autodoc_doctree).
                                                            (line   7)
* autodoc_rw_command_hook/4:             Usage and interface (autodoc_doctree).
                                                            (line  22)
* autodoc_settings:                      Access to Default Settings.
                                                            (line   7)
* autodoc_state:                         Internal State for Documentation Generation.
                                                            (line   7)
* autodoc_structure:                     Handling the Document Structure.
                                                            (line   7)
* autodoc_texinfo <1>:                   Texinfo Backend.   (line   6)
* autodoc_texinfo:                       Documentation Generation Library.
                                                            (line  32)
* autodoc_translate_doctree/3 <1>:       Documentation on exports (autodoc).
                                                            (line  89)
* autodoc_translate_doctree/3:           Usage and interface (autodoc).
                                                            (line  14)
* autodocformats:                        Overview of this document.
                                                            (line  43)
* automatic documentation:               Documentation Generation Library.
                                                            (line  16)
* automatic documentation library <1>:   Documentation Generation Library.
                                                            (line   8)
* automatic documentation library:       Overview of this document.
                                                            (line  39)
* avoiding indentation:                  Documentation on exports (comments).
                                                            (line 167)
* backend_alt_format/2 <1>:              Documentation on exports (autodoc_state).
                                                            (line  66)
* backend_alt_format/2:                  Usage and interface (autodoc_state).
                                                            (line  14)
* backend_id/1 <1>:                      Documentation on exports (autodoc_filesystem).
                                                            (line  40)
* backend_id/1 <2>:                      Documentation on multifiles (autodoc_man).
                                                            (line  13)
* backend_id/1 <3>:                      Documentation on multifiles (autodoc_html).
                                                            (line  20)
* backend_id/1 <4>:                      Documentation on multifiles (autodoc_texinfo).
                                                            (line  21)
* backend_id/1 <5>:                      Documentation on exports (autodoc_state).
                                                            (line  55)
* backend_id/1 <6>:                      Usage and interface (autodoc_state).
                                                            (line  22)
* backend_id/1:                          Documentation on exports (autodoc).
                                                            (line  52)
* backend_ignores_components/1 <1>:      Documentation on exports (autodoc_state).
                                                            (line  60)
* backend_ignores_components/1:          Usage and interface (autodoc_state).
                                                            (line  14)
* bar/1 <1>:                             Documentation on multifiles (example_module).
                                                            (line  27)
* bar/1 <2>:                             Documentation on exports (example_module).
                                                            (line   6)
* bar/1:                                 Usage and interface (example_module).
                                                            (line  22)
* basename/1 <1>:                        Documentation on exports (autodoc_filesystem).
                                                            (line  11)
* basename/1 <2>:                        Usage and interface (autodoc_filesystem).
                                                            (line  18)
* basename/1:                            Documentation on exports (autodoc).
                                                            (line  59)
* bash:                                  Installing a generated manual in a public area.
                                                            (line  41)
* basic_props <1>:                       Usage and interface (autodoc_images).
                                                            (line  28)
* basic_props <2>:                       Usage and interface (autodoc_aux).
                                                            (line  28)
* basic_props <3>:                       Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* basic_props <4>:                       Usage and interface (autodoc_errors).
                                                            (line  20)
* basic_props <5>:                       Usage and interface (autodoc_refsdb).
                                                            (line  32)
* basic_props <6>:                       Usage and interface (autodoc_index).
                                                            (line  28)
* basic_props <7>:                       Usage and interface (autodoc_filesystem).
                                                            (line  32)
* basic_props <8>:                       Usage and interface (autodoc_man).
                                                            (line  22)
* basic_props <9>:                       Usage and interface (autodoc_html_template).
                                                            (line  28)
* basic_props <10>:                      Usage and interface (autodoc_html_resources).
                                                            (line  28)
* basic_props <11>:                      Usage and interface (autodoc_html).
                                                            (line  22)
* basic_props <12>:                      Usage and interface (autodoc_texinfo).
                                                            (line  32)
* basic_props <13>:                      Usage and interface (autodoc_settings).
                                                            (line  24)
* basic_props <14>:                      Usage and interface (autodoc_structure).
                                                            (line  28)
* basic_props <15>:                      Usage and interface (autodoc_doctree).
                                                            (line  36)
* basic_props <16>:                      Usage and interface (autodoc_state).
                                                            (line  36)
* basic_props <17>:                      Usage and interface (autodoc).
                                                            (line  32)
* basic_props <18>:                      Usage and interface (unittest_doc).
                                                            (line  14)
* basic_props <19>:                      Usage and interface (rtchecks_doc).
                                                            (line  18)
* basic_props <20>:                      Usage and interface (example_module).
                                                            (line  40)
* basic_props <21>:                      Usage and interface (meta_props).
                                                            (line  28)
* basic_props <22>:                      Usage and interface (native_props).
                                                            (line  28)
* basic_props <23>:                      Basic data types and properties.
                                                            (line   7)
* basic_props <24>:                      Usage and interface (assertions_props).
                                                            (line  24)
* basic_props <25>:                      Usage and interface (assertions_doc).
                                                            (line  44)
* basic_props <26>:                      Usage and interface (comments).
                                                            (line  40)
* basic_props:                           Overview of this document.
                                                            (line  24)
* basic_props.pl:                        Run-time checking of assertions.
                                                            (line  61)
* basic_props:regtype/1:                 Declaring regular types.
                                                            (line  12)
* basiccontrol <1>:                      Usage and interface (autodoc_images).
                                                            (line  28)
* basiccontrol <2>:                      Usage and interface (autodoc_aux).
                                                            (line  28)
* basiccontrol <3>:                      Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* basiccontrol <4>:                      Usage and interface (autodoc_errors).
                                                            (line  20)
* basiccontrol <5>:                      Usage and interface (autodoc_refsdb).
                                                            (line  32)
* basiccontrol <6>:                      Usage and interface (autodoc_index).
                                                            (line  28)
* basiccontrol <7>:                      Usage and interface (autodoc_filesystem).
                                                            (line  32)
* basiccontrol <8>:                      Usage and interface (autodoc_man).
                                                            (line  22)
* basiccontrol <9>:                      Usage and interface (autodoc_html_template).
                                                            (line  28)
* basiccontrol <10>:                     Usage and interface (autodoc_html_resources).
                                                            (line  28)
* basiccontrol <11>:                     Usage and interface (autodoc_html).
                                                            (line  22)
* basiccontrol <12>:                     Usage and interface (autodoc_texinfo).
                                                            (line  32)
* basiccontrol <13>:                     Usage and interface (autodoc_settings).
                                                            (line  24)
* basiccontrol <14>:                     Usage and interface (autodoc_structure).
                                                            (line  28)
* basiccontrol <15>:                     Usage and interface (autodoc_doctree).
                                                            (line  36)
* basiccontrol <16>:                     Usage and interface (autodoc_state).
                                                            (line  36)
* basiccontrol <17>:                     Usage and interface (autodoc).
                                                            (line  32)
* basiccontrol <18>:                     Usage and interface (unittest_doc).
                                                            (line  14)
* basiccontrol <19>:                     Usage and interface (rtchecks_doc).
                                                            (line  18)
* basiccontrol <20>:                     Usage and interface (example_module).
                                                            (line  40)
* basiccontrol <21>:                     Usage and interface (meta_props).
                                                            (line  28)
* basiccontrol <22>:                     Usage and interface (native_props).
                                                            (line  28)
* basiccontrol <23>:                     Usage and interface (basic_props).
                                                            (line  29)
* basiccontrol <24>:                     Usage and interface (assertions_props).
                                                            (line  24)
* basiccontrol <25>:                     Usage and interface (assertions_doc).
                                                            (line  44)
* basiccontrol:                          Usage and interface (comments).
                                                            (line  40)
* baz(Arg3):                             Documentation on multifiles (example_module).
                                                            (line  29)
* baz/1 <1>:                             Documentation on multifiles (example_module).
                                                            (line  29)
* baz/1 <2>:                             Documentation on exports (example_module).
                                                            (line  11)
* baz/1:                                 Usage and interface (example_module).
                                                            (line  22)
* bibliographic citations:               Documentation on exports (comments).
                                                            (line 267)
* bibliographic entries:                 Generating a manual.
                                                            (line 117)
* bibliographic entry:                   Documentation on exports (comments).
                                                            (line 272)
* bibtex <1>:                            Other software packages required (lpdoc).
                                                            (line  37)
* bibtex <2>:                            Documentation on exports (comments).
                                                            (line 274)
* bibtex <3>:                            Generating a manual.
                                                            (line 117)
* bibtex:                                Version/Change Log.
                                                            (line 517)
* bibtex/1 <1>:                          Documentation on exports (autodoc_settings).
                                                            (line  78)
* bibtex/1:                              Usage and interface (autodoc_settings).
                                                            (line  14)
* bind_dict_varnames/1 <1>:              Documentation on exports (autodoc_state).
                                                            (line 239)
* bind_dict_varnames/1:                  Usage and interface (autodoc_state).
                                                            (line  14)
* bind_ins/1 <1>:                        Documentation on exports (basic_props).
                                                            (line 148)
* bind_ins/1:                            Usage and interface (basic_props).
                                                            (line  15)
* blank lines:                           Documentation on exports (comments).
                                                            (line 157)
* bold face:                             Documentation on exports (comments).
                                                            (line 139)
* bug:                                   Documentation on internals (comments).
                                                            (line 264)
* c_assrt_body/1 <1>:                    Documentation on exports (assertions_props).
                                                            (line 213)
* c_assrt_body/1 <2>:                    Usage and interface (assertions_props).
                                                            (line  18)
* c_assrt_body/1:                        Documentation on new declarations (assertions_doc).
                                                            (line  55)
* c_itf:                                 Version/Change Log.
                                                            (line 399)
* call(T,A):                             Documentation on internals (example_module).
                                                            (line  37)
* call/1:                                Documentation on exports (assertions_props).
                                                            (line 215)
* call/2 <1>:                            Documentation on exports (meta_props).
                                                            (line   6)
* call/2:                                Usage and interface (meta_props).
                                                            (line  18)
* callable/1 <1>:                        Documentation on multifiles (meta_props).
                                                            (line  20)
* callable/1 <2>:                        Documentation on exports (meta_props).
                                                            (line  18)
* callable/1 <3>:                        Documentation on exports (native_props).
                                                            (line 327)
* callable/1 <4>:                        Documentation on exports (basic_props).
                                                            (line 329)
* callable/1:                            Usage and interface (basic_props).
                                                            (line  19)
* callme/2 <1>:                          Documentation on multifiles (meta_props).
                                                            (line   7)
* callme/2:                              Usage and interface (meta_props).
                                                            (line  22)
* calls assertion:                       Documentation on new declarations (assertions_doc).
                                                            (line  73)
* calls/1 <1>:                           Documentation on new declarations (assertions_doc).
                                                            (line  48)
* calls/1:                               Usage and interface (assertions_doc).
                                                            (line  25)
* calls/2 <1>:                           Documentation on new declarations (assertions_doc).
                                                            (line  88)
* calls/2:                               Usage and interface (assertions_doc).
                                                            (line  26)
* character string:                      Some attention points.
                                                            (line  11)
* character_code/1 <1>:                  Documentation on exports (basic_props).
                                                            (line 598)
* character_code/1:                      Usage and interface (basic_props).
                                                            (line  19)
* check assertion:                       Documentation on exports (assertions_doc).
                                                            (line   9)
* Check(X):                              Documentation on exports (native_props).
                                                            (line 332)
* check/1 <1>:                           Documentation on exports (assertions_doc).
                                                            (line   7)
* check/1:                               Usage and interface (assertions_doc).
                                                            (line  19)
* check_setting/1 <1>:                   Documentation on exports (autodoc_settings).
                                                            (line  17)
* check_setting/1:                       Usage and interface (autodoc_settings).
                                                            (line  14)
* Ciao <1>:                              Installing lpdoc.  (line  12)
* Ciao <2>:                              An Example - Documenting a Library Module.
                                                            (line  11)
* Ciao <3>:                              Accessing info manuals.
                                                            (line  89)
* Ciao <4>:                              Enhancing the documentation being generated.
                                                            (line  42)
* Ciao <5>:                              Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* Ciao <6>:                              Overview of this document.
                                                            (line  18)
* Ciao:                                  Introduction.      (line  11)
* Ciao Emacs mode:                       Generating a manual from the Ciao Emacs mode.
                                                            (line   8)
* ciaoc:                                 Version/Change Log.
                                                            (line 316)
* ciaodesrc(makedir(ConfigValues)):      Usage and interface (autodoc_texinfo).
                                                            (line  24)
* ciaopp:                                Properties which are native to analyzers.
                                                            (line  11)
* cjpeg:                                 Other software packages required (lpdoc).
                                                            (line  74)
* clean_all/0 <1>:                       Documentation on exports (autodoc_filesystem).
                                                            (line 117)
* clean_all/0:                           Usage and interface (autodoc_filesystem).
                                                            (line  14)
* clean_all_temporal/0 <1>:              Documentation on exports (autodoc_filesystem).
                                                            (line 125)
* clean_all_temporal/0:                  Usage and interface (autodoc_filesystem).
                                                            (line  14)
* clean_current_refs/1 <1>:              Documentation on exports (autodoc_refsdb).
                                                            (line  20)
* clean_current_refs/1:                  Usage and interface (autodoc_refsdb).
                                                            (line  14)
* clean_docs_no_texi/0 <1>:              Documentation on exports (autodoc_filesystem).
                                                            (line 121)
* clean_docs_no_texi/0:                  Usage and interface (autodoc_filesystem).
                                                            (line  14)
* clean_docstr/0 <1>:                    Documentation on exports (autodoc_structure).
                                                            (line  13)
* clean_docstr/0:                        Usage and interface (autodoc_structure).
                                                            (line  14)
* clean_fs_db/0 <1>:                     Documentation on exports (autodoc_filesystem).
                                                            (line  45)
* clean_fs_db/0:                         Usage and interface (autodoc_filesystem).
                                                            (line  14)
* clean_image_cache/0 <1>:               Documentation on exports (autodoc_images).
                                                            (line  25)
* clean_image_cache/0:                   Usage and interface (autodoc_images).
                                                            (line  14)
* clean_intermediate/0 <1>:              Documentation on exports (autodoc_filesystem).
                                                            (line 129)
* clean_intermediate/0:                  Usage and interface (autodoc_filesystem).
                                                            (line  14)
* clean_tex_intermediate/0 <1>:          Documentation on exports (autodoc_filesystem).
                                                            (line 133)
* clean_tex_intermediate/0:              Usage and interface (autodoc_filesystem).
                                                            (line  14)
* clique/1 <1>:                          Documentation on exports (native_props).
                                                            (line   6)
* clique/1:                              Usage and interface (native_props).
                                                            (line  18)
* clique_1/1 <1>:                        Documentation on exports (native_props).
                                                            (line  24)
* clique_1/1:                            Usage and interface (native_props).
                                                            (line  18)
* CLP:                                   Introduction.      (line  11)
* cmd_type/1 <1>:                        Documentation on exports (autodoc_doctree).
                                                            (line   6)
* cmd_type/1:                            Usage and interface (autodoc_doctree).
                                                            (line  14)
* codetype/1 <1>:                        Documentation on exports (autodoc_index).
                                                            (line  43)
* codetype/1:                            Usage and interface (autodoc_index).
                                                            (line  14)
* comment:                               Documentation on exports (comments).
                                                            (line  62)
* comment assertion:                     Documentation on new declarations (assertions_doc).
                                                            (line 355)
* comment string:                        Documentation on exports (assertions_props).
                                                            (line  38)
* comment/2 <1>:                         Documentation on new declarations (assertions_doc).
                                                            (line 368)
* comment/2 <2>:                         Usage and interface (assertions_doc).
                                                            (line  34)
* comment/2:                             Version/Change Log.
                                                            (line 413)
* comments <1>:                          Documentation Mark-up Language and Declarations.
                                                            (line   6)
* comments <2>:                          Documenting reexported predicates.
                                                            (line  12)
* comments:                              Overview of this document.
                                                            (line   8)
* comments, machine readable:            The Ciao assertion package.
                                                            (line  23)
* CommentType=ack:                       Documentation on internals (comments).
                                                            (line 120)
* CommentType=address:                   Documentation on internals (comments).
                                                            (line 104)
* CommentType=appendix:                  Documentation on internals (comments).
                                                            (line 186)
* CommentType=author:                    Documentation on internals (comments).
                                                            (line  90)
* CommentType=bug:                       Documentation on internals (comments).
                                                            (line 276)
* CommentType=copyright:                 Documentation on internals (comments).
                                                            (line 135)
* CommentType=doinclude:                 Documentation on internals (comments).
                                                            (line 361)
* CommentType=filetype:                  Documentation on internals (comments).
                                                            (line 441)
* CommentType=hide:                      Documentation on internals (comments).
                                                            (line 392)
* CommentType=logo:                      Documentation on internals (comments).
                                                            (line  70)
* CommentType=module:                    Documentation on internals (comments).
                                                            (line 168)
* CommentType=nodoc:                     Documentation on internals (comments).
                                                            (line 458)
* CommentType=section:                   Documentation on internals (comments).
                                                            (line 219)
* CommentType=subsection:                Documentation on internals (comments).
                                                            (line 233)
* CommentType=subtitle:                  Documentation on internals (comments).
                                                            (line  42)
* CommentType=subtitle_extra:            Documentation on internals (comments).
                                                            (line  61)
* CommentType=summary:                   Documentation on internals (comments).
                                                            (line 150)
* CommentType=title:                     Documentation on internals (comments).
                                                            (line  27)
* CommentType=usage:                     Documentation on internals (comments).
                                                            (line 203)
* CommentType=version_maintenance:       Documentation on internals (comments).
                                                            (line 339)
* commment/2:                            Version/Change Log.
                                                            (line 525)
* comp assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 167)
* comp/1 <1>:                            Documentation on exports (assertions_props).
                                                            (line 277)
* comp/1 <2>:                            Documentation on new declarations (assertions_doc).
                                                            (line 166)
* comp/1:                                Usage and interface (assertions_doc).
                                                            (line  28)
* comp/2 <1>:                            Documentation on new declarations (assertions_doc).
                                                            (line 185)
* comp/2:                                Usage and interface (assertions_doc).
                                                            (line  28)
* compat/2 <1>:                          Documentation on exports (basic_props).
                                                            (line 707)
* compat/2:                              Usage and interface (basic_props).
                                                            (line  15)
* compatibility properties:              Defining properties.
                                                            (line  34)
* compatible:                            Documentation on exports (assertions_props).
                                                            (line  20)
* compiler/c_itf <1>:                    Usage and interface (autodoc_state).
                                                            (line  32)
* compiler/c_itf:                        Usage and interface (autodoc).
                                                            (line  28)
* compiler/compiler <1>:                 Usage and interface (autodoc_state).
                                                            (line  32)
* compiler/compiler:                     Usage and interface (autodoc).
                                                            (line  28)
* complex argument property:             Documentation on exports (assertions_props).
                                                            (line  19)
* complex goal property:                 Documentation on exports (assertions_props).
                                                            (line  33)
* complex_arg_property/1 <1>:            Documentation on exports (assertions_props).
                                                            (line  19)
* complex_arg_property/1:                Usage and interface (assertions_props).
                                                            (line  18)
* complex_goal_property/1 <1>:           Documentation on exports (assertions_props).
                                                            (line  33)
* complex_goal_property/1:               Usage and interface (assertions_props).
                                                            (line  18)
* component files:                       lpdoc operation - source and target files.
                                                            (line  45)
* component_registry/component_registry <1>: Usage and interface (autodoc_filesystem).
                                                            (line  28)
* component_registry/component_registry: Usage and interface (autodoc_html_template).
                                                            (line  24)
* compute_refs_and_biblio/1 <1>:         Documentation on exports (autodoc_refsdb).
                                                            (line   6)
* compute_refs_and_biblio/1:             Usage and interface (autodoc_refsdb).
                                                            (line  14)
* constant/1 <1>:                        Documentation on exports (basic_props).
                                                            (line 305)
* constant/1:                            Usage and interface (basic_props).
                                                            (line  19)
* constraint/1 <1>:                      Documentation on exports (native_props).
                                                            (line  42)
* constraint/1:                          Usage and interface (native_props).
                                                            (line  18)
* contents area:                         Installing a generated manual in a public area.
                                                            (line  31)
* conversion formats:                    Overview of this document.
                                                            (line  42)
* convertc/1 <1>:                        Documentation on exports (autodoc_settings).
                                                            (line 110)
* convertc/1:                            Usage and interface (autodoc_settings).
                                                            (line  14)
* copyright:                             Documentation on internals (comments).
                                                            (line 125)
* covered/1 <1>:                         Documentation on exports (native_props).
                                                            (line  57)
* covered/1:                             Usage and interface (native_props).
                                                            (line  18)
* covered/2 <1>:                         Documentation on exports (native_props).
                                                            (line  68)
* covered/2:                             Usage and interface (native_props).
                                                            (line  18)
* csh <1>:                               Installing the source distribution (lpdoc).
                                                            (line  47)
* csh <2>:                               Putting it all together.
                                                            (line  15)
* csh <3>:                               Accessing info manuals.
                                                            (line  60)
* csh:                                   Installing a generated manual in a public area.
                                                            (line  39)
* Daniel Cabeza:                         Basic data types and properties.
                                                            (line   7)
* data_facts <1>:                        Usage and interface (autodoc_images).
                                                            (line  28)
* data_facts <2>:                        Usage and interface (autodoc_aux).
                                                            (line  28)
* data_facts <3>:                        Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* data_facts <4>:                        Usage and interface (autodoc_errors).
                                                            (line  20)
* data_facts <5>:                        Usage and interface (autodoc_refsdb).
                                                            (line  32)
* data_facts <6>:                        Usage and interface (autodoc_index).
                                                            (line  28)
* data_facts <7>:                        Usage and interface (autodoc_filesystem).
                                                            (line  32)
* data_facts <8>:                        Usage and interface (autodoc_man).
                                                            (line  22)
* data_facts <9>:                        Usage and interface (autodoc_html_template).
                                                            (line  28)
* data_facts <10>:                       Usage and interface (autodoc_html_resources).
                                                            (line  28)
* data_facts <11>:                       Usage and interface (autodoc_html).
                                                            (line  22)
* data_facts <12>:                       Usage and interface (autodoc_texinfo).
                                                            (line  32)
* data_facts <13>:                       Usage and interface (autodoc_settings).
                                                            (line  24)
* data_facts <14>:                       Usage and interface (autodoc_structure).
                                                            (line  28)
* data_facts <15>:                       Usage and interface (autodoc_doctree).
                                                            (line  36)
* data_facts <16>:                       Usage and interface (autodoc_state).
                                                            (line  36)
* data_facts <17>:                       Usage and interface (autodoc).
                                                            (line  32)
* data_facts <18>:                       Usage and interface (unittest_doc).
                                                            (line  14)
* data_facts <19>:                       Usage and interface (rtchecks_doc).
                                                            (line  18)
* data_facts <20>:                       Usage and interface (example_module).
                                                            (line  40)
* data_facts <21>:                       Usage and interface (meta_props).
                                                            (line  28)
* data_facts <22>:                       Usage and interface (native_props).
                                                            (line  28)
* data_facts <23>:                       Usage and interface (basic_props).
                                                            (line  29)
* data_facts <24>:                       Usage and interface (assertions_props).
                                                            (line  24)
* data_facts <25>:                       Usage and interface (assertions_doc).
                                                            (line  44)
* data_facts:                            Usage and interface (comments).
                                                            (line  40)
* date:                                  Documentation on exports (comments).
                                                            (line 314)
* debugger_support <1>:                  Usage and interface (autodoc_images).
                                                            (line  28)
* debugger_support <2>:                  Usage and interface (autodoc_aux).
                                                            (line  28)
* debugger_support <3>:                  Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* debugger_support <4>:                  Usage and interface (autodoc_errors).
                                                            (line  20)
* debugger_support <5>:                  Usage and interface (autodoc_refsdb).
                                                            (line  32)
* debugger_support <6>:                  Usage and interface (autodoc_index).
                                                            (line  28)
* debugger_support <7>:                  Usage and interface (autodoc_filesystem).
                                                            (line  32)
* debugger_support <8>:                  Usage and interface (autodoc_man).
                                                            (line  22)
* debugger_support <9>:                  Usage and interface (autodoc_html_template).
                                                            (line  28)
* debugger_support <10>:                 Usage and interface (autodoc_html_resources).
                                                            (line  28)
* debugger_support <11>:                 Usage and interface (autodoc_html).
                                                            (line  22)
* debugger_support <12>:                 Usage and interface (autodoc_texinfo).
                                                            (line  32)
* debugger_support <13>:                 Usage and interface (autodoc_settings).
                                                            (line  24)
* debugger_support <14>:                 Usage and interface (autodoc_structure).
                                                            (line  28)
* debugger_support <15>:                 Usage and interface (autodoc_doctree).
                                                            (line  36)
* debugger_support <16>:                 Usage and interface (autodoc_state).
                                                            (line  36)
* debugger_support <17>:                 Usage and interface (autodoc).
                                                            (line  32)
* debugger_support <18>:                 Usage and interface (unittest_doc).
                                                            (line  14)
* debugger_support <19>:                 Usage and interface (rtchecks_doc).
                                                            (line  18)
* debugger_support <20>:                 Usage and interface (example_module).
                                                            (line  40)
* debugger_support <21>:                 Usage and interface (meta_props).
                                                            (line  28)
* debugger_support <22>:                 Usage and interface (native_props).
                                                            (line  28)
* debugger_support <23>:                 Usage and interface (basic_props).
                                                            (line  29)
* debugger_support <24>:                 Usage and interface (assertions_props).
                                                            (line  24)
* debugger_support <25>:                 Usage and interface (assertions_doc).
                                                            (line  44)
* debugger_support:                      Usage and interface (comments).
                                                            (line  40)
* decl assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 330)
* decl/1 <1>:                            Documentation on exports (assertions_props).
                                                            (line   8)
* decl/1 <2>:                            Documentation on new declarations (assertions_doc).
                                                            (line 329)
* decl/1:                                Usage and interface (assertions_doc).
                                                            (line  23)
* decl/2 <1>:                            Documentation on new declarations (assertions_doc).
                                                            (line 339)
* decl/2:                                Usage and interface (assertions_doc).
                                                            (line  23)
* deprecated/1 <1>:                      Documentation on exports (basic_props).
                                                            (line 769)
* deprecated/1:                          Usage and interface (basic_props).
                                                            (line  15)
* description list:                      Documentation on exports (comments).
                                                            (line  86)
* dict <1>:                              Usage and interface (autodoc_bibrefs).
                                                            (line  24)
* dict <2>:                              Usage and interface (autodoc_index).
                                                            (line  24)
* dict <3>:                              Usage and interface (autodoc_html).
                                                            (line  18)
* dict <4>:                              Usage and interface (autodoc_state).
                                                            (line  32)
* dict:                                  Usage and interface (autodoc).
                                                            (line  28)
* dictionary/1 <1>:                      Documentation on exports (assertions_props).
                                                            (line 208)
* dictionary/1:                          Usage and interface (assertions_props).
                                                            (line  18)
* dir <1>:                               Installing the source distribution (lpdoc).
                                                            (line  28)
* dir:                                   Accessing info manuals.
                                                            (line  29)
* distutils/dirutils <1>:                Usage and interface (autodoc_filesystem).
                                                            (line  28)
* distutils/dirutils <2>:                Usage and interface (autodoc_html_template).
                                                            (line  24)
* distutils/dirutils:                    Usage and interface (autodoc_html_resources).
                                                            (line  24)
* distutils/distutils:                   Usage and interface (autodoc_settings).
                                                            (line  20)
* doc/2 <1>:                             Documentation on new declarations (assertions_doc).
                                                            (line 353)
* doc/2 <2>:                             Usage and interface (assertions_doc).
                                                            (line  34)
* doc/2 <3>:                             Documentation on internals (comments).
                                                            (line   7)
* doc/2 <4>:                             Documentation on exports (comments).
                                                            (line   8)
* doc/2 <5>:                             Usage and interface (comments).
                                                            (line   9)
* doc/2 <6>:                             Documentation Mark-up Language and Declarations.
                                                            (line   8)
* doc/2 <7>:                             Documenting reexported predicates.
                                                            (line  11)
* doc/2 <8>:                             Documenting files which are not modules.
                                                            (line  13)
* doc/2:                                 Enhancing the documentation being generated.
                                                            (line  24)
* doc_id_type/3 <1>:                     Documentation on exports (comments).
                                                            (line 541)
* doc_id_type/3:                         Usage and interface (comments).
                                                            (line  22)
* doc_structure/1:                       Generating a manual.
                                                            (line  65)
* doclabel/1 <1>:                        Documentation on exports (autodoc_doctree).
                                                            (line  80)
* doclabel/1:                            Usage and interface (autodoc_doctree).
                                                            (line  18)
* doclink/1 <1>:                         Documentation on exports (autodoc_refsdb).
                                                            (line  46)
* doclink/1 <2>:                         Documentation on exports (autodoc_doctree).
                                                            (line  75)
* doclink/1:                             Usage and interface (autodoc_doctree).
                                                            (line  18)
* doclink_at/2 <1>:                      Documentation on exports (autodoc_doctree).
                                                            (line  85)
* doclink_at/2:                          Usage and interface (autodoc_doctree).
                                                            (line  14)
* doclink_is_local/1 <1>:                Documentation on exports (autodoc_doctree).
                                                            (line  89)
* doclink_is_local/1:                    Usage and interface (autodoc_doctree).
                                                            (line  14)
* docst_backend/2 <1>:                   Documentation on exports (autodoc_state).
                                                            (line  89)
* docst_backend/2:                       Usage and interface (autodoc_state).
                                                            (line  14)
* docst_currmod/2 <1>:                   Documentation on exports (autodoc_state).
                                                            (line  93)
* docst_currmod/2:                       Usage and interface (autodoc_state).
                                                            (line  14)
* docst_currmod_is_main/1 <1>:           Documentation on exports (autodoc_state).
                                                            (line 137)
* docst_currmod_is_main/1:               Usage and interface (autodoc_state).
                                                            (line  14)
* docst_gdata/3 <1>:                     Documentation on exports (autodoc_state).
                                                            (line 188)
* docst_gdata/3:                         Usage and interface (autodoc_state).
                                                            (line  14)
* docst_gdata_clean/1 <1>:               Documentation on exports (autodoc_state).
                                                            (line 207)
* docst_gdata_clean/1:                   Usage and interface (autodoc_state).
                                                            (line  14)
* docst_gdata_query/2 <1>:               Documentation on exports (autodoc_state).
                                                            (line 195)
* docst_gdata_query/2:                   Usage and interface (autodoc_state).
                                                            (line  14)
* docst_gdata_query/3 <1>:               Documentation on exports (autodoc_state).
                                                            (line 199)
* docst_gdata_query/3:                   Usage and interface (autodoc_state).
                                                            (line  14)
* docst_gdata_restore/1 <1>:             Documentation on exports (autodoc_state).
                                                            (line 203)
* docst_gdata_restore/1:                 Usage and interface (autodoc_state).
                                                            (line  14)
* docst_gvar_restore/2 <1>:              Documentation on exports (autodoc_state).
                                                            (line 215)
* docst_gvar_restore/2:                  Usage and interface (autodoc_state).
                                                            (line  14)
* docst_gvar_save/2 <1>:                 Documentation on exports (autodoc_state).
                                                            (line 211)
* docst_gvar_save/2:                     Usage and interface (autodoc_state).
                                                            (line  14)
* docst_has_index/2 <1>:                 Documentation on exports (autodoc_state).
                                                            (line 219)
* docst_has_index/2:                     Usage and interface (autodoc_state).
                                                            (line  14)
* docst_inputfile/2 <1>:                 Documentation on exports (autodoc_state).
                                                            (line 109)
* docst_inputfile/2:                     Usage and interface (autodoc_state).
                                                            (line  14)
* docst_mdata_assertz/2 <1>:             Documentation on exports (autodoc_state).
                                                            (line 180)
* docst_mdata_assertz/2:                 Usage and interface (autodoc_state).
                                                            (line  14)
* docst_mdata_clean/1 <1>:               Documentation on exports (autodoc_state).
                                                            (line 176)
* docst_mdata_clean/1:                   Usage and interface (autodoc_state).
                                                            (line  14)
* docst_mdata_save/1 <1>:                Documentation on exports (autodoc_state).
                                                            (line 184)
* docst_mdata_save/1:                    Usage and interface (autodoc_state).
                                                            (line  14)
* docst_message/2 <1>:                   Documentation on exports (autodoc_state).
                                                            (line 125)
* docst_message/2:                       Usage and interface (autodoc_state).
                                                            (line  14)
* docst_message/3 <1>:                   Documentation on exports (autodoc_state).
                                                            (line 129)
* docst_message/3:                       Usage and interface (autodoc_state).
                                                            (line  14)
* docst_modname/2 <1>:                   Documentation on exports (autodoc_state).
                                                            (line 146)
* docst_modname/2:                       Usage and interface (autodoc_state).
                                                            (line  14)
* docst_modtype/2 <1>:                   Documentation on exports (autodoc_state).
                                                            (line 263)
* docst_modtype/2:                       Usage and interface (autodoc_state).
                                                            (line  14)
* docst_mvar_get/3 <1>:                  Documentation on exports (autodoc_state).
                                                            (line 172)
* docst_mvar_get/3:                      Usage and interface (autodoc_state).
                                                            (line  14)
* docst_mvar_lookup/3 <1>:               Documentation on exports (autodoc_state).
                                                            (line 164)
* docst_mvar_lookup/3:                   Usage and interface (autodoc_state).
                                                            (line  14)
* docst_mvar_replace/4 <1>:              Documentation on exports (autodoc_state).
                                                            (line 168)
* docst_mvar_replace/4:                  Usage and interface (autodoc_state).
                                                            (line  14)
* docst_new_no_src/4 <1>:                Documentation on exports (autodoc_state).
                                                            (line 113)
* docst_new_no_src/4:                    Usage and interface (autodoc_state).
                                                            (line  14)
* docst_new_sub/3 <1>:                   Documentation on exports (autodoc_state).
                                                            (line 121)
* docst_new_sub/3:                       Usage and interface (autodoc_state).
                                                            (line  14)
* docst_new_with_src/6 <1>:              Documentation on exports (autodoc_state).
                                                            (line 117)
* docst_new_with_src/6:                  Usage and interface (autodoc_state).
                                                            (line  14)
* docst_no_components/1 <1>:             Documentation on exports (autodoc_state).
                                                            (line 141)
* docst_no_components/1:                 Usage and interface (autodoc_state).
                                                            (line  14)
* docst_opt/2 <1>:                       Documentation on exports (autodoc_state).
                                                            (line 133)
* docst_opt/2:                           Usage and interface (autodoc_state).
                                                            (line  14)
* docst_opts/2 <1>:                      Documentation on exports (autodoc_state).
                                                            (line 101)
* docst_opts/2:                          Usage and interface (autodoc_state).
                                                            (line  14)
* docst_set_currmod/3 <1>:               Documentation on exports (autodoc_state).
                                                            (line  97)
* docst_set_currmod/3:                   Usage and interface (autodoc_state).
                                                            (line  14)
* docst_set_opts/3 <1>:                  Documentation on exports (autodoc_state).
                                                            (line 105)
* docst_set_opts/3:                      Usage and interface (autodoc_state).
                                                            (line  14)
* docstate(Arg1):                        Documentation on exports (autodoc_refsdb).
                                                            (line  17)
* docstate(Arg3):                        Documentation on exports (autodoc_doctree).
                                                            (line 180)
* docstate(DocSt) <1>:                   Documentation on exports (autodoc_images).
                                                            (line  20)
* docstate(DocSt) <2>:                   Documentation on exports (autodoc_bibrefs).
                                                            (line  28)
* docstate(DocSt) <3>:                   Documentation on multifiles (autodoc_man).
                                                            (line  15)
* docstate(DocSt) <4>:                   Documentation on multifiles (autodoc_html).
                                                            (line  22)
* docstate(DocSt) <5>:                   Documentation on multifiles (autodoc_texinfo).
                                                            (line  23)
* docstate(DocSt) <6>:                   Documentation on exports (autodoc_doctree).
                                                            (line 129)
* docstate(DocSt):                       Documentation on exports (autodoc).
                                                            (line  76)
* docstate/1 <1>:                        Documentation on exports (autodoc_images).
                                                            (line  20)
* docstate/1 <2>:                        Documentation on exports (autodoc_bibrefs).
                                                            (line  28)
* docstate/1 <3>:                        Documentation on exports (autodoc_refsdb).
                                                            (line  17)
* docstate/1 <4>:                        Documentation on multifiles (autodoc_man).
                                                            (line  15)
* docstate/1 <5>:                        Documentation on multifiles (autodoc_html).
                                                            (line  22)
* docstate/1 <6>:                        Documentation on multifiles (autodoc_texinfo).
                                                            (line  23)
* docstate/1 <7>:                        Documentation on exports (autodoc_doctree).
                                                            (line 129)
* docstate/1 <8>:                        Documentation on exports (autodoc_state).
                                                            (line  79)
* docstate/1 <9>:                        Usage and interface (autodoc_state).
                                                            (line  22)
* docstate/1:                            Documentation on exports (autodoc).
                                                            (line  76)
* docstr_node/4 <1>:                     Documentation on exports (autodoc_structure).
                                                            (line   6)
* docstr_node/4:                         Usage and interface (autodoc_structure).
                                                            (line  14)
* docstring/1 <1>:                       Documentation on exports (assertions_props).
                                                            (line  38)
* docstring/1 <2>:                       Usage and interface (assertions_props).
                                                            (line  14)
* docstring/1 <3>:                       Documentation on new declarations (assertions_doc).
                                                            (line 365)
* docstring/1 <4>:                       Some attention points.
                                                            (line  12)
* docstring/1 <5>:                       Documentation on internals (comments).
                                                            (line  29)
* docstring/1 <6>:                       Documentation on exports (comments).
                                                            (line   6)
* docstring/1:                           Usage and interface (comments).
                                                            (line  26)
* doctokens/1 <1>:                       Documentation on exports (autodoc_doctree).
                                                            (line  93)
* doctokens/1:                           Usage and interface (autodoc_doctree).
                                                            (line  18)
* doctree/1 <1>:                         Documentation on exports (autodoc_refsdb).
                                                            (line  44)
* doctree/1 <2>:                         Documentation on exports (autodoc_index).
                                                            (line  32)
* doctree/1 <3>:                         Documentation on multifiles (autodoc_man).
                                                            (line  17)
* doctree/1 <4>:                         Documentation on multifiles (autodoc_html).
                                                            (line  24)
* doctree/1 <5>:                         Documentation on multifiles (autodoc_texinfo).
                                                            (line  25)
* doctree/1 <6>:                         Documentation on exports (autodoc_doctree).
                                                            (line  10)
* doctree/1 <7>:                         Usage and interface (autodoc_doctree).
                                                            (line  18)
* doctree/1:                             Documentation Abstract Syntax Tree.
                                                            (line   9)
* doctree_concat/3 <1>:                  Documentation on exports (autodoc_doctree).
                                                            (line  71)
* doctree_concat/3:                      Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_insert_before_section/3 <1>:   Documentation on exports (autodoc_doctree).
                                                            (line  57)
* doctree_insert_before_section/3:       Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_insert_end/3 <1>:              Documentation on exports (autodoc_doctree).
                                                            (line  43)
* doctree_insert_end/3:                  Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_is_empty/1 <1>:                Documentation on exports (autodoc_doctree).
                                                            (line  16)
* doctree_is_empty/1:                    Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_prepare_docst_translate_and_write/3 <1>: Documentation on exports (autodoc_doctree).
                                                            (line 147)
* doctree_prepare_docst_translate_and_write/3: Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_putvars/5 <1>:                 Documentation on exports (autodoc_doctree).
                                                            (line 117)
* doctree_putvars/5:                     Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_restore/2 <1>:                 Documentation on exports (autodoc_doctree).
                                                            (line 110)
* doctree_restore/2:                     Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_save/2 <1>:                    Documentation on exports (autodoc_doctree).
                                                            (line 107)
* doctree_save/2:                        Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_scan_and_save_refs/2 <1>:      Documentation on exports (autodoc_doctree).
                                                            (line 136)
* doctree_scan_and_save_refs/2:          Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_simplify/2 <1>:                Documentation on exports (autodoc_doctree).
                                                            (line 113)
* doctree_simplify/2:                    Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_to_rawtext/3 <1>:              Documentation on exports (autodoc_doctree).
                                                            (line 151)
* doctree_to_rawtext/3:                  Usage and interface (autodoc_doctree).
                                                            (line  14)
* doctree_translate_and_write/3 <1>:     Documentation on exports (autodoc_doctree).
                                                            (line 165)
* doctree_translate_and_write/3:         Usage and interface (autodoc_doctree).
                                                            (line  14)
* document structure:                    Generating a manual.
                                                            (line  65)
* documentation format:                  Documentation Generation Library.
                                                            (line  31)
* documentation strings:                 Documentation on internals (comments).
                                                            (line   9)
* DOTcshrc:                              Installing the source distribution (lpdoc).
                                                            (line  47)
* dvips <1>:                             Other software packages required (lpdoc).
                                                            (line  41)
* dvips:                                 Version/Change Log.
                                                            (line 211)
* dvips/1 <1>:                           Documentation on exports (autodoc_settings).
                                                            (line  90)
* dvips/1:                               Usage and interface (autodoc_settings).
                                                            (line  14)
* dynamic/1:                             Enhancing the documentation being generated.
                                                            (line  18)
* Edison Mera <1>:                       Unit Testing Library.
                                                            (line   6)
* Edison Mera <2>:                       Run-time checking of assertions.
                                                            (line   7)
* Edison Mera:                           Properties which are native to analyzers.
                                                            (line   7)
* emacs <1>:                             Other software packages required (lpdoc).
                                                            (line  61)
* emacs <2>:                             Installing the source distribution (lpdoc).
                                                            (line   7)
* emacs:                                 Documentation on internals (comments).
                                                            (line 306)
* Emacs <1>:                             Accessing info manuals.
                                                            (line   6)
* Emacs <2>:                             Installing a generated manual in a public area.
                                                            (line  15)
* Emacs:                                 Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* emacs:                                 Version/Change Log.
                                                            (line 523)
* emacs Ciao mode:                       Documentation on internals (comments).
                                                            (line 288)
* Emacs, accessing info files:           Accessing info manuals.
                                                            (line  10)
* Emacs, generating manuals from:        Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* Emacs, LPdoc mode:                     Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* emacs-library.el:                      Other software packages required (lpdoc).
                                                            (line  62)
* email address:                         Documentation on exports (comments).
                                                            (line 298)
* email addresses <1>:                   Documentation on exports (comments).
                                                            (line 268)
* email addresses:                       Version/Change Log.
                                                            (line 501)
* emphasis face:                         Documentation on exports (comments).
                                                            (line 143)
* empty_doctree/1 <1>:                   Documentation on exports (autodoc_doctree).
                                                            (line  34)
* empty_doctree/1:                       Usage and interface (autodoc_doctree).
                                                            (line  14)
* encapsulated postscript:               Documentation on exports (comments).
                                                            (line 390)
* engine/basic_props:                    Usage and interface (example_module).
                                                            (line  36)
* ensure_cache_dir/1 <1>:                Documentation on exports (autodoc_filesystem).
                                                            (line  67)
* ensure_cache_dir/1:                    Usage and interface (autodoc_filesystem).
                                                            (line  14)
* ensure_loaded/1 <1>:                   Documentation on internals (comments).
                                                            (line 422)
* ensure_loaded/1 <2>:                   Documenting files which are not modules.
                                                            (line  10)
* ensure_loaded/1:                       Version/Change Log.
                                                            (line 418)
* ensure_output_dir/1 <1>:               Documentation on exports (autodoc_filesystem).
                                                            (line  63)
* ensure_output_dir/1:                   Usage and interface (autodoc_filesystem).
                                                            (line  14)
* ensure_output_dir_prepared/2 <1>:      Documentation on exports (autodoc).
                                                            (line  22)
* ensure_output_dir_prepared/2:          Usage and interface (autodoc).
                                                            (line  14)
* entry assertion:                       Documentation on new declarations (assertions_doc).
                                                            (line 244)
* entry/1 <1>:                           Documentation on exports (assertions_props).
                                                            (line 215)
* entry/1 <2>:                           Documentation on new declarations (assertions_doc).
                                                            (line 243)
* entry/1:                               Usage and interface (assertions_doc).
                                                            (line  29)
* enumerated list:                       Documentation on exports (comments).
                                                            (line  78)
* environment variables:                 Installing the source distribution (lpdoc).
                                                            (line  45)
* equiv/2 <1>:                           Documentation on exports (basic_props).
                                                            (line  20)
* equiv/2:                               Usage and interface (basic_props).
                                                            (line  15)
* errhandle:                             Usage and interface (autodoc_images).
                                                            (line  24)
* error(a,b):                            Unit Testing Library.
                                                            (line  37)
* error_free/1 <1>:                      Documentation on exports (basic_props).
                                                            (line 897)
* error_free/1:                          Usage and interface (basic_props).
                                                            (line  15)
* error_text/3 <1>:                      Documentation on exports (autodoc_errors).
                                                            (line   6)
* error_text/3:                          Usage and interface (autodoc_errors).
                                                            (line  14)
* escape sequences:                      Documentation on exports (comments).
                                                            (line  14)
* escape_string/4 <1>:                   Documentation on exports (autodoc_doctree).
                                                            (line 169)
* escape_string/4:                       Usage and interface (autodoc_doctree).
                                                            (line  14)
* eval/1 <1>:                            Documentation on internals (example_module).
                                                            (line  21)
* eval/1 <2>:                            Documentation on exports (example_module).
                                                            (line 262)
* eval/1 <3>:                            Documentation on exports (basic_props).
                                                            (line  16)
* eval/1:                                Usage and interface (basic_props).
                                                            (line  15)
* example of lpdoc use:                  An Example - Documenting a Library Module.
                                                            (line   9)
* example_module:                        Auto Documenter Output for the Example Module.
                                                            (line   6)
* exception(error(a,b)):                 Unit Testing Library.
                                                            (line  36)
* exception/1 <1>:                       Documentation on exports (native_props).
                                                            (line  81)
* exception/1:                           Usage and interface (native_props).
                                                            (line  18)
* exception/2 <1>:                       Documentation on exports (native_props).
                                                            (line  88)
* exception/2:                           Usage and interface (native_props).
                                                            (line  18)
* exceptions <1>:                        Usage and interface (autodoc_images).
                                                            (line  28)
* exceptions <2>:                        Usage and interface (autodoc_aux).
                                                            (line  28)
* exceptions <3>:                        Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* exceptions <4>:                        Usage and interface (autodoc_errors).
                                                            (line  20)
* exceptions <5>:                        Usage and interface (autodoc_refsdb).
                                                            (line  32)
* exceptions <6>:                        Usage and interface (autodoc_index).
                                                            (line  28)
* exceptions <7>:                        Usage and interface (autodoc_filesystem).
                                                            (line  32)
* exceptions <8>:                        Usage and interface (autodoc_man).
                                                            (line  22)
* exceptions <9>:                        Usage and interface (autodoc_html_template).
                                                            (line  28)
* exceptions <10>:                       Usage and interface (autodoc_html_resources).
                                                            (line  28)
* exceptions <11>:                       Usage and interface (autodoc_html).
                                                            (line  22)
* exceptions <12>:                       Usage and interface (autodoc_texinfo).
                                                            (line  32)
* exceptions <13>:                       Usage and interface (autodoc_settings).
                                                            (line  24)
* exceptions <14>:                       Usage and interface (autodoc_structure).
                                                            (line  28)
* exceptions <15>:                       Usage and interface (autodoc_doctree).
                                                            (line  36)
* exceptions <16>:                       Usage and interface (autodoc_state).
                                                            (line  36)
* exceptions <17>:                       Usage and interface (autodoc).
                                                            (line  32)
* exceptions <18>:                       Usage and interface (unittest_doc).
                                                            (line  14)
* exceptions <19>:                       Usage and interface (rtchecks_doc).
                                                            (line  18)
* exceptions <20>:                       Usage and interface (example_module).
                                                            (line  40)
* exceptions <21>:                       Usage and interface (meta_props).
                                                            (line  28)
* exceptions <22>:                       Usage and interface (native_props).
                                                            (line  28)
* exceptions <23>:                       Usage and interface (basic_props).
                                                            (line  29)
* exceptions <24>:                       Usage and interface (assertions_props).
                                                            (line  24)
* exceptions <25>:                       Usage and interface (assertions_doc).
                                                            (line  44)
* exceptions:                            Usage and interface (comments).
                                                            (line  40)
* exit assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 270)
* exit/1 <1>:                            Documentation on new declarations (assertions_doc).
                                                            (line 269)
* exit/1:                                Usage and interface (assertions_doc).
                                                            (line  29)
* exit/2 <1>:                            Documentation on new declarations (assertions_doc).
                                                            (line 287)
* exit/2:                                Usage and interface (assertions_doc).
                                                            (line  29)
* exported predicates:                   Documentation Generation Library.
                                                            (line  11)
* exports:                               Run-time checking of assertions.
                                                            (line  32)
* fails/1 <1>:                           Documentation on exports (native_props).
                                                            (line  96)
* fails/1:                               Usage and interface (native_props).
                                                            (line  18)
* false assertion:                       Documentation on exports (assertions_doc).
                                                            (line  77)
* false/1 <1>:                           Documentation on exports (assertions_doc).
                                                            (line  75)
* false/1:                               Usage and interface (assertions_doc).
                                                            (line  19)
* fastformat <1>:                        Usage and interface (autodoc_man).
                                                            (line  14)
* fastformat <2>:                        Usage and interface (autodoc_html).
                                                            (line  14)
* fastformat:                            Usage and interface (autodoc_texinfo).
                                                            (line  24)
* file_format_name/2 <1>:                Documentation on exports (autodoc_filesystem).
                                                            (line  23)
* file_format_name/2:                    Usage and interface (autodoc_filesystem).
                                                            (line  14)
* file_format_provided_by_backend/3 <1>: Documentation on exports (autodoc_filesystem).
                                                            (line  31)
* file_format_provided_by_backend/3:     Usage and interface (autodoc_filesystem).
                                                            (line  14)
* file_utils <1>:                        Usage and interface (autodoc_bibrefs).
                                                            (line  24)
* file_utils <2>:                        Usage and interface (autodoc_html_template).
                                                            (line  24)
* file_utils <3>:                        Usage and interface (autodoc_html_resources).
                                                            (line  24)
* file_utils <4>:                        Usage and interface (autodoc_html).
                                                            (line  18)
* file_utils <5>:                        Usage and interface (autodoc_texinfo).
                                                            (line  28)
* file_utils:                            Usage and interface (native_props).
                                                            (line  24)
* filename/1 <1>:                        Documentation on exports (autodoc_filesystem).
                                                            (line   6)
* filename/1:                            Usage and interface (autodoc_filesystem).
                                                            (line  18)
* filenames <1>:                         Usage and interface (autodoc_structure).
                                                            (line  24)
* filenames <2>:                         Usage and interface (autodoc_state).
                                                            (line  32)
* filenames:                             Usage and interface (autodoc).
                                                            (line  28)
* filetype/1 <1>:                        Documentation on internals (comments).
                                                            (line 443)
* filetype/1 <2>:                        Documentation on exports (comments).
                                                            (line 529)
* filetype/1:                            Usage and interface (comments).
                                                            (line  30)
* filter/2 <1>:                          Documentation on exports (basic_props).
                                                            (line 911)
* filter/2:                              Usage and interface (basic_props).
                                                            (line  15)
* finite_solutions/1 <1>:                Documentation on exports (native_props).
                                                            (line 111)
* finite_solutions/1:                    Usage and interface (native_props).
                                                            (line  18)
* Firefox:                               Accessing html manuals.
                                                            (line   7)
* fixed format text:                     Documentation on exports (comments).
                                                            (line 101)
* fixed-width font:                      Documentation on exports (comments).
                                                            (line 147)
* flag_values/1 <1>:                     Documentation on exports (basic_props).
                                                            (line 917)
* flag_values/1:                         Usage and interface (basic_props).
                                                            (line  19)
* flt/1 <1>:                             Documentation on exports (basic_props).
                                                            (line 100)
* flt/1:                                 Usage and interface (basic_props).
                                                            (line  19)
* fmt_html_template/3 <1>:               Documentation on exports (autodoc_html_template).
                                                            (line  18)
* fmt_html_template/3:                   Usage and interface (autodoc_html_template).
                                                            (line  14)
* fmt_idx_env/7 <1>:                     Documentation on exports (autodoc_index).
                                                            (line  51)
* fmt_idx_env/7:                         Usage and interface (autodoc_index).
                                                            (line  14)
* fmt_index/3 <1>:                       Documentation on exports (autodoc_index).
                                                            (line  55)
* fmt_index/3:                           Usage and interface (autodoc_index).
                                                            (line  14)
* fmt_infodir_entry/3 <1>:               Documentation on exports (autodoc).
                                                            (line  68)
* fmt_infodir_entry/3:                   Usage and interface (autodoc).
                                                            (line  14)
* foo:                                   Usage and interface (example_module).
                                                            (line  32)
* foo(Arg1):                             Documentation on multifiles (example_module).
                                                            (line  25)
* footnote:                              Documentation on exports (comments).
                                                            (line 132)
* format <1>:                            Usage and interface (autodoc_images).
                                                            (line  24)
* format <2>:                            Usage and interface (autodoc_bibrefs).
                                                            (line  24)
* format <3>:                            Usage and interface (autodoc_texinfo).
                                                            (line  28)
* format <4>:                            Usage and interface (autodoc_doctree).
                                                            (line  32)
* format:                                Usage and interface (autodoc).
                                                            (line  28)
* formatting commands <1>:               Some attention points.
                                                            (line   6)
* formatting commands <2>:               Documentation on exports (comments).
                                                            (line   9)
* formatting commands <3>:               Documentation Mark-up Language and Declarations.
                                                            (line   9)
* formatting commands:                   Overview of this document.
                                                            (line  29)
* framed box:                            Documentation on exports (comments).
                                                            (line 109)
* Francisco Bueno <1>:                   Meta-properties.   (line   7)
* Francisco Bueno <2>:                   Properties which are native to analyzers.
                                                            (line   7)
* Francisco Bueno <3>:                   Declaring regular types.
                                                            (line   7)
* Francisco Bueno:                       The Ciao assertion package.
                                                            (line   7)
* func/1:                                Documentation on exports (assertions_props).
                                                            (line 240)
* g_assrt_body/1 <1>:                    Documentation on exports (assertions_props).
                                                            (line 275)
* g_assrt_body/1 <2>:                    Usage and interface (assertions_props).
                                                            (line  18)
* g_assrt_body/1:                        Documentation on new declarations (assertions_doc).
                                                            (line 182)
* generate_html_pointer/5:               Version/Change Log.
                                                            (line 229)
* generate_html_pointer/6:               Version/Change Log.
                                                            (line 229)
* Generating:                            Generating Installing and Accessing Manuals.
                                                            (line   6)
* generating from Emacs:                 Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* generating manuals:                    Generating Installing and Accessing Manuals.
                                                            (line   8)
* German Puebla:                         The Ciao assertion package.
                                                            (line   7)
* get_autodoc_opts/3 <1>:                Documentation on exports (autodoc).
                                                            (line  28)
* get_autodoc_opts/3:                    Usage and interface (autodoc).
                                                            (line  14)
* get_cache_dir/2 <1>:                   Documentation on exports (autodoc_filesystem).
                                                            (line  57)
* get_cache_dir/2:                       Usage and interface (autodoc_filesystem).
                                                            (line  14)
* get_command_option/1 <1>:              Documentation on exports (autodoc_settings).
                                                            (line  41)
* get_command_option/1:                  Usage and interface (autodoc_settings).
                                                            (line  14)
* get_doc/4 <1>:                         Documentation on exports (autodoc_state).
                                                            (line 227)
* get_doc/4:                             Usage and interface (autodoc_state).
                                                            (line  14)
* get_doc_field/3 <1>:                   Documentation on exports (autodoc_state).
                                                            (line 231)
* get_doc_field/3:                       Usage and interface (autodoc_state).
                                                            (line  14)
* get_doc_field_dict/3 <1>:              Documentation on exports (autodoc_state).
                                                            (line 235)
* get_doc_field_dict/3:                  Usage and interface (autodoc_state).
                                                            (line  14)
* get_first_loc_for_pred/3 <1>:          Documentation on exports (autodoc_state).
                                                            (line 267)
* get_first_loc_for_pred/3:              Usage and interface (autodoc_state).
                                                            (line  14)
* get_idxbase/3 <1>:                     Documentation on exports (autodoc_index).
                                                            (line  10)
* get_idxbase/3:                         Usage and interface (autodoc_index).
                                                            (line  14)
* get_idxsub/2 <1>:                      Documentation on exports (autodoc_index).
                                                            (line   6)
* get_idxsub/2:                          Usage and interface (autodoc_index).
                                                            (line  14)
* get_mainmod/1 <1>:                     Documentation on exports (autodoc_structure).
                                                            (line  25)
* get_mainmod/1:                         Usage and interface (autodoc_structure).
                                                            (line  14)
* get_mainmod_spec/1 <1>:                Documentation on exports (autodoc_structure).
                                                            (line  29)
* get_mainmod_spec/1:                    Usage and interface (autodoc_structure).
                                                            (line  14)
* get_mod_doc/3 <1>:                     Documentation on exports (autodoc_state).
                                                            (line 246)
* get_mod_doc/3:                         Usage and interface (autodoc_state).
                                                            (line  14)
* get_output_dir/2 <1>:                  Documentation on exports (autodoc_filesystem).
                                                            (line  51)
* get_output_dir/2:                      Usage and interface (autodoc_filesystem).
                                                            (line  14)
* get_subbase/3 <1>:                     Documentation on exports (autodoc_filesystem).
                                                            (line  95)
* get_subbase/3:                         Usage and interface (autodoc_filesystem).
                                                            (line  14)
* ghostview:                             Version/Change Log.
                                                            (line 246)
* gmake:                                 Other software packages required (lpdoc).
                                                            (line  17)
* gnd/1 <1>:                             Documentation on internals (example_module).
                                                            (line  41)
* gnd/1 <2>:                             Documentation on multifiles (example_module).
                                                            (line  17)
* gnd/1 <3>:                             Documentation on exports (example_module).
                                                            (line  48)
* gnd/1 <4>:                             Documentation on exports (basic_props).
                                                            (line 242)
* gnd/1:                                 Usage and interface (basic_props).
                                                            (line  19)
* gndstr/1 <1>:                          Documentation on exports (basic_props).
                                                            (line 277)
* gndstr/1:                              Usage and interface (basic_props).
                                                            (line  19)
* GNU general public license:            Summary.           (line  49)
* GNU Make:                              Other software packages required (lpdoc).
                                                            (line  16)
* ground/1 <1>:                          Documentation on internals (example_module).
                                                            (line  15)
* ground/1 <2>:                          Documentation on exports (example_module).
                                                            (line 112)
* ground/1 <3>:                          Documentation on exports (native_props).
                                                            (line  12)
* ground/1:                              Documentation on exports (basic_props).
                                                            (line 252)
* gunzip:                                Installing the source distribution (lpdoc).
                                                            (line  10)
* hard side-effects:                     Documentation on exports (native_props).
                                                            (line 399)
* have_choicepoints/1 <1>:               Documentation on exports (native_props).
                                                            (line 124)
* have_choicepoints/1:                   Usage and interface (native_props).
                                                            (line  18)
* head pattern:                          Documentation on exports (assertions_props).
                                                            (line  15)
* head_pattern/1 <1>:                    Documentation on exports (assertions_props).
                                                            (line  15)
* head_pattern/1 <2>:                    Usage and interface (assertions_props).
                                                            (line  14)
* head_pattern/1:                        Documentation on new declarations (assertions_doc).
                                                            (line 360)
* hiord_rt <1>:                          Usage and interface (autodoc_images).
                                                            (line  28)
* hiord_rt <2>:                          Usage and interface (autodoc_aux).
                                                            (line  28)
* hiord_rt <3>:                          Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* hiord_rt <4>:                          Usage and interface (autodoc_errors).
                                                            (line  20)
* hiord_rt <5>:                          Usage and interface (autodoc_refsdb).
                                                            (line  32)
* hiord_rt <6>:                          Usage and interface (autodoc_index).
                                                            (line  28)
* hiord_rt <7>:                          Usage and interface (autodoc_filesystem).
                                                            (line  32)
* hiord_rt <8>:                          Usage and interface (autodoc_man).
                                                            (line  22)
* hiord_rt <9>:                          Usage and interface (autodoc_html_template).
                                                            (line  28)
* hiord_rt <10>:                         Usage and interface (autodoc_html_resources).
                                                            (line  28)
* hiord_rt <11>:                         Usage and interface (autodoc_html).
                                                            (line  22)
* hiord_rt <12>:                         Usage and interface (autodoc_texinfo).
                                                            (line  32)
* hiord_rt <13>:                         Usage and interface (autodoc_settings).
                                                            (line  24)
* hiord_rt <14>:                         Usage and interface (autodoc_structure).
                                                            (line  28)
* hiord_rt <15>:                         Usage and interface (autodoc_doctree).
                                                            (line  36)
* hiord_rt <16>:                         Usage and interface (autodoc_state).
                                                            (line  36)
* hiord_rt <17>:                         Usage and interface (autodoc).
                                                            (line  32)
* hiord_rt <18>:                         Usage and interface (unittest_doc).
                                                            (line  14)
* hiord_rt <19>:                         Usage and interface (rtchecks_doc).
                                                            (line  18)
* hiord_rt <20>:                         Usage and interface (example_module).
                                                            (line  40)
* hiord_rt <21>:                         Usage and interface (meta_props).
                                                            (line  28)
* hiord_rt <22>:                         Usage and interface (native_props).
                                                            (line  28)
* hiord_rt <23>:                         Usage and interface (basic_props).
                                                            (line  29)
* hiord_rt <24>:                         Usage and interface (assertions_props).
                                                            (line  24)
* hiord_rt <25>:                         Usage and interface (assertions_doc).
                                                            (line  44)
* hiord_rt:                              Usage and interface (comments).
                                                            (line  40)
* html:                                  lpdoc operation - source and target files.
                                                            (line  72)
* HTML:                                  Summary.           (line  37)
* html index page:                       Installing a generated manual in a public area.
                                                            (line  32)
* htmlview/1 <1>:                        Documentation on exports (autodoc_settings).
                                                            (line  74)
* htmlview/1:                            Usage and interface (autodoc_settings).
                                                            (line  14)
* idx_get_indices/3 <1>:                 Documentation on exports (autodoc_index).
                                                            (line  35)
* idx_get_indices/3:                     Usage and interface (autodoc_index).
                                                            (line  14)
* image file:                            Documentation on exports (comments).
                                                            (line 390)
* images, inserting:                     Documentation on exports (comments).
                                                            (line 389)
* images, scaling:                       Documentation on exports (comments).
                                                            (line 394)
* img_url/2 <1>:                         Documentation on exports (autodoc_html_template).
                                                            (line   6)
* img_url/2:                             Usage and interface (autodoc_html_template).
                                                            (line  14)
* include files <1>:                     Documentation on internals (comments).
                                                            (line 418)
* include files:                         Documenting files which are not modules.
                                                            (line   6)
* include/1 <1>:                         Documentation on internals (comments).
                                                            (line 421)
* include/1:                             Documenting files which are not modules.
                                                            (line   9)
* including a predicate definition:      Documentation on exports (comments).
                                                            (line 386)
* including an image:                    Documentation on exports (comments).
                                                            (line 389)
* including code:                        Documentation on exports (comments).
                                                            (line 347)
* including files:                       Documentation on exports (comments).
                                                            (line 347)
* including images:                      Documentation on exports (comments).
                                                            (line 347)
* including or not authors:              Generating a manual.
                                                            (line  76)
* including or not bug info:             Generating a manual.
                                                            (line  75)
* including or not changelog:            Generating a manual.
                                                            (line  76)
* including or not versions, patches:    Generating a manual.
                                                            (line  75)
* indentation, avoiding:                 Documentation on exports (comments).
                                                            (line 166)
* indep/1 <1>:                           Documentation on exports (native_props).
                                                            (line  12)
* indep/1:                               Usage and interface (native_props).
                                                            (line  18)
* indep/2 <1>:                           Documentation on exports (native_props).
                                                            (line  12)
* indep/2:                               Usage and interface (native_props).
                                                            (line  18)
* index pages out of order:              Installing a generated manual in a public area.
                                                            (line  32)
* index_comment/2 <1>:                   Documentation on exports (autodoc).
                                                            (line   6)
* index_comment/2 <2>:                   Usage and interface (autodoc).
                                                            (line  14)
* index_comment/2:                       Generating a manual.
                                                            (line 110)
* info <1>:                              Installing the source distribution (lpdoc).
                                                            (line  28)
* info <2>:                              Documentation on exports (comments).
                                                            (line 124)
* info <3>:                              Troubleshooting.   (line  33)
* info <4>:                              Ensuring Compatibility with All Supported Target Formats.
                                                            (line  30)
* info <5>:                              Accessing info manuals.
                                                            (line   7)
* info <6>:                              lpdoc operation - source and target files.
                                                            (line  72)
* info:                                  Summary.           (line  44)
* info path list:                        Accessing info manuals.
                                                            (line  56)
* infodir_base/2 <1>:                    Documentation on exports (autodoc_texinfo).
                                                            (line   6)
* infodir_base/2:                        Usage and interface (autodoc_texinfo).
                                                            (line  14)
* inner:                                 Run-time checking of assertions.
                                                            (line  35)
* insert_show_toc/3 <1>:                 Documentation on exports (autodoc_doctree).
                                                            (line 209)
* insert_show_toc/3:                     Usage and interface (autodoc_doctree).
                                                            (line  14)
* inserting images:                      Version/Change Log.
                                                            (line 500)
* inst/2 <1>:                            Documentation on exports (basic_props).
                                                            (line 734)
* inst/2:                                Usage and interface (basic_props).
                                                            (line  15)
* installation:                          Overview of this document.
                                                            (line  13)
* installation, of manuals:              Installing a generated manual in a public area.
                                                            (line   6)
* INSTALLATION.lpdoc:                    Generating auxiliary files (e.g. READMEs).
                                                            (line  11)
* instance/2:                            Documentation on exports (native_props).
                                                            (line 603)
* instantiation properties:              Defining properties.
                                                            (line  33)
* int/1 <1>:                             Documentation on multifiles (example_module).
                                                            (line  33)
* int/1 <2>:                             Documentation on exports (example_module).
                                                            (line  50)
* int/1 <3>:                             Documentation on exports (native_props).
                                                            (line 329)
* int/1 <4>:                             Documentation on exports (basic_props).
                                                            (line  30)
* int/1:                                 Usage and interface (basic_props).
                                                            (line  19)
* integer/1:                             Documentation on exports (assertions_props).
                                                            (line 129)
* internals:                             Usage and interface (native_props).
                                                            (line  28)
* internals manual <1>:                  Documenting Libraries and/or Applications.
                                                            (line  20)
* internals manual <2>:                  Writing comments which document version/patch changes.
                                                            (line  24)
* internals manual:                      Overview of this document.
                                                            (line  33)
* introduction:                          Documentation on internals (comments).
                                                            (line 157)
* io_aux <1>:                            Usage and interface (autodoc_images).
                                                            (line  28)
* io_aux <2>:                            Usage and interface (autodoc_aux).
                                                            (line  28)
* io_aux <3>:                            Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* io_aux <4>:                            Usage and interface (autodoc_errors).
                                                            (line  20)
* io_aux <5>:                            Usage and interface (autodoc_refsdb).
                                                            (line  32)
* io_aux <6>:                            Usage and interface (autodoc_index).
                                                            (line  28)
* io_aux <7>:                            Usage and interface (autodoc_filesystem).
                                                            (line  32)
* io_aux <8>:                            Usage and interface (autodoc_man).
                                                            (line  22)
* io_aux <9>:                            Usage and interface (autodoc_html_template).
                                                            (line  28)
* io_aux <10>:                           Usage and interface (autodoc_html_resources).
                                                            (line  28)
* io_aux <11>:                           Usage and interface (autodoc_html).
                                                            (line  22)
* io_aux <12>:                           Usage and interface (autodoc_texinfo).
                                                            (line  32)
* io_aux <13>:                           Usage and interface (autodoc_settings).
                                                            (line  24)
* io_aux <14>:                           Usage and interface (autodoc_structure).
                                                            (line  28)
* io_aux <15>:                           Usage and interface (autodoc_doctree).
                                                            (line  36)
* io_aux <16>:                           Usage and interface (autodoc_state).
                                                            (line  36)
* io_aux <17>:                           Usage and interface (autodoc).
                                                            (line  32)
* io_aux <18>:                           Usage and interface (unittest_doc).
                                                            (line  14)
* io_aux <19>:                           Usage and interface (rtchecks_doc).
                                                            (line  18)
* io_aux <20>:                           Usage and interface (example_module).
                                                            (line  40)
* io_aux <21>:                           Usage and interface (meta_props).
                                                            (line  28)
* io_aux <22>:                           Usage and interface (native_props).
                                                            (line  28)
* io_aux <23>:                           Usage and interface (basic_props).
                                                            (line  29)
* io_aux <24>:                           Usage and interface (assertions_props).
                                                            (line  24)
* io_aux <25>:                           Usage and interface (assertions_doc).
                                                            (line  44)
* io_aux:                                Usage and interface (comments).
                                                            (line  40)
* io_basic <1>:                          Usage and interface (autodoc_images).
                                                            (line  28)
* io_basic <2>:                          Usage and interface (autodoc_aux).
                                                            (line  28)
* io_basic <3>:                          Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* io_basic <4>:                          Usage and interface (autodoc_errors).
                                                            (line  20)
* io_basic <5>:                          Usage and interface (autodoc_refsdb).
                                                            (line  32)
* io_basic <6>:                          Usage and interface (autodoc_index).
                                                            (line  28)
* io_basic <7>:                          Usage and interface (autodoc_filesystem).
                                                            (line  32)
* io_basic <8>:                          Usage and interface (autodoc_man).
                                                            (line  22)
* io_basic <9>:                          Usage and interface (autodoc_html_template).
                                                            (line  28)
* io_basic <10>:                         Usage and interface (autodoc_html_resources).
                                                            (line  28)
* io_basic <11>:                         Usage and interface (autodoc_html).
                                                            (line  22)
* io_basic <12>:                         Usage and interface (autodoc_texinfo).
                                                            (line  32)
* io_basic <13>:                         Usage and interface (autodoc_settings).
                                                            (line  24)
* io_basic <14>:                         Usage and interface (autodoc_structure).
                                                            (line  28)
* io_basic <15>:                         Usage and interface (autodoc_doctree).
                                                            (line  36)
* io_basic <16>:                         Usage and interface (autodoc_state).
                                                            (line  36)
* io_basic <17>:                         Usage and interface (autodoc).
                                                            (line  32)
* io_basic <18>:                         Usage and interface (unittest_doc).
                                                            (line  14)
* io_basic <19>:                         Usage and interface (rtchecks_doc).
                                                            (line  18)
* io_basic <20>:                         Usage and interface (example_module).
                                                            (line  40)
* io_basic <21>:                         Usage and interface (meta_props).
                                                            (line  28)
* io_basic <22>:                         Usage and interface (native_props).
                                                            (line  28)
* io_basic <23>:                         Usage and interface (basic_props).
                                                            (line  29)
* io_basic <24>:                         Usage and interface (assertions_props).
                                                            (line  24)
* io_basic <25>:                         Usage and interface (assertions_doc).
                                                            (line  44)
* io_basic:                              Usage and interface (comments).
                                                            (line  40)
* is/2:                                  Documentation on internals (example_module).
                                                            (line  44)
* is_det/1 <1>:                          Documentation on exports (example_module).
                                                            (line 264)
* is_det/1 <2>:                          Documentation on exports (native_props).
                                                            (line 152)
* is_det/1 <3>:                          Usage and interface (native_props).
                                                            (line  18)
* is_det/1:                              Documentation on exports (basic_props).
                                                            (line  48)
* is_index_cmd/1 <1>:                    Documentation on exports (autodoc_index).
                                                            (line  39)
* is_index_cmd/1:                        Usage and interface (autodoc_index).
                                                            (line  14)
* is_nonempty_doctree/1 <1>:             Documentation on exports (autodoc_doctree).
                                                            (line  25)
* is_nonempty_doctree/1:                 Usage and interface (autodoc_doctree).
                                                            (line  14)
* is_version/1 <1>:                      Documentation on exports (autodoc_doctree).
                                                            (line 185)
* is_version/1:                          Usage and interface (autodoc_doctree).
                                                            (line  14)
* iso/1 <1>:                             Documentation on multifiles (example_module).
                                                            (line  81)
* iso/1 <2>:                             Documentation on exports (basic_props).
                                                            (line 757)
* iso/1 <3>:                             Usage and interface (basic_props).
                                                            (line  15)
* iso/1:                                 Version/Change Log.
                                                            (line 435)
* italics face:                          Documentation on exports (comments).
                                                            (line 143)
* item in an itemized list:              Documentation on exports (comments).
                                                            (line  71)
* itemized list:                         Documentation on exports (comments).
                                                            (line  66)
* Jose F. Morales <1>:                   Image Handling.    (line   7)
* Jose F. Morales <2>:                   Auxiliary Definitions.
                                                            (line   7)
* Jose F. Morales <3>:                   Resolution of Bibliographical References.
                                                            (line   7)
* Jose F. Morales <4>:                   Database of Documentation References.
                                                            (line   7)
* Jose F. Morales <5>:                   Indexing Commands (Definition and Formatting).
                                                            (line   7)
* Jose F. Morales <6>:                   Filesystem Abstraction.
                                                            (line   7)
* Jose F. Morales <7>:                   Man Pages (man) Backend.
                                                            (line   7)
* Jose F. Morales <8>:                   Template Support for the HTML Backend.
                                                            (line   7)
* Jose F. Morales <9>:                   Resource Handling for the HTML Backend.
                                                            (line   7)
* Jose F. Morales <10>:                  HTML Backend.      (line   7)
* Jose F. Morales <11>:                  Texinfo Backend.   (line   6)
* Jose F. Morales <12>:                  Access to Default Settings.
                                                            (line   7)
* Jose F. Morales <13>:                  Handling the Document Structure.
                                                            (line   7)
* Jose F. Morales <14>:                  Documentation Abstract Syntax Tree.
                                                            (line   7)
* Jose F. Morales <15>:                  Internal State for Documentation Generation.
                                                            (line   7)
* Jose F. Morales:                       Documentation Generation Library.
                                                            (line   6)
* keyboard key:                          Documentation on exports (comments).
                                                            (line 151)
* known_format/1:                        Documentation on exports (autodoc_images).
                                                            (line  10)
* labgen_clean/1 <1>:                    Documentation on exports (autodoc_state).
                                                            (line 156)
* labgen_clean/1:                        Usage and interface (autodoc_state).
                                                            (line  14)
* labgen_get/2 <1>:                      Documentation on exports (autodoc_state).
                                                            (line 160)
* labgen_get/2:                          Usage and interface (autodoc_state).
                                                            (line  14)
* labgen_init/1 <1>:                     Documentation on exports (autodoc_state).
                                                            (line 152)
* labgen_init/1:                         Usage and interface (autodoc_state).
                                                            (line  14)
* LaTeX:                                 Documentation on exports (comments).
                                                            (line  47)
* LaTeX notation:                        Documentation on exports (comments).
                                                            (line 323)
* letter size paper:                     Generating a manual.
                                                            (line 154)
* library:                               lpdoc operation - source and target files.
                                                            (line  13)
* library(basicmodes):                   Documentation on exports (assertions_props).
                                                            (line  68)
* library(isomodes):                     Documentation on exports (assertions_props).
                                                            (line  68)
* linear/1 <1>:                          Documentation on exports (native_props).
                                                            (line 167)
* linear/1:                              Usage and interface (native_props).
                                                            (line  18)
* Linux:                                 Other software packages required (lpdoc).
                                                            (line  12)
* list/1 <1>:                            Documentation on internals (example_module).
                                                            (line  25)
* list/1 <2>:                            Documentation on multifiles (example_module).
                                                            (line  77)
* list/1 <3>:                            Documentation on exports (example_module).
                                                            (line  67)
* list/1 <4>:                            Documentation on exports (native_props).
                                                            (line 354)
* list/1 <5>:                            Documentation on exports (basic_props).
                                                            (line 418)
* list/1:                                Usage and interface (basic_props).
                                                            (line  19)
* list/2 <1>:                            Documentation on exports (autodoc_images).
                                                            (line  18)
* list/2 <2>:                            Documentation on exports (autodoc).
                                                            (line  39)
* list/2 <3>:                            Documentation on internals (example_module).
                                                            (line   7)
* list/2 <4>:                            Documentation on exports (example_module).
                                                            (line  82)
* list/2 <5>:                            Documentation on exports (basic_props).
                                                            (line 448)
* list/2 <6>:                            Usage and interface (basic_props).
                                                            (line  19)
* list/2 <7>:                            Documentation on exports (assertions_props).
                                                            (line 130)
* list/2:                                Documentation on internals (comments).
                                                            (line 380)
* list_or_aorb/2 <1>:                    Documentation on exports (example_module).
                                                            (line  32)
* list_or_aorb/2:                        Usage and interface (example_module).
                                                            (line  22)
* lists <1>:                             Usage and interface (autodoc_aux).
                                                            (line  24)
* lists <2>:                             Usage and interface (autodoc_bibrefs).
                                                            (line  24)
* lists <3>:                             Usage and interface (autodoc_refsdb).
                                                            (line  28)
* lists <4>:                             Usage and interface (autodoc_index).
                                                            (line  24)
* lists <5>:                             Usage and interface (autodoc_man).
                                                            (line  18)
* lists <6>:                             Usage and interface (autodoc_html_template).
                                                            (line  24)
* lists <7>:                             Usage and interface (autodoc_html).
                                                            (line  18)
* lists <8>:                             Usage and interface (autodoc_texinfo).
                                                            (line  28)
* lists <9>:                             Usage and interface (autodoc_doctree).
                                                            (line  32)
* lists <10>:                            Usage and interface (autodoc_state).
                                                            (line  32)
* lists <11>:                            Usage and interface (autodoc).
                                                            (line  28)
* lists <12>:                            Usage and interface (example_module).
                                                            (line  36)
* lists <13>:                            Usage and interface (native_props).
                                                            (line  24)
* lists:                                 Documentation on new declarations (assertions_doc).
                                                            (line  19)
* literal:                               Run-time checking of assertions.
                                                            (line  94)
* literate programming:                  Enhancing the documentation being generated.
                                                            (line  35)
* load_vpaths/0 <1>:                     Documentation on exports (autodoc_settings).
                                                            (line  50)
* load_vpaths/0:                         Usage and interface (autodoc_settings).
                                                            (line  14)
* locate_and_convert_image/4 <1>:        Documentation on exports (autodoc_images).
                                                            (line   6)
* locate_and_convert_image/4:            Usage and interface (autodoc_images).
                                                            (line  14)
* log of changes:                        Documentation on internals (comments).
                                                            (line 281)
* long:                                  Run-time checking of assertions.
                                                            (line 100)
* long/1 <1>:                            Documentation on exports (example_module).
                                                            (line 145)
* long/1:                                Usage and interface (example_module).
                                                            (line  18)
* lpdoc <1>:                             Other software packages required (lpdoc).
                                                            (line   6)
* lpdoc <2>:                             Installing the source distribution (lpdoc).
                                                            (line   6)
* lpdoc <3>:                             Installing lpdoc.  (line  11)
* lpdoc <4>:                             An Example - Documenting a Library Module.
                                                            (line   9)
* lpdoc <5>:                             Documentation on exports (assertions_props).
                                                            (line  43)
* lpdoc <6>:                             Documentation on new declarations (assertions_doc).
                                                            (line 364)
* lpdoc <7>:                             The Ciao assertion package.
                                                            (line  24)
* lpdoc <8>:                             Documentation on internals (comments).
                                                            (line 329)
* lpdoc <9>:                             Documentation on exports (comments).
                                                            (line 281)
* lpdoc <10>:                            Documentation Mark-up Language and Declarations.
                                                            (line  17)
* lpdoc <11>:                            Troubleshooting.   (line   6)
* lpdoc <12>:                            Generating auxiliary files (e.g. READMEs).
                                                            (line   9)
* lpdoc <13>:                            Separating the documentation from the source file.
                                                            (line  20)
* lpdoc <14>:                            Documenting reexported predicates.
                                                            (line  14)
* lpdoc <15>:                            Splitting large documents into parts.
                                                            (line   6)
* lpdoc <16>:                            Documenting files which are not modules.
                                                            (line   6)
* lpdoc <17>:                            Documenting Libraries and/or Applications.
                                                            (line   6)
* lpdoc <18>:                            Writing comments which document version/patch changes.
                                                            (line  17)
* lpdoc <19>:                            Ensuring Compatibility with All Supported Target Formats.
                                                            (line   6)
* lpdoc <20>:                            Some usage tips.   (line   6)
* lpdoc <21>:                            Putting it all together.
                                                            (line   7)
* lpdoc <22>:                            Accessing man manuals.
                                                            (line   6)
* lpdoc <23>:                            Accessing info manuals.
                                                            (line  11)
* lpdoc <24>:                            Enhancing the documentation being generated.
                                                            (line  19)
* lpdoc <25>:                            Installing a generated manual in a public area.
                                                            (line  14)
* lpdoc <26>:                            Cleaning up the documentation directory.
                                                            (line   6)
* lpdoc <27>:                            Generating a manual.
                                                            (line  13)
* lpdoc <28>:                            Generating Installing and Accessing Manuals.
                                                            (line  12)
* lpdoc <29>:                            Version/Change Log.
                                                            (line 288)
* lpdoc <30>:                            lpdoc usage.       (line   7)
* lpdoc <31>:                            lpdoc operation - source and target files.
                                                            (line   6)
* lpdoc <32>:                            Overview of this document.
                                                            (line   9)
* lpdoc <33>:                            Introduction.      (line   6)
* lpdoc:                                 Summary.           (line   6)
* lpdoc -help:                           Generating a manual.
                                                            (line 111)
* lpdoc all <1>:                         Accessing on-line manuals.
                                                            (line  10)
* lpdoc all:                             Generating a manual.
                                                            (line  88)
* lpdoc_examples:                        An Example - Documenting a Library Module.
                                                            (line   7)
* lpdoc_install:                         Installing lpdoc.  (line   6)
* lpdoc_option/1 <1>:                    Documentation on exports (autodoc_settings).
                                                            (line   6)
* lpdoc_option/1:                        Usage and interface (autodoc_settings).
                                                            (line  14)
* lpdocsrc(src(autodoc)):                Usage and interface (autodoc_html_resources).
                                                            (line  20)
* lpdocsrc(src(autodoc_aux)) <1>:        Usage and interface (autodoc_images).
                                                            (line  20)
* lpdocsrc(src(autodoc_aux)) <2>:        Usage and interface (autodoc_bibrefs).
                                                            (line  20)
* lpdocsrc(src(autodoc_aux)) <3>:        Usage and interface (autodoc_man).
                                                            (line  14)
* lpdocsrc(src(autodoc_aux)):            Usage and interface (autodoc_texinfo).
                                                            (line  24)
* lpdocsrc(src(autodoc_bibrefs)):        Usage and interface (autodoc_refsdb).
                                                            (line  24)
* lpdocsrc(src(autodoc_doctree)) <1>:    Usage and interface (autodoc_bibrefs).
                                                            (line  20)
* lpdocsrc(src(autodoc_doctree)) <2>:    Usage and interface (autodoc_refsdb).
                                                            (line  24)
* lpdocsrc(src(autodoc_doctree)) <3>:    Usage and interface (autodoc_index).
                                                            (line  20)
* lpdocsrc(src(autodoc_doctree)) <4>:    Usage and interface (autodoc_man).
                                                            (line  14)
* lpdocsrc(src(autodoc_doctree)) <5>:    Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_doctree)) <6>:    Usage and interface (autodoc_texinfo).
                                                            (line  24)
* lpdocsrc(src(autodoc_doctree)) <7>:    Usage and interface (autodoc_state).
                                                            (line  28)
* lpdocsrc(src(autodoc_doctree)):        Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(autodoc_filesystem)) <1>: Usage and interface (autodoc_images).
                                                            (line  20)
* lpdocsrc(src(autodoc_filesystem)) <2>: Usage and interface (autodoc_refsdb).
                                                            (line  24)
* lpdocsrc(src(autodoc_filesystem)) <3>: Usage and interface (autodoc_index).
                                                            (line  20)
* lpdocsrc(src(autodoc_filesystem)) <4>: Usage and interface (autodoc_html_resources).
                                                            (line  20)
* lpdocsrc(src(autodoc_filesystem)) <5>: Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_filesystem)) <6>: Usage and interface (autodoc_texinfo).
                                                            (line  24)
* lpdocsrc(src(autodoc_filesystem)) <7>: Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(autodoc_filesystem)) <8>: Usage and interface (autodoc_state).
                                                            (line  28)
* lpdocsrc(src(autodoc_filesystem)):     Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(autodoc_html)):           Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(autodoc_html_resources)) <1>: Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_html_resources)): Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(autodoc_html_template)):  Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_images)) <1>:     Usage and interface (autodoc_man).
                                                            (line  14)
* lpdocsrc(src(autodoc_images)) <2>:     Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_images)):         Usage and interface (autodoc_texinfo).
                                                            (line  24)
* lpdocsrc(src(autodoc_index)) <1>:      Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_index)) <2>:      Usage and interface (autodoc_texinfo).
                                                            (line  24)
* lpdocsrc(src(autodoc_index)) <3>:      Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(autodoc_index)) <4>:      Usage and interface (autodoc_state).
                                                            (line  28)
* lpdocsrc(src(autodoc_index)):          Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(autodoc_man)):            Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(autodoc_parse)) <1>:      Usage and interface (autodoc_bibrefs).
                                                            (line  20)
* lpdocsrc(src(autodoc_parse)) <2>:      Usage and interface (autodoc_state).
                                                            (line  28)
* lpdocsrc(src(autodoc_parse)):          Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(autodoc_refsdb)) <1>:     Usage and interface (autodoc_bibrefs).
                                                            (line  20)
* lpdocsrc(src(autodoc_refsdb)) <2>:     Usage and interface (autodoc_index).
                                                            (line  20)
* lpdocsrc(src(autodoc_refsdb)) <3>:     Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_refsdb)) <4>:     Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(autodoc_refsdb)) <5>:     Usage and interface (autodoc_state).
                                                            (line  28)
* lpdocsrc(src(autodoc_refsdb)):         Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(autodoc_settings)) <1>:   Usage and interface (autodoc_images).
                                                            (line  20)
* lpdocsrc(src(autodoc_settings)) <2>:   Usage and interface (autodoc_aux).
                                                            (line  20)
* lpdocsrc(src(autodoc_settings)) <3>:   Usage and interface (autodoc_bibrefs).
                                                            (line  20)
* lpdocsrc(src(autodoc_settings)) <4>:   Usage and interface (autodoc_filesystem).
                                                            (line  24)
* lpdocsrc(src(autodoc_settings)) <5>:   Usage and interface (autodoc_html_template).
                                                            (line  20)
* lpdocsrc(src(autodoc_settings)) <6>:   Usage and interface (autodoc_html_resources).
                                                            (line  20)
* lpdocsrc(src(autodoc_settings)) <7>:   Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_settings)) <8>:   Usage and interface (autodoc_texinfo).
                                                            (line  24)
* lpdocsrc(src(autodoc_settings)) <9>:   Usage and interface (autodoc_structure).
                                                            (line  20)
* lpdocsrc(src(autodoc_settings)) <10>:  Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(autodoc_settings)) <11>:  Usage and interface (autodoc_state).
                                                            (line  28)
* lpdocsrc(src(autodoc_settings)):       Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(autodoc_state)) <1>:      Usage and interface (autodoc_images).
                                                            (line  20)
* lpdocsrc(src(autodoc_state)) <2>:      Usage and interface (autodoc_bibrefs).
                                                            (line  20)
* lpdocsrc(src(autodoc_state)) <3>:      Usage and interface (autodoc_refsdb).
                                                            (line  24)
* lpdocsrc(src(autodoc_state)) <4>:      Usage and interface (autodoc_index).
                                                            (line  20)
* lpdocsrc(src(autodoc_state)) <5>:      Usage and interface (autodoc_filesystem).
                                                            (line  24)
* lpdocsrc(src(autodoc_state)) <6>:      Usage and interface (autodoc_man).
                                                            (line  14)
* lpdocsrc(src(autodoc_state)) <7>:      Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_state)) <8>:      Usage and interface (autodoc_texinfo).
                                                            (line  24)
* lpdocsrc(src(autodoc_state)) <9>:      Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(autodoc_state)):          Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(autodoc_structure)) <1>:  Usage and interface (autodoc_refsdb).
                                                            (line  24)
* lpdocsrc(src(autodoc_structure)) <2>:  Usage and interface (autodoc_index).
                                                            (line  20)
* lpdocsrc(src(autodoc_structure)) <3>:  Usage and interface (autodoc_filesystem).
                                                            (line  24)
* lpdocsrc(src(autodoc_structure)) <4>:  Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(autodoc_structure)) <5>:  Usage and interface (autodoc_texinfo).
                                                            (line  24)
* lpdocsrc(src(autodoc_structure)) <6>:  Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(autodoc_structure)) <7>:  Usage and interface (autodoc_state).
                                                            (line  28)
* lpdocsrc(src(autodoc_structure)):      Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(autodoc_texinfo)) <1>:    Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(autodoc_texinfo)):        Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(comments)) <1>:           Usage and interface (autodoc_man).
                                                            (line  14)
* lpdocsrc(src(comments)) <2>:           Usage and interface (autodoc_html).
                                                            (line  14)
* lpdocsrc(src(comments)) <3>:           Usage and interface (autodoc_texinfo).
                                                            (line  24)
* lpdocsrc(src(comments)) <4>:           Usage and interface (autodoc_doctree).
                                                            (line  28)
* lpdocsrc(src(comments)) <5>:           Usage and interface (autodoc_state).
                                                            (line  28)
* lpdocsrc(src(comments)):               Usage and interface (autodoc).
                                                            (line  24)
* lpdocsrc(src(component_versions)):     Usage and interface (autodoc_filesystem).
                                                            (line  24)
* lpdocsrc(src(distpkg_download)):       Usage and interface (autodoc_html).
                                                            (line  14)
* machine readable comments <1>:         Documentation on internals (comments).
                                                            (line   8)
* machine readable comments:             Documentation Mark-up Language and Declarations.
                                                            (line   9)
* main body:                             Documentation on internals (comments).
                                                            (line 158)
* main file:                             lpdoc operation - source and target files.
                                                            (line  44)
* main/0:                                lpdoc operation - source and target files.
                                                            (line  12)
* main/1:                                lpdoc operation - source and target files.
                                                            (line  12)
* main_absfile_for_subtarget/3 <1>:      Documentation on exports (autodoc_filesystem).
                                                            (line  77)
* main_absfile_for_subtarget/3:          Usage and interface (autodoc_filesystem).
                                                            (line  14)
* main_absfile_in_format/2 <1>:          Documentation on exports (autodoc_filesystem).
                                                            (line  71)
* main_absfile_in_format/2:              Usage and interface (autodoc_filesystem).
                                                            (line  14)
* main_output_name/2 <1>:                Documentation on exports (autodoc_filesystem).
                                                            (line  91)
* main_output_name/2:                    Usage and interface (autodoc_filesystem).
                                                            (line  14)
* make/make_rt <1>:                      Usage and interface (autodoc_images).
                                                            (line  24)
* make/make_rt <2>:                      Usage and interface (autodoc_bibrefs).
                                                            (line  24)
* make/make_rt <3>:                      Usage and interface (autodoc_html_template).
                                                            (line  24)
* make/make_rt <4>:                      Usage and interface (autodoc_texinfo).
                                                            (line  28)
* make/make_rt <5>:                      Usage and interface (autodoc_settings).
                                                            (line  20)
* make/make_rt <6>:                      Usage and interface (autodoc_structure).
                                                            (line  24)
* make/make_rt <7>:                      Usage and interface (autodoc_doctree).
                                                            (line  32)
* make/make_rt <8>:                      Usage and interface (autodoc_state).
                                                            (line  32)
* make/make_rt:                          Usage and interface (autodoc).
                                                            (line  28)
* make/system_extra <1>:                 Usage and interface (autodoc_images).
                                                            (line  24)
* make/system_extra <2>:                 Usage and interface (autodoc_aux).
                                                            (line  24)
* make/system_extra <3>:                 Usage and interface (autodoc_bibrefs).
                                                            (line  24)
* make/system_extra <4>:                 Usage and interface (autodoc_filesystem).
                                                            (line  28)
* make/system_extra <5>:                 Usage and interface (autodoc_html_template).
                                                            (line  24)
* make/system_extra <6>:                 Usage and interface (autodoc_html_resources).
                                                            (line  24)
* make/system_extra <7>:                 Usage and interface (autodoc_texinfo).
                                                            (line  28)
* make/system_extra <8>:                 Usage and interface (autodoc_settings).
                                                            (line  20)
* make/system_extra <9>:                 Usage and interface (autodoc_doctree).
                                                            (line  32)
* make/system_extra <10>:                Usage and interface (autodoc_state).
                                                            (line  32)
* make/system_extra:                     Usage and interface (autodoc).
                                                            (line  28)
* Makefile <1>:                          Other software packages required (lpdoc).
                                                            (line  16)
* Makefile:                              Installing a generated manual in a public area.
                                                            (line   9)
* makeinfo:                              Other software packages required (lpdoc).
                                                            (line  67)
* makeinfo/1 <1>:                        Documentation on exports (autodoc_settings).
                                                            (line  98)
* makeinfo/1:                            Usage and interface (autodoc_settings).
                                                            (line  14)
* makertf/1 <1>:                         Documentation on exports (autodoc_settings).
                                                            (line 102)
* makertf/1:                             Usage and interface (autodoc_settings).
                                                            (line  14)
* man <1>:                               Accessing man manuals.
                                                            (line   6)
* man:                                   Accessing on-line manuals.
                                                            (line   8)
* Manuel Hermenegildo <1>:               Auxiliary Definitions.
                                                            (line   7)
* Manuel Hermenegildo <2>:               Resolution of Bibliographical References.
                                                            (line   7)
* Manuel Hermenegildo <3>:               Error Messages.    (line   7)
* Manuel Hermenegildo <4>:               Man Pages (man) Backend.
                                                            (line   7)
* Manuel Hermenegildo <5>:               Texinfo Backend.   (line   6)
* Manuel Hermenegildo <6>:               Documentation Abstract Syntax Tree.
                                                            (line   7)
* Manuel Hermenegildo <7>:               Internal State for Documentation Generation.
                                                            (line   7)
* Manuel Hermenegildo <8>:               Documentation Generation Library.
                                                            (line   6)
* Manuel Hermenegildo <9>:               Installing lpdoc.  (line   6)
* Manuel Hermenegildo <10>:              An Example - Documenting a Library Module.
                                                            (line   7)
* Manuel Hermenegildo <11>:              Properties which are native to analyzers.
                                                            (line   7)
* Manuel Hermenegildo <12>:              Basic data types and properties.
                                                            (line   7)
* Manuel Hermenegildo <13>:              Declaring regular types.
                                                            (line   7)
* Manuel Hermenegildo <14>:              Types and properties related to assertions.
                                                            (line   7)
* Manuel Hermenegildo <15>:              The Ciao assertion package.
                                                            (line   7)
* Manuel Hermenegildo <16>:              Documentation Mark-up Language and Declarations.
                                                            (line   6)
* Manuel Hermenegildo:                   Generating Installing and Accessing Manuals.
                                                            (line   6)
* master index:                          lpdoc operation - source and target files.
                                                            (line  69)
* member/2 <1>:                          Documentation on exports (basic_props).
                                                            (line 506)
* member/2:                              Usage and interface (basic_props).
                                                            (line  15)
* memo/1 <1>:                            Documentation on exports (basic_props).
                                                            (line 904)
* memo/1:                                Usage and interface (basic_props).
                                                            (line  15)
* messages <1>:                          Usage and interface (autodoc_images).
                                                            (line  24)
* messages <2>:                          Usage and interface (autodoc_aux).
                                                            (line  24)
* messages <3>:                          Usage and interface (autodoc_html_template).
                                                            (line  24)
* messages <4>:                          Usage and interface (autodoc_html_resources).
                                                            (line  24)
* messages <5>:                          Usage and interface (autodoc_texinfo).
                                                            (line  28)
* messages <6>:                          Usage and interface (autodoc_state).
                                                            (line  32)
* messages:                              Usage and interface (autodoc).
                                                            (line  28)
* meta_predicate/1:                      Enhancing the documentation being generated.
                                                            (line  18)
* meta_props <1>:                        Meta-properties.   (line   7)
* meta_props:                            Overview of this document.
                                                            (line  25)
* mode <1>:                              Documentation on exports (assertions_props).
                                                            (line  62)
* mode:                                  Documentation on new declarations (assertions_doc).
                                                            (line  12)
* modedef/1 <1>:                         Documentation on exports (assertions_props).
                                                            (line  69)
* modedef/1 <2>:                         Documentation on new declarations (assertions_doc).
                                                            (line 302)
* modedef/1:                             Usage and interface (assertions_doc).
                                                            (line  25)
* modtype/1 <1>:                         Documentation on exports (autodoc_state).
                                                            (line 250)
* modtype/1:                             Usage and interface (autodoc_state).
                                                            (line  22)
* module comment:                        Documentation on internals (comments).
                                                            (line 158)
* module declaration:                    Documentation Generation Library.
                                                            (line  14)
* module/1:                              Documentation Generation Library.
                                                            (line  13)
* module/2:                              Documentation Generation Library.
                                                            (line  13)
* mshare/1 <1>:                          Documentation on exports (native_props).
                                                            (line 183)
* mshare/1:                              Usage and interface (native_props).
                                                            (line  18)
* mut_exclusive/1 <1>:                   Documentation on exports (native_props).
                                                            (line 204)
* mut_exclusive/1:                       Usage and interface (native_props).
                                                            (line  18)
* mytype/1 <1>:                          Documentation on exports (example_module).
                                                            (line 168)
* mytype/1:                              Usage and interface (example_module).
                                                            (line  14)
* n_assrt_body/5:                        Documentation on exports (assertions_props).
                                                            (line 232)
* nabody/1 <1>:                          Documentation on exports (assertions_props).
                                                            (line 203)
* nabody/1:                              Usage and interface (assertions_props).
                                                            (line  14)
* native/1 <1>:                          Documentation on exports (native_props).
                                                            (line  54)
* native/1 <2>:                          Documentation on exports (basic_props).
                                                            (line  27)
* native/1:                              Usage and interface (basic_props).
                                                            (line  15)
* native/2 <1>:                          Documentation on exports (native_props).
                                                            (line  21)
* native/2 <2>:                          Documentation on exports (basic_props).
                                                            (line 850)
* native/2:                              Usage and interface (basic_props).
                                                            (line  15)
* native_props <1>:                      Properties which are native to analyzers.
                                                            (line   7)
* native_props:                          Overview of this document.
                                                            (line  24)
* nativeprops.pl:                        Run-time checking of assertions.
                                                            (line  61)
* netscape:                              Version/Change Log.
                                                            (line 296)
* new item in description list:          Documentation on exports (comments).
                                                            (line  94)
* nlist/1:                               Documentation on exports (basic_props).
                                                            (line 503)
* nlist/2 <1>:                           Documentation on exports (basic_props).
                                                            (line 478)
* nlist/2:                               Usage and interface (basic_props).
                                                            (line  19)
* nnegint/1 <1>:                         Documentation on exports (basic_props).
                                                            (line  67)
* nnegint/1:                             Usage and interface (basic_props).
                                                            (line  19)
* no:                                    Run-time checking of assertions.
                                                            (line  38)
* no_choicepoints/1 <1>:                 Documentation on exports (native_props).
                                                            (line 217)
* no_choicepoints/1:                     Usage and interface (native_props).
                                                            (line  18)
* no_exception/1 <1>:                    Documentation on exports (native_props).
                                                            (line 224)
* no_exception/1:                        Usage and interface (native_props).
                                                            (line  18)
* no_exception/2 <1>:                    Documentation on exports (native_props).
                                                            (line 232)
* no_exception/2:                        Usage and interface (native_props).
                                                            (line  18)
* no_rtcheck/1 <1>:                      Documentation on exports (basic_props).
                                                            (line 863)
* no_rtcheck/1:                          Usage and interface (basic_props).
                                                            (line  15)
* no_signal/1 <1>:                       Documentation on exports (native_props).
                                                            (line 240)
* no_signal/1:                           Usage and interface (native_props).
                                                            (line  18)
* no_signal/2 <1>:                       Documentation on exports (native_props).
                                                            (line 248)
* no_signal/2:                           Usage and interface (native_props).
                                                            (line  18)
* non_det/1 <1>:                         Documentation on exports (native_props).
                                                            (line 256)
* non_det/1:                             Usage and interface (native_props).
                                                            (line  18)
* nonground/1 <1>:                       Documentation on exports (native_props).
                                                            (line 269)
* nonground/1:                           Usage and interface (native_props).
                                                            (line  18)
* nonvar/1 <1>:                          Documentation on exports (example_module).
                                                            (line 116)
* nonvar/1:                              Documentation on exports (basic_props).
                                                            (line  42)
* normalize_index_cmd/3 <1>:             Documentation on exports (autodoc_index).
                                                            (line  47)
* normalize_index_cmd/3:                 Usage and interface (autodoc_index).
                                                            (line  14)
* not_covered/1 <1>:                     Documentation on exports (native_props).
                                                            (line 279)
* not_covered/1:                         Usage and interface (native_props).
                                                            (line  18)
* not_fails:                             Unit Testing Library.
                                                            (line  35)
* not_fails/1 <1>:                       Documentation on multifiles (example_module).
                                                            (line  58)
* not_fails/1 <2>:                       Documentation on exports (example_module).
                                                            (line  88)
* not_fails/1 <3>:                       Documentation on exports (native_props).
                                                            (line 290)
* not_fails/1:                           Usage and interface (native_props).
                                                            (line  18)
* not_further_inst/1:                    Documentation on exports (assertions_props).
                                                            (line 191)
* not_further_inst/2 <1>:                Documentation on exports (example_module).
                                                            (line 126)
* not_further_inst/2 <2>:                Documentation on exports (basic_props).
                                                            (line 787)
* not_further_inst/2:                    Usage and interface (basic_props).
                                                            (line  15)
* not_mut_exclusive/1 <1>:               Documentation on exports (native_props).
                                                            (line 306)
* not_mut_exclusive/1:                   Usage and interface (native_props).
                                                            (line  18)
* num/1 <1>:                             Documentation on internals (example_module).
                                                            (line  55)
* num/1 <2>:                             Documentation on exports (basic_props).
                                                            (line 140)
* num/1:                                 Usage and interface (basic_props).
                                                            (line  19)
* num_code/1 <1>:                        Documentation on exports (basic_props).
                                                            (line 648)
* num_code/1:                            Usage and interface (basic_props).
                                                            (line  19)
* num_solutions/2 <1>:                   Documentation on exports (native_props).
                                                            (line 319)
* num_solutions/2:                       Usage and interface (native_props).
                                                            (line  18)
* og/2:                                  Documentation on internals (example_module).
                                                            (line  31)
* one-sided printing:                    Generating a manual.
                                                            (line  76)
* op/3:                                  Enhancing the documentation being generated.
                                                            (line  18)
* operator_specifier/1 <1>:              Documentation on exports (basic_props).
                                                            (line 354)
* operator_specifier/1:                  Usage and interface (basic_props).
                                                            (line  19)
* operators:                             Usage and interface (autodoc_doctree).
                                                            (line  32)
* option_comment/2 <1>:                  Documentation on exports (autodoc_state).
                                                            (line  11)
* option_comment/2 <2>:                  Usage and interface (autodoc_state).
                                                            (line  14)
* option_comment/2:                      Generating a manual.
                                                            (line  77)
* p/1 <1>:                               Documentation on exports (example_module).
                                                            (line  91)
* p/1:                                   Usage and interface (example_module).
                                                            (line  14)
* p/3 <1>:                               Documentation on multifiles (example_module).
                                                            (line   7)
* p/3:                                   Usage and interface (example_module).
                                                            (line  26)
* p/5 <1>:                               Documentation on exports (example_module).
                                                            (line 102)
* p/5:                                   Usage and interface (example_module).
                                                            (line  14)
* packages <1>:                          Documentation on internals (comments).
                                                            (line 418)
* packages:                              Documenting files which are not modules.
                                                            (line   7)
* page numbering, changing:              Generating a manual.
                                                            (line 128)
* page size, changing:                   Generating a manual.
                                                            (line 133)
* page style, changing:                  Generating a manual.
                                                            (line 133)
* paragraph break:                       Documentation on exports (comments).
                                                            (line 161)
* parametric property:                   Documentation on internals (meta_props).
                                                            (line  10)
* parametric regular type abstractions:  Documentation on internals (meta_props).
                                                            (line  14)
* parametric type functor:               Documentation on new declarations (regtypes_doc).
                                                            (line  29)
* parse_structure/0 <1>:                 Documentation on exports (autodoc_structure).
                                                            (line  17)
* parse_structure/0:                     Usage and interface (autodoc_structure).
                                                            (line  14)
* parts in a large document:             Splitting large documents into parts.
                                                            (line  13)
* parts in large documents:              Documentation on internals (comments).
                                                            (line 435)
* pdf generation:                        Version/Change Log.
                                                            (line 210)
* pdf viewer:                            Version/Change Log.
                                                            (line 246)
* pdftex:                                Other software packages required (lpdoc).
                                                            (line  46)
* pdfview/1 <1>:                         Documentation on exports (autodoc_settings).
                                                            (line  66)
* pdfview/1:                             Usage and interface (autodoc_settings).
                                                            (line  14)
* pe_type/1 <1>:                         Documentation on exports (basic_props).
                                                            (line 922)
* pe_type/1:                             Usage and interface (basic_props).
                                                            (line  15)
* Pedro Lopez <1>:                       Properties which are native to analyzers.
                                                            (line   7)
* Pedro Lopez:                           Declaring regular types.
                                                            (line   7)
* perl:                                  Other software packages required (lpdoc).
                                                            (line  54)
* pillow/html:                           Usage and interface (autodoc_html_template).
                                                            (line  24)
* planned improvement:                   Documentation on internals (comments).
                                                            (line 264)
* possibly_fails/1 <1>:                  Documentation on exports (native_props).
                                                            (line 357)
* possibly_fails/1:                      Usage and interface (native_props).
                                                            (line  18)
* possibly_nondet/1 <1>:                 Documentation on exports (native_props).
                                                            (line 371)
* possibly_nondet/1:                     Usage and interface (native_props).
                                                            (line  18)
* pred assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line   7)
* pred/1 <1>:                            Documentation on exports (assertions_props).
                                                            (line   8)
* pred/1 <2>:                            Documentation on new declarations (assertions_doc).
                                                            (line   6)
* pred/1 <3>:                            Usage and interface (assertions_doc).
                                                            (line  24)
* pred/1:                                Documentation on exports (comments).
                                                            (line 260)
* pred/2 <1>:                            Documentation on new declarations (assertions_doc).
                                                            (line  33)
* pred/2:                                Usage and interface (assertions_doc).
                                                            (line  24)
* predfunctor/1 <1>:                     Documentation on exports (assertions_props).
                                                            (line 344)
* predfunctor/1:                         Usage and interface (assertions_props).
                                                            (line  18)
* predicate:                             Run-time checking of assertions.
                                                            (line  91)
* predicate/n:                           Unit Testing Library.
                                                            (line  26)
* predname/1 <1>:                        Documentation on exports (basic_props).
                                                            (line 654)
* predname/1 <2>:                        Usage and interface (basic_props).
                                                            (line  19)
* predname/1 <3>:                        Documentation on exports (assertions_props).
                                                            (line  52)
* predname/1:                            Documentation on internals (comments).
                                                            (line 259)
* prepare_current_refs/1 <1>:            Documentation on exports (autodoc_refsdb).
                                                            (line  10)
* prepare_current_refs/1:                Usage and interface (autodoc_refsdb).
                                                            (line  14)
* prepare_mathjax/0 <1>:                 Documentation on exports (autodoc_html_resources).
                                                            (line  10)
* prepare_mathjax/0:                     Usage and interface (autodoc_html_resources).
                                                            (line  14)
* prepare_web_skel/1 <1>:                Documentation on exports (autodoc_html_resources).
                                                            (line   6)
* prepare_web_skel/1:                    Usage and interface (autodoc_html_resources).
                                                            (line  14)
* program assertions:                    The Ciao assertion package.
                                                            (line  10)
* program section:                       Documentation on internals (comments).
                                                            (line 208)
* program subsection:                    Documentation on internals (comments).
                                                            (line 224)
* Prolog <1>:                            Installing lpdoc.  (line  11)
* Prolog <2>:                            Documenting Libraries and/or Applications.
                                                            (line  33)
* Prolog <3>:                            Generating a manual.
                                                            (line  55)
* Prolog <4>:                            lpdoc operation - source and target files.
                                                            (line   8)
* Prolog:                                Introduction.      (line  10)
* Prolog source files:                   lpdoc operation - source and target files.
                                                            (line   6)
* Prolog, Ciao:                          Generating a manual from the Ciao Emacs mode.
                                                            (line   6)
* prolog_flags <1>:                      Usage and interface (autodoc_images).
                                                            (line  28)
* prolog_flags <2>:                      Usage and interface (autodoc_aux).
                                                            (line  28)
* prolog_flags <3>:                      Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* prolog_flags <4>:                      Usage and interface (autodoc_errors).
                                                            (line  20)
* prolog_flags <5>:                      Usage and interface (autodoc_refsdb).
                                                            (line  32)
* prolog_flags <6>:                      Usage and interface (autodoc_index).
                                                            (line  28)
* prolog_flags <7>:                      Usage and interface (autodoc_filesystem).
                                                            (line  32)
* prolog_flags <8>:                      Usage and interface (autodoc_man).
                                                            (line  22)
* prolog_flags <9>:                      Usage and interface (autodoc_html_template).
                                                            (line  28)
* prolog_flags <10>:                     Usage and interface (autodoc_html_resources).
                                                            (line  28)
* prolog_flags <11>:                     Usage and interface (autodoc_html).
                                                            (line  22)
* prolog_flags <12>:                     Usage and interface (autodoc_texinfo).
                                                            (line  32)
* prolog_flags <13>:                     Usage and interface (autodoc_settings).
                                                            (line  24)
* prolog_flags <14>:                     Usage and interface (autodoc_structure).
                                                            (line  28)
* prolog_flags <15>:                     Usage and interface (autodoc_doctree).
                                                            (line  36)
* prolog_flags <16>:                     Usage and interface (autodoc_state).
                                                            (line  36)
* prolog_flags <17>:                     Usage and interface (autodoc).
                                                            (line  32)
* prolog_flags <18>:                     Usage and interface (unittest_doc).
                                                            (line  14)
* prolog_flags <19>:                     Usage and interface (rtchecks_doc).
                                                            (line  18)
* prolog_flags <20>:                     Usage and interface (example_module).
                                                            (line  40)
* prolog_flags <21>:                     Usage and interface (meta_props).
                                                            (line  28)
* prolog_flags <22>:                     Usage and interface (native_props).
                                                            (line  28)
* prolog_flags <23>:                     Usage and interface (basic_props).
                                                            (line  29)
* prolog_flags <24>:                     Usage and interface (assertions_props).
                                                            (line  24)
* prolog_flags <25>:                     Usage and interface (assertions_doc).
                                                            (line  44)
* prolog_flags:                          Usage and interface (comments).
                                                            (line  40)
* prop assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 200)
* prop/1 <1>:                            Documentation on new declarations (assertions_doc).
                                                            (line 199)
* prop/1:                                Usage and interface (assertions_doc).
                                                            (line  24)
* prop/2 <1>:                            Documentation on exports (meta_props).
                                                            (line  21)
* prop/2 <2>:                            Usage and interface (meta_props).
                                                            (line  18)
* prop/2 <3>:                            Documentation on new declarations (assertions_doc).
                                                            (line 229)
* prop/2:                                Usage and interface (assertions_doc).
                                                            (line  25)
* prop_abs/1:                            Documentation on internals (meta_props).
                                                            (line   7)
* properties:                            Overview of this document.
                                                            (line  23)
* properties of computations:            Defining properties.
                                                            (line  11)
* properties of execution states:        Defining properties.
                                                            (line   9)
* properties, basic:                     Basic data types and properties.
                                                            (line   9)
* properties, native:                    Properties which are native to analyzers.
                                                            (line  10)
* property:                              Documentation on new declarations (assertions_doc).
                                                            (line 201)
* property abstraction:                  Documentation on internals (meta_props).
                                                            (line  10)
* property compatibility:                Documentation on exports (basic_props).
                                                            (line 708)
* property_conjunction/1 <1>:            Documentation on exports (assertions_props).
                                                            (line 110)
* property_conjunction/1 <2>:            Usage and interface (assertions_props).
                                                            (line  18)
* property_conjunction/1:                Documentation on exports (assertions_doc).
                                                            (line  23)
* property_starterm/1 <1>:               Documentation on exports (assertions_props).
                                                            (line 111)
* property_starterm/1:                   Usage and interface (assertions_props).
                                                            (line  18)
* propfunctor/1 <1>:                     Documentation on exports (assertions_props).
                                                            (line 350)
* propfunctor/1:                         Usage and interface (assertions_props).
                                                            (line  18)
* providing information to the compiler <1>: Documentation on exports (assertions_doc).
                                                            (line  40)
* providing information to the compiler: Documentation on new declarations (assertions_doc).
                                                            (line 255)
* ps2pdf/1 <1>:                          Documentation on exports (autodoc_settings).
                                                            (line  94)
* ps2pdf/1:                              Usage and interface (autodoc_settings).
                                                            (line  14)
* pstogif:                               Other software packages required (lpdoc).
                                                            (line  74)
* psview/1 <1>:                          Documentation on exports (autodoc_settings).
                                                            (line  70)
* psview/1:                              Usage and interface (autodoc_settings).
                                                            (line  14)
* q/1 <1>:                               Documentation on exports (example_module).
                                                            (line 228)
* q/1:                                   Usage and interface (example_module).
                                                            (line  14)
* q/2 <1>:                               Documentation on exports (example_module).
                                                            (line  40)
* q/2:                                   Usage and interface (example_module).
                                                            (line  14)
* r/1 <1>:                               Documentation on exports (example_module).
                                                            (line  70)
* r/1:                                   Usage and interface (example_module).
                                                            (line  14)
* read <1>:                              Usage and interface (autodoc_doctree).
                                                            (line  32)
* read <2>:                              Usage and interface (autodoc_state).
                                                            (line  32)
* read:                                  Usage and interface (autodoc).
                                                            (line  28)
* read_file/2 <1>:                       Documentation on exports (autodoc_aux).
                                                            (line   6)
* read_file/2:                           Usage and interface (autodoc_aux).
                                                            (line  14)
* references <1>:                        Other software packages required (lpdoc).
                                                            (line  36)
* references:                            Documentation on exports (comments).
                                                            (line 268)
* regtype assertion:                     Documentation on new declarations (regtypes_doc).
                                                            (line   7)
* regtype/1 <1>:                         Documentation on exports (basic_props).
                                                            (line 825)
* regtype/1 <2>:                         Usage and interface (basic_props).
                                                            (line  15)
* regtype/1 <3>:                         Documentation on new declarations (regtypes_doc).
                                                            (line   6)
* regtype/1:                             Usage and interface (regtypes_doc).
                                                            (line  16)
* regtype/2 <1>:                         Documentation on exports (meta_props).
                                                            (line  30)
* regtype/2 <2>:                         Usage and interface (meta_props).
                                                            (line  18)
* regtype/2 <3>:                         Documentation on new declarations (regtypes_doc).
                                                            (line  68)
* regtype/2:                             Usage and interface (regtypes_doc).
                                                            (line  16)
* regtypes <1>:                          Declaring regular types.
                                                            (line   7)
* regtypes:                              Overview of this document.
                                                            (line  24)
* regular type:                          Documentation on new declarations (regtypes_doc).
                                                            (line   8)
* regular type definitions:              Declaring regular types.
                                                            (line  10)
* regular type expression:               Documentation on new declarations (regtypes_doc).
                                                            (line  49)
* regular types:                         Declaring regular types.
                                                            (line  12)
* relations/2 <1>:                       Documentation on exports (native_props).
                                                            (line 383)
* relations/2 <2>:                       Usage and interface (native_props).
                                                            (line  18)
* relations/2:                           Documentation on exports (basic_props).
                                                            (line 407)
* requested_file_formats/1 <1>:          Documentation on exports (autodoc_settings).
                                                            (line  45)
* requested_file_formats/1:              Usage and interface (autodoc_settings).
                                                            (line  14)
* reset_output_dir_db/0 <1>:             Documentation on exports (autodoc).
                                                            (line  18)
* reset_output_dir_db/0:                 Usage and interface (autodoc).
                                                            (line  14)
* resolve_bibliography/1 <1>:            Documentation on exports (autodoc_bibrefs).
                                                            (line   6)
* resolve_bibliography/1:                Usage and interface (autodoc_bibrefs).
                                                            (line  14)
* rtchecks:                              Run-time checking of assertions.
                                                            (line   7)
* rtchecks_asrloc:                       Run-time checking of assertions.
                                                            (line  71)
* rtchecks_callloc:                      Run-time checking of assertions.
                                                            (line  87)
* rtchecks_entry:                        Run-time checking of assertions.
                                                            (line  42)
* rtchecks_exit:                         Run-time checking of assertions.
                                                            (line  47)
* rtchecks_inline:                       Run-time checking of assertions.
                                                            (line  59)
* rtchecks_level:                        Run-time checking of assertions.
                                                            (line  31)
* rtchecks_namefmt:                      Run-time checking of assertions.
                                                            (line  99)
* rtchecks_predloc:                      Run-time checking of assertions.
                                                            (line  79)
* rtchecks_rt.pl:                        Run-time checking of assertions.
                                                            (line  61)
* rtchecks_test:                         Run-time checking of assertions.
                                                            (line  52)
* rtchecks_trust:                        Run-time checking of assertions.
                                                            (line  37)
* rtftohlp/1 <1>:                        Documentation on exports (autodoc_settings).
                                                            (line 106)
* rtftohlp/1:                            Usage and interface (autodoc_settings).
                                                            (line  14)
* run-time checks:                       Documentation on new declarations (assertions_doc).
                                                            (line 209)
* running unit tests:                    Unit Testing Library.
                                                            (line  45)
* s/1 <1>:                               Documentation on exports (example_module).
                                                            (line 211)
* s/1:                                   Usage and interface (example_module).
                                                            (line  14)
* s_assrt_body/1 <1>:                    Documentation on exports (assertions_props).
                                                            (line 238)
* s_assrt_body/1 <2>:                    Usage and interface (assertions_props).
                                                            (line  18)
* s_assrt_body/1:                        Documentation on new declarations (assertions_doc).
                                                            (line 118)
* scribe:                                Documentation on exports (comments).
                                                            (line  50)
* section:                               Documentation on exports (comments).
                                                            (line 123)
* section_prop/2 <1>:                    Documentation on exports (autodoc_doctree).
                                                            (line  99)
* section_prop/2:                        Usage and interface (autodoc_doctree).
                                                            (line  14)
* section_select_prop/3 <1>:             Documentation on exports (autodoc_doctree).
                                                            (line 103)
* section_select_prop/3:                 Usage and interface (autodoc_doctree).
                                                            (line  14)
* sections:                              Documentation on exports (comments).
                                                            (line 268)
* secttree/1 <1>:                        Documentation on exports (autodoc_refsdb).
                                                            (line  29)
* secttree/1:                            Usage and interface (autodoc_refsdb).
                                                            (line  18)
* secttree_resolve/3 <1>:                Documentation on exports (autodoc_refsdb).
                                                            (line  34)
* secttree_resolve/3:                    Usage and interface (autodoc_refsdb).
                                                            (line  14)
* sequence/2 <1>:                        Documentation on exports (basic_props).
                                                            (line 538)
* sequence/2:                            Usage and interface (basic_props).
                                                            (line  19)
* sequence_or_list/2 <1>:                Documentation on exports (basic_props).
                                                            (line 570)
* sequence_or_list/2:                    Usage and interface (basic_props).
                                                            (line  19)
* setting_value/2 <1>:                   Documentation on exports (autodoc_settings).
                                                            (line  33)
* setting_value/2:                       Usage and interface (autodoc_settings).
                                                            (line  14)
* setting_value_or_default/2 <1>:        Documentation on exports (autodoc_settings).
                                                            (line  21)
* setting_value_or_default/2:            Usage and interface (autodoc_settings).
                                                            (line  14)
* setting_value_or_default/3 <1>:        Documentation on exports (autodoc_settings).
                                                            (line  29)
* setting_value_or_default/3:            Usage and interface (autodoc_settings).
                                                            (line  14)
* SETTINGS <1>:                          Documentation on exports (comments).
                                                            (line 281)
* SETTINGS <2>:                          Version/Change Log.
                                                            (line 242)
* SETTINGS:                              lpdoc usage.       (line   9)
* SETTINGS.pl <1>:                       Separating the documentation from the source file.
                                                            (line  20)
* SETTINGS.pl <2>:                       Documenting reexported predicates.
                                                            (line  14)
* SETTINGS.pl <3>:                       Splitting large documents into parts.
                                                            (line  16)
* SETTINGS.pl <4>:                       Ensuring Compatibility with All Supported Target Formats.
                                                            (line  17)
* SETTINGS.pl <5>:                       Putting it all together.
                                                            (line  10)
* SETTINGS.pl <6>:                       Accessing man manuals.
                                                            (line  14)
* SETTINGS.pl <7>:                       Accessing info manuals.
                                                            (line  23)
* SETTINGS.pl <8>:                       Accessing html manuals.
                                                            (line  14)
* SETTINGS.pl <9>:                       Accessing on-line manuals.
                                                            (line   9)
* SETTINGS.pl <10>:                      Installing a generated manual in a public area.
                                                            (line  11)
* SETTINGS.pl <11>:                      Cleaning up the documentation directory.
                                                            (line  30)
* SETTINGS.pl <12>:                      Generating a manual.
                                                            (line  24)
* SETTINGS.pl:                           Generating a manual from the Ciao Emacs mode.
                                                            (line  16)
* SETTINGS.pl.generated:                 Generating a manual.
                                                            (line  37)
* sh_exec/2 <1>:                         Documentation on exports (autodoc_aux).
                                                            (line  14)
* sh_exec/2:                             Usage and interface (autodoc_aux).
                                                            (line  14)
* sharing pieces of text:                Documentation on exports (comments).
                                                            (line 376)
* sharing sets:                          Documentation on exports (native_props).
                                                            (line 186)
* short:                                 Run-time checking of assertions.
                                                            (line 103)
* sideff/2 <1>:                          Documentation on internals (example_module).
                                                            (line  11)
* sideff/2 <2>:                          Documentation on exports (example_module).
                                                            (line 254)
* sideff/2 <3>:                          Documentation on exports (basic_props).
                                                            (line  12)
* sideff/2:                              Usage and interface (basic_props).
                                                            (line  15)
* sideff_hard/1 <1>:                     Documentation on exports (native_props).
                                                            (line 395)
* sideff_hard/1:                         Usage and interface (native_props).
                                                            (line  18)
* sideff_pure/1 <1>:                     Documentation on exports (native_props).
                                                            (line 403)
* sideff_pure/1:                         Usage and interface (native_props).
                                                            (line  18)
* sideff_soft/1 <1>:                     Documentation on exports (native_props).
                                                            (line 410)
* sideff_soft/1:                         Usage and interface (native_props).
                                                            (line  18)
* signal/1 <1>:                          Documentation on exports (native_props).
                                                            (line 418)
* signal/1:                              Usage and interface (native_props).
                                                            (line  18)
* signal/2 <1>:                          Documentation on exports (native_props).
                                                            (line 425)
* signal/2:                              Usage and interface (native_props).
                                                            (line  18)
* signals/2 <1>:                         Documentation on exports (native_props).
                                                            (line 433)
* signals/2:                             Usage and interface (native_props).
                                                            (line  18)
* size/2 <1>:                            Documentation on exports (native_props).
                                                            (line 441)
* size/2:                                Usage and interface (native_props).
                                                            (line  18)
* size/3 <1>:                            Documentation on exports (native_props).
                                                            (line 447)
* size/3:                                Usage and interface (native_props).
                                                            (line  18)
* size_lb/2 <1>:                         Documentation on exports (native_props).
                                                            (line 453)
* size_lb/2:                             Usage and interface (native_props).
                                                            (line  18)
* size_metric/3 <1>:                     Documentation on exports (native_props).
                                                            (line 485)
* size_metric/3:                         Usage and interface (native_props).
                                                            (line  18)
* size_metric/4 <1>:                     Documentation on exports (native_props).
                                                            (line 493)
* size_metric/4:                         Usage and interface (native_props).
                                                            (line  18)
* size_o/2 <1>:                          Documentation on exports (native_props).
                                                            (line 466)
* size_o/2:                              Usage and interface (native_props).
                                                            (line  18)
* size_ub/2 <1>:                         Documentation on exports (native_props).
                                                            (line 472)
* size_ub/2:                             Usage and interface (native_props).
                                                            (line  18)
* soft side-effects:                     Documentation on exports (native_props).
                                                            (line 414)
* solutions/2 <1>:                       Documentation on exports (native_props).
                                                            (line 344)
* solutions/2:                           Usage and interface (native_props).
                                                            (line  18)
* sort:                                  Usage and interface (native_props).
                                                            (line  24)
* space, extra lines:                    Documentation on exports (comments).
                                                            (line 157)
* spcae, horizontal fill:                Documentation on exports (comments).
                                                            (line 135)
* special characters:                    Documentation on exports (comments).
                                                            (line 402)
* specifications:                        The Ciao assertion package.
                                                            (line  22)
* standalone_docstr/1 <1>:               Documentation on exports (autodoc_structure).
                                                            (line  21)
* standalone_docstr/1:                   Usage and interface (autodoc_structure).
                                                            (line  14)
* steps/2 <1>:                           Documentation on exports (native_props).
                                                            (line 503)
* steps/2:                               Usage and interface (native_props).
                                                            (line  18)
* steps_lb/2 <1>:                        Documentation on exports (example_module).
                                                            (line 129)
* steps_lb/2 <2>:                        Documentation on exports (native_props).
                                                            (line 516)
* steps_lb/2:                            Usage and interface (native_props).
                                                            (line  18)
* steps_o/2 <1>:                         Documentation on exports (native_props).
                                                            (line 530)
* steps_o/2:                             Usage and interface (native_props).
                                                            (line  18)
* steps_ub/2 <1>:                        Documentation on exports (native_props).
                                                            (line 538)
* steps_ub/2:                            Usage and interface (native_props).
                                                            (line  18)
* streams:                               Usage and interface (native_props).
                                                            (line  24)
* streams_basic <1>:                     Usage and interface (autodoc_images).
                                                            (line  28)
* streams_basic <2>:                     Usage and interface (autodoc_aux).
                                                            (line  28)
* streams_basic <3>:                     Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* streams_basic <4>:                     Usage and interface (autodoc_errors).
                                                            (line  20)
* streams_basic <5>:                     Usage and interface (autodoc_refsdb).
                                                            (line  32)
* streams_basic <6>:                     Usage and interface (autodoc_index).
                                                            (line  28)
* streams_basic <7>:                     Usage and interface (autodoc_filesystem).
                                                            (line  32)
* streams_basic <8>:                     Usage and interface (autodoc_man).
                                                            (line  22)
* streams_basic <9>:                     Usage and interface (autodoc_html_template).
                                                            (line  28)
* streams_basic <10>:                    Usage and interface (autodoc_html_resources).
                                                            (line  28)
* streams_basic <11>:                    Usage and interface (autodoc_html).
                                                            (line  22)
* streams_basic <12>:                    Usage and interface (autodoc_texinfo).
                                                            (line  32)
* streams_basic <13>:                    Usage and interface (autodoc_settings).
                                                            (line  24)
* streams_basic <14>:                    Usage and interface (autodoc_structure).
                                                            (line  28)
* streams_basic <15>:                    Usage and interface (autodoc_doctree).
                                                            (line  36)
* streams_basic <16>:                    Usage and interface (autodoc_state).
                                                            (line  36)
* streams_basic <17>:                    Usage and interface (autodoc).
                                                            (line  32)
* streams_basic <18>:                    Usage and interface (unittest_doc).
                                                            (line  14)
* streams_basic <19>:                    Usage and interface (rtchecks_doc).
                                                            (line  18)
* streams_basic <20>:                    Usage and interface (example_module).
                                                            (line  40)
* streams_basic <21>:                    Usage and interface (meta_props).
                                                            (line  28)
* streams_basic <22>:                    Usage and interface (native_props).
                                                            (line  28)
* streams_basic <23>:                    Usage and interface (basic_props).
                                                            (line  29)
* streams_basic <24>:                    Usage and interface (assertions_props).
                                                            (line  24)
* streams_basic <25>:                    Usage and interface (assertions_doc).
                                                            (line  44)
* streams_basic:                         Usage and interface (comments).
                                                            (line  40)
* string/1 <1>:                          Documentation on exports (autodoc_images).
                                                            (line  16)
* string/1 <2>:                          Documentation on exports (autodoc_refsdb).
                                                            (line  42)
* string/1 <3>:                          Documentation on exports (autodoc_index).
                                                            (line  28)
* string/1 <4>:                          Documentation on exports (autodoc_html_template).
                                                            (line  15)
* string/1 <5>:                          Documentation on exports (autodoc_doctree).
                                                            (line 162)
* string/1 <6>:                          Documentation on exports (autodoc_state).
                                                            (line  52)
* string/1 <7>:                          Documentation on exports (autodoc).
                                                            (line  15)
* string/1 <8>:                          Documentation on exports (basic_props).
                                                            (line 620)
* string/1:                              Usage and interface (basic_props).
                                                            (line  19)
* stringcommand/1 <1>:                   Documentation on exports (assertions_props).
                                                            (line  41)
* stringcommand/1 <2>:                   Documentation on new declarations (assertions_doc).
                                                            (line 364)
* stringcommand/1 <3>:                   Documentation on exports (comments).
                                                            (line  32)
* stringcommand/1:                       Usage and interface (comments).
                                                            (line  26)
* strings:                               Usage and interface (comments).
                                                            (line  36)
* strong face:                           Documentation on exports (comments).
                                                            (line 139)
* struct/1 <1>:                          Documentation on exports (basic_props).
                                                            (line 213)
* struct/1:                              Usage and interface (basic_props).
                                                            (line  19)
* subsection:                            Documentation on exports (comments).
                                                            (line 129)
* subtarget/1 <1>:                       Documentation on exports (autodoc_filesystem).
                                                            (line  17)
* subtarget/1:                           Usage and interface (autodoc_filesystem).
                                                            (line  18)
* subtitle:                              Documentation on internals (comments).
                                                            (line  32)
* success assertion:                     Documentation on new declarations (assertions_doc).
                                                            (line 103)
* success/1 <1>:                         Documentation on new declarations (assertions_doc).
                                                            (line 102)
* success/1:                             Usage and interface (assertions_doc).
                                                            (line  26)
* success/2 <1>:                         Documentation on new declarations (assertions_doc).
                                                            (line 121)
* success/2:                             Usage and interface (assertions_doc).
                                                            (line  26)
* supported documentation formats:       Documentation on exports (autodoc).
                                                            (line  52)
* supported_file_format/1 <1>:           Documentation on exports (autodoc_filesystem).
                                                            (line  27)
* supported_file_format/1:               Usage and interface (autodoc_filesystem).
                                                            (line  14)
* supported_option/1 <1>:                Documentation on exports (autodoc_state).
                                                            (line   6)
* supported_option/1:                    Usage and interface (autodoc_state).
                                                            (line  18)
* synopsis section of the man page:      Generating a manual.
                                                            (line  96)
* syntax of formatting commands:         Documentation on exports (comments).
                                                            (line  19)
* system <1>:                            Usage and interface (autodoc_images).
                                                            (line  24)
* system <2>:                            Usage and interface (autodoc_aux).
                                                            (line  24)
* system <3>:                            Usage and interface (autodoc_filesystem).
                                                            (line  28)
* system <4>:                            Usage and interface (autodoc_html_template).
                                                            (line  24)
* system <5>:                            Usage and interface (autodoc_html).
                                                            (line  18)
* system <6>:                            Usage and interface (autodoc_texinfo).
                                                            (line  28)
* system <7>:                            Usage and interface (autodoc_state).
                                                            (line  32)
* system <8>:                            Usage and interface (autodoc).
                                                            (line  28)
* system:                                Usage and interface (native_props).
                                                            (line  24)
* system modules:                        Generating a manual.
                                                            (line  61)
* system_info <1>:                       Usage and interface (autodoc_images).
                                                            (line  28)
* system_info <2>:                       Usage and interface (autodoc_aux).
                                                            (line  28)
* system_info <3>:                       Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* system_info <4>:                       Usage and interface (autodoc_errors).
                                                            (line  20)
* system_info <5>:                       Usage and interface (autodoc_refsdb).
                                                            (line  32)
* system_info <6>:                       Usage and interface (autodoc_index).
                                                            (line  28)
* system_info <7>:                       Usage and interface (autodoc_filesystem).
                                                            (line  32)
* system_info <8>:                       Usage and interface (autodoc_man).
                                                            (line  22)
* system_info <9>:                       Usage and interface (autodoc_html_template).
                                                            (line  28)
* system_info <10>:                      Usage and interface (autodoc_html_resources).
                                                            (line  28)
* system_info <11>:                      Usage and interface (autodoc_html).
                                                            (line  22)
* system_info <12>:                      Usage and interface (autodoc_texinfo).
                                                            (line  32)
* system_info <13>:                      Usage and interface (autodoc_settings).
                                                            (line  24)
* system_info <14>:                      Usage and interface (autodoc_structure).
                                                            (line  28)
* system_info <15>:                      Usage and interface (autodoc_doctree).
                                                            (line  36)
* system_info <16>:                      Usage and interface (autodoc_state).
                                                            (line  36)
* system_info <17>:                      Usage and interface (autodoc).
                                                            (line  32)
* system_info <18>:                      Usage and interface (unittest_doc).
                                                            (line  14)
* system_info <19>:                      Usage and interface (rtchecks_doc).
                                                            (line  18)
* system_info <20>:                      Usage and interface (example_module).
                                                            (line  40)
* system_info <21>:                      Usage and interface (meta_props).
                                                            (line  28)
* system_info <22>:                      Usage and interface (native_props).
                                                            (line  28)
* system_info <23>:                      Usage and interface (basic_props).
                                                            (line  29)
* system_info <24>:                      Usage and interface (assertions_props).
                                                            (line  24)
* system_info <25>:                      Usage and interface (assertions_doc).
                                                            (line  44)
* system_info:                           Usage and interface (comments).
                                                            (line  40)
* t/5 <1>:                               Documentation on exports (example_module).
                                                            (line 172)
* t/5:                                   Usage and interface (example_module).
                                                            (line  14)
* tar:                                   Installing the source distribution (lpdoc).
                                                            (line  10)
* tau/1 <1>:                             Documentation on exports (native_props).
                                                            (line 552)
* tau/1:                                 Usage and interface (native_props).
                                                            (line  18)
* term/1 <1>:                            Documentation on exports (autodoc).
                                                            (line  78)
* term/1 <2>:                            Documentation on exports (basic_props).
                                                            (line   6)
* term/1 <3>:                            Usage and interface (basic_props).
                                                            (line  19)
* term/1:                                Documentation on internals (comments).
                                                            (line  72)
* term_basic <1>:                        Usage and interface (autodoc_images).
                                                            (line  28)
* term_basic <2>:                        Usage and interface (autodoc_aux).
                                                            (line  28)
* term_basic <3>:                        Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* term_basic <4>:                        Usage and interface (autodoc_errors).
                                                            (line  20)
* term_basic <5>:                        Usage and interface (autodoc_refsdb).
                                                            (line  32)
* term_basic <6>:                        Usage and interface (autodoc_index).
                                                            (line  28)
* term_basic <7>:                        Usage and interface (autodoc_filesystem).
                                                            (line  32)
* term_basic <8>:                        Usage and interface (autodoc_man).
                                                            (line  22)
* term_basic <9>:                        Usage and interface (autodoc_html_template).
                                                            (line  28)
* term_basic <10>:                       Usage and interface (autodoc_html_resources).
                                                            (line  28)
* term_basic <11>:                       Usage and interface (autodoc_html).
                                                            (line  22)
* term_basic <12>:                       Usage and interface (autodoc_texinfo).
                                                            (line  32)
* term_basic <13>:                       Usage and interface (autodoc_settings).
                                                            (line  24)
* term_basic <14>:                       Usage and interface (autodoc_structure).
                                                            (line  28)
* term_basic <15>:                       Usage and interface (autodoc_doctree).
                                                            (line  36)
* term_basic <16>:                       Usage and interface (autodoc_state).
                                                            (line  36)
* term_basic <17>:                       Usage and interface (autodoc).
                                                            (line  32)
* term_basic <18>:                       Usage and interface (unittest_doc).
                                                            (line  14)
* term_basic <19>:                       Usage and interface (rtchecks_doc).
                                                            (line  18)
* term_basic <20>:                       Usage and interface (example_module).
                                                            (line  40)
* term_basic <21>:                       Usage and interface (meta_props).
                                                            (line  28)
* term_basic <22>:                       Usage and interface (native_props).
                                                            (line  28)
* term_basic <23>:                       Usage and interface (basic_props).
                                                            (line  29)
* term_basic <24>:                       Usage and interface (regtypes_doc).
                                                            (line  30)
* term_basic <25>:                       Usage and interface (assertions_props).
                                                            (line  24)
* term_basic <26>:                       Usage and interface (assertions_doc).
                                                            (line  44)
* term_basic:                            Usage and interface (comments).
                                                            (line  40)
* term_compare <1>:                      Usage and interface (autodoc_images).
                                                            (line  28)
* term_compare <2>:                      Usage and interface (autodoc_aux).
                                                            (line  28)
* term_compare <3>:                      Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* term_compare <4>:                      Usage and interface (autodoc_errors).
                                                            (line  20)
* term_compare <5>:                      Usage and interface (autodoc_refsdb).
                                                            (line  32)
* term_compare <6>:                      Usage and interface (autodoc_index).
                                                            (line  28)
* term_compare <7>:                      Usage and interface (autodoc_filesystem).
                                                            (line  32)
* term_compare <8>:                      Usage and interface (autodoc_man).
                                                            (line  22)
* term_compare <9>:                      Usage and interface (autodoc_html_template).
                                                            (line  28)
* term_compare <10>:                     Usage and interface (autodoc_html_resources).
                                                            (line  28)
* term_compare <11>:                     Usage and interface (autodoc_html).
                                                            (line  22)
* term_compare <12>:                     Usage and interface (autodoc_texinfo).
                                                            (line  32)
* term_compare <13>:                     Usage and interface (autodoc_settings).
                                                            (line  24)
* term_compare <14>:                     Usage and interface (autodoc_structure).
                                                            (line  28)
* term_compare <15>:                     Usage and interface (autodoc_doctree).
                                                            (line  36)
* term_compare <16>:                     Usage and interface (autodoc_state).
                                                            (line  36)
* term_compare <17>:                     Usage and interface (autodoc).
                                                            (line  32)
* term_compare <18>:                     Usage and interface (unittest_doc).
                                                            (line  14)
* term_compare <19>:                     Usage and interface (rtchecks_doc).
                                                            (line  18)
* term_compare <20>:                     Usage and interface (example_module).
                                                            (line  40)
* term_compare <21>:                     Usage and interface (meta_props).
                                                            (line  28)
* term_compare <22>:                     Usage and interface (native_props).
                                                            (line  28)
* term_compare <23>:                     Usage and interface (basic_props).
                                                            (line  29)
* term_compare <24>:                     Usage and interface (assertions_props).
                                                            (line  24)
* term_compare <25>:                     Usage and interface (assertions_doc).
                                                            (line  44)
* term_compare:                          Usage and interface (comments).
                                                            (line  40)
* term_typing <1>:                       Usage and interface (autodoc_images).
                                                            (line  28)
* term_typing <2>:                       Usage and interface (autodoc_aux).
                                                            (line  28)
* term_typing <3>:                       Usage and interface (autodoc_bibrefs).
                                                            (line  28)
* term_typing <4>:                       Usage and interface (autodoc_errors).
                                                            (line  20)
* term_typing <5>:                       Usage and interface (autodoc_refsdb).
                                                            (line  32)
* term_typing <6>:                       Usage and interface (autodoc_index).
                                                            (line  28)
* term_typing <7>:                       Usage and interface (autodoc_filesystem).
                                                            (line  32)
* term_typing <8>:                       Usage and interface (autodoc_man).
                                                            (line  22)
* term_typing <9>:                       Usage and interface (autodoc_html_template).
                                                            (line  28)
* term_typing <10>:                      Usage and interface (autodoc_html_resources).
                                                            (line  28)
* term_typing <11>:                      Usage and interface (autodoc_html).
                                                            (line  22)
* term_typing <12>:                      Usage and interface (autodoc_texinfo).
                                                            (line  32)
* term_typing <13>:                      Usage and interface (autodoc_settings).
                                                            (line  24)
* term_typing <14>:                      Usage and interface (autodoc_structure).
                                                            (line  28)
* term_typing <15>:                      Usage and interface (autodoc_doctree).
                                                            (line  36)
* term_typing <16>:                      Usage and interface (autodoc_state).
                                                            (line  36)
* term_typing <17>:                      Usage and interface (autodoc).
                                                            (line  32)
* term_typing <18>:                      Usage and interface (unittest_doc).
                                                            (line  14)
* term_typing <19>:                      Usage and interface (rtchecks_doc).
                                                            (line  18)
* term_typing <20>:                      Usage and interface (example_module).
                                                            (line  40)
* term_typing <21>:                      Usage and interface (meta_props).
                                                            (line  28)
* term_typing <22>:                      Usage and interface (native_props).
                                                            (line  28)
* term_typing <23>:                      Usage and interface (basic_props).
                                                            (line  29)
* term_typing <24>:                      Usage and interface (assertions_props).
                                                            (line  24)
* term_typing <25>:                      Usage and interface (assertions_doc).
                                                            (line  44)
* term_typing:                           Usage and interface (comments).
                                                            (line  40)
* terminates/1 <1>:                      Documentation on exports (native_props).
                                                            (line 568)
* terminates/1:                          Usage and interface (native_props).
                                                            (line  18)
* terms <1>:                             Usage and interface (autodoc_images).
                                                            (line  24)
* terms <2>:                             Usage and interface (autodoc_bibrefs).
                                                            (line  24)
* terms <3>:                             Usage and interface (autodoc_filesystem).
                                                            (line  28)
* terms <4>:                             Usage and interface (autodoc_html_template).
                                                            (line  24)
* terms <5>:                             Usage and interface (autodoc_html_resources).
                                                            (line  24)
* terms <6>:                             Usage and interface (autodoc_texinfo).
                                                            (line  28)
* terms <7>:                             Usage and interface (autodoc_structure).
                                                            (line  24)
* terms <8>:                             Usage and interface (autodoc_doctree).
                                                            (line  32)
* terms <9>:                             Usage and interface (autodoc_state).
                                                            (line  32)
* terms:                                 Usage and interface (autodoc).
                                                            (line  28)
* terms_check <1>:                       Usage and interface (native_props).
                                                            (line  24)
* terms_check:                           Usage and interface (basic_props).
                                                            (line  25)
* terms_vars:                            Usage and interface (native_props).
                                                            (line  24)
* test assertion <1>:                    Unit Testing Library.
                                                            (line  15)
* test assertion:                        Documentation on new declarations (assertions_doc).
                                                            (line 137)
* test/1 <1>:                            Documentation on new declarations (assertions_doc).
                                                            (line 136)
* test/1:                                Usage and interface (assertions_doc).
                                                            (line  27)
* test/2 <1>:                            Documentation on new declarations (assertions_doc).
                                                            (line 150)
* test/2:                                Usage and interface (assertions_doc).
                                                            (line  27)
* test_type/2 <1>:                       Documentation on exports (native_props).
                                                            (line 579)
* test_type/2 <2>:                       Usage and interface (native_props).
                                                            (line  18)
* test_type/2:                           Documentation on exports (basic_props).
                                                            (line  57)
* tex <1>:                               Other software packages required (lpdoc).
                                                            (line  22)
* tex:                                   Troubleshooting.   (line  22)
* TeX:                                   Version/Change Log.
                                                            (line 385)
* tex/1 <1>:                             Documentation on exports (autodoc_settings).
                                                            (line  82)
* tex/1:                                 Usage and interface (autodoc_settings).
                                                            (line  14)
* texec assertion:                       Documentation on new declarations (assertions_doc).
                                                            (line  48)
* texec/1 <1>:                           Documentation on new declarations (assertions_doc).
                                                            (line  47)
* texec/1:                               Usage and interface (assertions_doc).
                                                            (line  27)
* texec/2 <1>:                           Documentation on new declarations (assertions_doc).
                                                            (line  58)
* texec/2:                               Usage and interface (assertions_doc).
                                                            (line  28)
* texi2dvi:                              Other software packages required (lpdoc).
                                                            (line  24)
* texi2html:                             Other software packages required (lpdoc).
                                                            (line  52)
* texindex:                              Other software packages required (lpdoc).
                                                            (line  35)
* texindex/1 <1>:                        Documentation on exports (autodoc_settings).
                                                            (line  86)
* texindex/1:                            Usage and interface (autodoc_settings).
                                                            (line  14)
* texinfo:                               Documentation Generation Library.
                                                            (line  51)
* Texinfo:                               Other software packages required (lpdoc).
                                                            (line  24)
* texinfo <1>:                           Troubleshooting.   (line  27)
* texinfo <2>:                           Ensuring Compatibility with All Supported Target Formats.
                                                            (line  16)
* texinfo <3>:                           Generating a manual.
                                                            (line 114)
* texinfo <4>:                           lpdoc operation - source and target files.
                                                            (line   7)
* texinfo <5>:                           Overview of this document.
                                                            (line  43)
* texinfo:                               Summary.           (line  37)
* texinfo files:                         lpdoc operation - source and target files.
                                                            (line  23)
* textual comments:                      Documentation Mark-up Language and Declarations.
                                                            (line  18)
* thesis-like style:                     Generating a manual.
                                                            (line 157)
* throws/2 <1>:                          Documentation on exports (native_props).
                                                            (line 587)
* throws/2:                              Usage and interface (native_props).
                                                            (line  18)
* time_struct/1:                         Documentation on internals (comments).
                                                            (line 489)
* times(N):                              Unit Testing Library.
                                                            (line  39)
* title:                                 Documentation on internals (comments).
                                                            (line  13)
* top_suffix/2 <1>:                      Documentation on exports (autodoc_state).
                                                            (line  72)
* top_suffix/2:                          Usage and interface (autodoc_state).
                                                            (line  14)
* tree_of/2 <1>:                         Documentation on exports (example_module).
                                                            (line  23)
* tree_of/2:                             Usage and interface (example_module).
                                                            (line  22)
* troubleshooting:                       Generating Installing and Accessing Manuals.
                                                            (line  15)
* true assertion:                        Documentation on exports (assertions_doc).
                                                            (line  61)
* true/1 <1>:                            Documentation on exports (assertions_doc).
                                                            (line  59)
* true/1:                                Usage and interface (assertions_doc).
                                                            (line  19)
* trust assertion:                       Documentation on exports (assertions_doc).
                                                            (line  28)
* trust/1 <1>:                           Documentation on exports (assertions_doc).
                                                            (line  26)
* trust/1:                               Usage and interface (assertions_doc).
                                                            (line  19)
* try_sols(N):                           Unit Testing Library.
                                                            (line  40)
* ttyout:                                Usage and interface (autodoc).
                                                            (line  28)
* two-sided:                             Generating a manual.
                                                            (line  77)
* typeindex/5 <1>:                       Documentation on exports (autodoc_index).
                                                            (line  14)
* typeindex/5:                           Usage and interface (autodoc_index).
                                                            (line  14)
* types:                                 Overview of this document.
                                                            (line  23)
* typewriter-like font:                  Documentation on exports (comments).
                                                            (line 147)
* u/3 <1>:                               Documentation on exports (example_module).
                                                            (line 132)
* u/3:                                   Usage and interface (example_module).
                                                            (line  14)
* unit tests:                            Unit Testing Library.
                                                            (line   9)
* unittest:                              Unit Testing Library.
                                                            (line   6)
* Universal Resource Locator:            Documentation on exports (comments).
                                                            (line 290)
* Unix:                                  Accessing man manuals.
                                                            (line   6)
* URL:                                   Documentation on exports (comments).
                                                            (line 291)
* url references:                        Version/Change Log.
                                                            (line 501)
* urls:                                  Documentation on exports (comments).
                                                            (line 268)
* usage:                                 Documentation on new declarations (assertions_doc).
                                                            (line  12)
* usage of a command:                    Documentation on exports (comments).
                                                            (line 378)
* usage of the application:              Generating a manual.
                                                            (line  95)
* usage section:                         Version/Change Log.
                                                            (line 504)
* usage tips:                            Generating Installing and Accessing Manuals.
                                                            (line  14)
* usage_message/1 <1>:                   Generating a manual.
                                                            (line  94)
* usage_message/1:                       Version/Change Log.
                                                            (line 506)
* use_module/1:                          Documenting reexported predicates.
                                                            (line  15)
* use_package/1 <1>:                     Documentation on internals (comments).
                                                            (line 422)
* use_package/1:                         Documenting files which are not modules.
                                                            (line  10)
* user_output/2 <1>:                     Documentation on exports (native_props).
                                                            (line 595)
* user_output/2:                         Usage and interface (native_props).
                                                            (line  18)
* using citations:                       Generating a manual.
                                                            (line 118)
* using_mathjax/1 <1>:                   Documentation on exports (autodoc_html_resources).
                                                            (line  14)
* using_mathjax/1:                       Usage and interface (autodoc_html_resources).
                                                            (line  14)
* var/1 <1>:                             Documentation on multifiles (example_module).
                                                            (line  19)
* var/1 <2>:                             Documentation on exports (example_module).
                                                            (line  46)
* var/1:                                 Documentation on exports (assertions_props).
                                                            (line 164)
* variable names:                        Some attention points.
                                                            (line  16)
* verbatim text:                         Documentation on exports (comments).
                                                            (line 101)
* verify_settings/0 <1>:                 Documentation on exports (autodoc_settings).
                                                            (line  13)
* verify_settings/0:                     Usage and interface (autodoc_settings).
                                                            (line  14)
* version:                               Documentation on exports (comments).
                                                            (line 317)
* version maintenance mode for packages: Documentation on internals (comments).
                                                            (line 332)
* version number:                        Documentation on internals (comments).
                                                            (line 282)
* version_date/2 <1>:                    Documentation on exports (autodoc_doctree).
                                                            (line 193)
* version_date/2:                        Usage and interface (autodoc_doctree).
                                                            (line  14)
* version_descriptor/1 <1>:              Documentation on internals (comments).
                                                            (line 300)
* version_descriptor/1 <2>:              Documentation on exports (comments).
                                                            (line 513)
* version_descriptor/1:                  Usage and interface (comments).
                                                            (line  30)
* version_maintenance_type/1:            Documentation on internals (comments).
                                                            (line 312)
* version_number/1:                      Documentation on internals (comments).
                                                            (line 463)
* version_numstr/2 <1>:                  Documentation on exports (autodoc_doctree).
                                                            (line 197)
* version_numstr/2:                      Usage and interface (autodoc_doctree).
                                                            (line  14)
* version_patch/2 <1>:                   Documentation on exports (autodoc_doctree).
                                                            (line 189)
* version_patch/2:                       Usage and interface (autodoc_doctree).
                                                            (line  14)
* version_string/2 <1>:                  Documentation on exports (autodoc_doctree).
                                                            (line 203)
* version_string/2:                      Usage and interface (autodoc_doctree).
                                                            (line  14)
* viewer/3 <1>:                          Documentation on exports (autodoc_settings).
                                                            (line  54)
* viewer/3:                              Usage and interface (autodoc_settings).
                                                            (line  14)
* w/1 <1>:                               Documentation on exports (example_module).
                                                            (line 157)
* w/1:                                   Usage and interface (example_module).
                                                            (line  14)
* word-help:                             Accessing info manuals.
                                                            (line  84)
* word-help-setup.el:                    Accessing info manuals.
                                                            (line  86)
* word-help.el:                          Accessing info manuals.
                                                            (line  86)
* write <1>:                             Usage and interface (autodoc_doctree).
                                                            (line  32)
* write:                                 Usage and interface (autodoc_state).
                                                            (line  32)
* WWW <1>:                               Accessing html manuals.
                                                            (line   6)
* WWW:                                   Summary.           (line  44)
* WWW address:                           Documentation on exports (comments).
                                                            (line 291)
* xdvi:                                  Working on a manual.
                                                            (line   9)
* xdvi/1 <1>:                            Documentation on exports (autodoc_settings).
                                                            (line  58)
* xdvi/1:                                Usage and interface (autodoc_settings).
                                                            (line  14)
* xdvisize/1 <1>:                        Documentation on exports (autodoc_settings).
                                                            (line  62)
* xdvisize/1:                            Usage and interface (autodoc_settings).
                                                            (line  14)
* yes:                                   Run-time checking of assertions.
                                                            (line  40)
* ymd_date/1:                            Documentation on internals (comments).
                                                            (line 476)



Tag Table:
Node: Top3297
Node: Summary4907
Node: Introduction7298
Node: Overview of this document8379
Node: lpdoc operation - source and target files10612
Node: lpdoc usage15908
Node: Version/Change Log16490
Node: *** PART I - LPdoc Reference Manual43304
Node: Generating Installing and Accessing Manuals43526
Node: Generating a manual from the Ciao Emacs mode44566
Node: Generating a manual45880
Node: Working on a manual54237
Node: Cleaning up the documentation directory55113
Node: Installing a generated manual in a public area57003
Node: Enhancing the documentation being generated60136
Node: Accessing on-line manuals62865
Node: Accessing html manuals63601
Node: Accessing info manuals64461
Node: Accessing man manuals68993
Node: Putting it all together69826
Node: Some usage tips71239
Node: Ensuring Compatibility with All Supported Target Formats71909
Node: Writing comments which document version/patch changes73786
Node: Documenting Libraries and/or Applications75285
Node: Documenting files which are not modules77471
Node: Splitting large documents into parts78715
Node: Documenting reexported predicates79964
Node: Separating the documentation from the source file81254
Node: Generating auxiliary files (e.g. READMEs)82495
Node: Troubleshooting83974
Node: Documentation Mark-up Language and Declarations86077
Node: Usage and interface (comments)87377
Node: Documentation on exports (comments)88772
Node: Documentation on internals (comments)107990
Node: The Ciao assertion package128708
Node: More info130436
Node: Some attention points131181
Node: Usage and interface (assertions_doc)132386
Node: Documentation on new declarations (assertions_doc)134292
Node: Documentation on exports (assertions_doc)149754
Node: Types and properties related to assertions154102
Node: Usage and interface (assertions_props)154996
Node: Documentation on exports (assertions_props)156111
Node: Declaring regular types171193
Node: Defining properties172406
Node: Usage and interface (regtypes_doc)180071
Node: Documentation on new declarations (regtypes_doc)180769
Node: Basic data types and properties184174
Node: Usage and interface (basic_props)184831
Node: Documentation on exports (basic_props)186265
Node: Properties which are native to analyzers215938
Node: Usage and interface (native_props)216566
Node: Documentation on exports (native_props)218383
Node: Meta-properties236169
Node: Usage and interface (meta_props)237192
Node: Documentation on exports (meta_props)238094
Node: Documentation on multifiles (meta_props)239197
Node: Documentation on internals (meta_props)240037
Node: An Example - Documenting a Library Module241263
Node: Auto Documenter Output for the Example Module248794
Node: Usage and interface (example_module)249500
Node: Documentation on exports (example_module)250696
Node: Documentation on multifiles (example_module)257814
Node: Documentation on internals (example_module)261372
Node: Run-time checking of assertions263076
Node: Usage and interface (rtchecks_doc)266984
Node: Unit Testing Library267654
Node: Additional notes270298
Node: Usage and interface (unittest_doc)271254
Node: Installing lpdoc271858
Node: Installing the source distribution (lpdoc)272599
Node: Other software packages required (lpdoc)275000
Node: *** PART II - LPdoc Internals Manual279341
Node: Documentation Generation Library279559
Node: Usage and interface (autodoc)282522
Node: Documentation on exports (autodoc)284282
Node: Documentation on multifiles (autodoc)287690
Node: Internal State for Documentation Generation288222
Node: Usage and interface (autodoc_state)288739
Node: Documentation on exports (autodoc_state)291150
Node: Documentation Abstract Syntax Tree300231
Node: Usage and interface (autodoc_doctree)300880
Node: Documentation on exports (autodoc_doctree)302933
Node: Documentation on multifiles (autodoc_doctree)309264
Node: Handling the Document Structure309832
Node: Usage and interface (autodoc_structure)310196
Node: Documentation on exports (autodoc_structure)311279
Node: Access to Default Settings312260
Node: Usage and interface (autodoc_settings)312722
Node: Documentation on exports (autodoc_settings)314007
Node: *** LPdoc Backends316852
Node: Texinfo Backend317010
Node: Usage and interface (autodoc_texinfo)317362
Node: Documentation on exports (autodoc_texinfo)318794
Node: Documentation on multifiles (autodoc_texinfo)319190
Node: HTML Backend320370
Node: Usage and interface (autodoc_html)320663
Node: Documentation on multifiles (autodoc_html)321873
Node: Resource Handling for the HTML Backend323032
Node: Usage and interface (autodoc_html_resources)323416
Node: Documentation on exports (autodoc_html_resources)324546
Node: Template Support for the HTML Backend325133
Node: Usage and interface (autodoc_html_template)325524
Node: Documentation on exports (autodoc_html_template)326663
Node: Man Pages (man) Backend327381
Node: Usage and interface (autodoc_man)327732
Node: Documentation on multifiles (autodoc_man)328668
Node: Filesystem Abstraction329690
Node: Usage and interface (autodoc_filesystem)330195
Node: Documentation on exports (autodoc_filesystem)331847
Node: Indexing Commands (Definition and Formatting)335817
Node: Usage and interface (autodoc_index)336325
Node: Documentation on exports (autodoc_index)337547
Node: Database of Documentation References339357
Node: Usage and interface (autodoc_refsdb)339891
Node: Documentation on exports (autodoc_refsdb)341113
Node: Error Messages342559
Node: Usage and interface (autodoc_errors)342886
Node: Documentation on exports (autodoc_errors)343613
Node: Resolution of Bibliographical References343948
Node: Usage and interface (autodoc_bibrefs)344475
Node: Documentation on exports (autodoc_bibrefs)345659
Node: Auxiliary Definitions346779
Node: Usage and interface (autodoc_aux)347116
Node: Documentation on exports (autodoc_aux)348057
Node: Image Handling348572
Node: Usage and interface (autodoc_images)349067
Node: Documentation on exports (autodoc_images)350149
Node: References351199
Node: Library/Module Index354612
Node: Predicate/Method Index358775
Node: Property Index388681
Node: Regular Type Index401537
Node: Declaration Index410958
Node: Concept Index415215
Node: Author Index453211
Node: Global Index459611

End Tag Table
